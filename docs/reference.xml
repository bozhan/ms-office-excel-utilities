<?xml version="1.0" encoding="Windows-1252" ?>
<?xml-stylesheet type="text/xsl" href="./reference.xsl" ?>
<ProjectGroup>
<FileName>Project Group</FileName>
<PathFileName>Project Group</PathFileName>
<Projects>
<Project>
<Name>VBAProject</Name>
<FileName>FUNCRES.XLAM</FileName>
<PathFileName>C:\Program Files (x86)\Microsoft Office\Office14\Library\Analysis\FUNCRES.XLAM</PathFileName>
<BuildFileName>FUNCRES.DLL</BuildFileName>
<BuildPathFileName>C:\Program Files (x86)\Microsoft Office\Office14\Library\Analysis\FUNCRES.DLL</BuildPathFileName>
<Description></Description>
<HelpContextID>0</HelpContextID>
<HelpFile></HelpFile>
<Type>Host Project</Type>
<References>
<Reference>
<Name>VBA</Name>
<FileName>vbe7.dll</FileName>
<PathFileName>c:\progra~2\common~1\micros~1\vba\vba7\vbe7.dll</PathFileName>
<Description>Visual Basic For Applications</Description>
<BuiltIn>True</BuiltIn>
<Guid>{000204EF-0000-0000-C000-000000000046}</Guid>
<Major>4</Major>
<Minor>1</Minor>
<Type>TypeLib</Type>
</Reference>
<Reference>
<Name>Excel</Name>
<FileName>excel.exe</FileName>
<PathFileName>c:\program files (x86)\microsoft office\office14\excel.exe</PathFileName>
<Description>Microsoft Excel 14.0 Object Library</Description>
<BuiltIn>True</BuiltIn>
<Guid>{00020813-0000-0000-C000-000000000046}</Guid>
<Major>1</Major>
<Minor>7</Minor>
<Type>TypeLib</Type>
</Reference>
<Reference>
<Name>stdole</Name>
<FileName>stdole2.tlb</FileName>
<PathFileName>c:\windows\syswow64\stdole2.tlb</PathFileName>
<Description>OLE Automation</Description>
<BuiltIn>False</BuiltIn>
<Guid>{00020430-0000-0000-C000-000000000046}</Guid>
<Major>2</Major>
<Minor>0</Minor>
<Type>TypeLib</Type>
</Reference>
<Reference>
<Name>Office</Name>
<FileName>mso.dll</FileName>
<PathFileName>c:\program files (x86)\common files\microsoft shared\office14\mso.dll</PathFileName>
<Description>Microsoft Office 14.0 Object Library</Description>
<BuiltIn>False</BuiltIn>
<Guid>{2DF8D04C-5BFA-101B-BDE5-00AA0044DE52}</Guid>
<Major>2</Major>
<Minor>5</Minor>
<Type>TypeLib</Type>
</Reference>
</References>
<Files>
<File>
<Name>ThisWorkbook</Name>
<FileName></FileName>
<PathFileName></PathFileName>
<Type>VBADocument</Type>
<Properties>
<Property>
<Name>Creator</Name>
<Value>1480803660</Value>
</Property>
<Property>
<Name>AcceptLabelsInFormulas</Name>
<Value>False</Value>
</Property>
<Property>
<Name>ActiveChart</Name>
<Value></Value>
</Property>
<Property>
<Name>ActiveSheet</Name>
<Value></Value>
</Property>
<Property>
<Name>Author</Name>
<Value></Value>
</Property>
<Property>
<Name>AutoUpdateFrequency</Name>
<Value>0</Value>
</Property>
<Property>
<Name>AutoUpdateSaveChanges</Name>
<Value></Value>
</Property>
<Property>
<Name>ChangeHistoryDuration</Name>
<Value>0</Value>
</Property>
<Property>
<Name>CodeName</Name>
<Value>ThisWorkbook</Value>
</Property>
<Property>
<Name>_CodeName</Name>
<Value>ThisWorkbook</Value>
</Property>
<Property>
<Name>Colors</Name>
<Value></Value>
</Property>
<Property>
<Name>CommandBars</Name>
<Value></Value>
</Property>
<Property>
<Name>Comments</Name>
<Value></Value>
</Property>
<Property>
<Name>ConflictResolution</Name>
<Value>1</Value>
</Property>
<Property>
<Name>Container</Name>
<Value></Value>
</Property>
<Property>
<Name>CreateBackup</Name>
<Value>False</Value>
</Property>
<Property>
<Name>Date1904</Name>
<Value>False</Value>
</Property>
<Property>
<Name>DisplayDrawingObjects</Name>
<Value>-4104</Value>
</Property>
<Property>
<Name>FileFormat</Name>
<Value>55</Value>
</Property>
<Property>
<Name>FullName</Name>
<Value>C:\Program Files (x86)\Microsoft Office\Office14\Library\Analysis\FUNCRES.XLAM</Value>
</Property>
<Property>
<Name>HasMailer</Name>
<Value>False</Value>
</Property>
<Property>
<Name>HasPassword</Name>
<Value>False</Value>
</Property>
<Property>
<Name>HasRoutingSlip</Name>
<Value>False</Value>
</Property>
<Property>
<Name>IsAddin</Name>
<Value>True</Value>
</Property>
<Property>
<Name>Keywords</Name>
<Value></Value>
</Property>
<Property>
<Name>Mailer</Name>
<Value></Value>
</Property>
<Property>
<Name>MultiUserEditing</Name>
<Value>False</Value>
</Property>
<Property>
<Name>Name</Name>
<Value>FUNCRES.XLAM</Value>
</Property>
<Property>
<Name>OnSave</Name>
<Value></Value>
</Property>
<Property>
<Name>OnSheetActivate</Name>
<Value></Value>
</Property>
<Property>
<Name>OnSheetDeactivate</Name>
<Value></Value>
</Property>
<Property>
<Name>Path</Name>
<Value>C:\Program Files (x86)\Microsoft Office\Office14\Library\Analysis</Value>
</Property>
<Property>
<Name>PersonalViewListSettings</Name>
<Value>True</Value>
</Property>
<Property>
<Name>PersonalViewPrintSettings</Name>
<Value>True</Value>
</Property>
<Property>
<Name>PrecisionAsDisplayed</Name>
<Value>False</Value>
</Property>
<Property>
<Name>ProtectStructure</Name>
<Value>False</Value>
</Property>
<Property>
<Name>ProtectWindows</Name>
<Value>False</Value>
</Property>
<Property>
<Name>ReadOnly</Name>
<Value>True</Value>
</Property>
<Property>
<Name>_ReadOnlyRecommended</Name>
<Value>False</Value>
</Property>
<Property>
<Name>RevisionNumber</Name>
<Value>0</Value>
</Property>
<Property>
<Name>Routed</Name>
<Value>False</Value>
</Property>
<Property>
<Name>Saved</Name>
<Value>False</Value>
</Property>
<Property>
<Name>SaveLinkValues</Name>
<Value>True</Value>
</Property>
<Property>
<Name>ShowConflictHistory</Name>
<Value>False</Value>
</Property>
<Property>
<Name>Subject</Name>
<Value></Value>
</Property>
<Property>
<Name>Title</Name>
<Value></Value>
</Property>
<Property>
<Name>UpdateRemoteReferences</Name>
<Value>True</Value>
</Property>
<Property>
<Name>UserControl</Name>
<Value></Value>
</Property>
<Property>
<Name>UserStatus</Name>
<Value></Value>
</Property>
<Property>
<Name>WriteReserved</Name>
<Value>False</Value>
</Property>
<Property>
<Name>WriteReservedBy</Name>
<Value>BoZ</Value>
</Property>
<Property>
<Name>TemplateRemoveExtData</Name>
<Value>False</Value>
</Property>
<Property>
<Name>HighlightChangesOnScreen</Name>
<Value>False</Value>
</Property>
<Property>
<Name>KeepChangeHistory</Name>
<Value>True</Value>
</Property>
<Property>
<Name>ListChangesOnNewSheet</Name>
<Value>False</Value>
</Property>
<Property>
<Name>IsInplace</Name>
<Value>False</Value>
</Property>
<Property>
<Name>EnvelopeVisible</Name>
<Value>False</Value>
</Property>
<Property>
<Name>CalculationVersion</Name>
<Value>145621</Value>
</Property>
<Property>
<Name>VBASigned</Name>
<Value>True</Value>
</Property>
<Property>
<Name>ShowPivotTableFieldList</Name>
<Value>True</Value>
</Property>
<Property>
<Name>UpdateLinks</Name>
<Value>1</Value>
</Property>
<Property>
<Name>EnableAutoRecover</Name>
<Value>True</Value>
</Property>
<Property>
<Name>RemovePersonalInformation</Name>
<Value>True</Value>
</Property>
<Property>
<Name>FullNameURLEncoded</Name>
<Value>C:\Program Files (x86)\Microsoft Office\Office14\Library\Analysis\FUNCRES.XLAM</Value>
</Property>
<Property>
<Name>Password</Name>
<Value>********</Value>
</Property>
<Property>
<Name>WritePassword</Name>
<Value>********</Value>
</Property>
<Property>
<Name>PasswordEncryptionProvider</Name>
<Value></Value>
</Property>
<Property>
<Name>PasswordEncryptionAlgorithm</Name>
<Value></Value>
</Property>
<Property>
<Name>PasswordEncryptionKeyLength</Name>
<Value>0</Value>
</Property>
<Property>
<Name>PasswordEncryptionFileProperties</Name>
<Value>True</Value>
</Property>
<Property>
<Name>ReadOnlyRecommended</Name>
<Value>False</Value>
</Property>
<Property>
<Name>SmartTagOptions</Name>
<Value></Value>
</Property>
<Property>
<Name>SharedWorkspace</Name>
<Value></Value>
</Property>
<Property>
<Name>DocumentLibraryVersions</Name>
<Value></Value>
</Property>
<Property>
<Name>InactiveListBorderVisible</Name>
<Value>True</Value>
</Property>
<Property>
<Name>DisplayInkComments</Name>
<Value>False</Value>
</Property>
<Property>
<Name>ContentTypeProperties</Name>
<Value></Value>
</Property>
<Property>
<Name>ServerPolicy</Name>
<Value></Value>
</Property>
<Property>
<Name>DefaultTableStyle</Name>
<Value>TableStyleMedium9</Value>
</Property>
<Property>
<Name>DefaultPivotTableStyle</Name>
<Value>None</Value>
</Property>
<Property>
<Name>CheckCompatibility</Name>
<Value>False</Value>
</Property>
<Property>
<Name>HasVBProject</Name>
<Value>True</Value>
</Property>
<Property>
<Name>Final</Name>
<Value>False</Value>
</Property>
<Property>
<Name>Excel8CompatibilityMode</Name>
<Value>False</Value>
</Property>
<Property>
<Name>ConnectionsDisabled</Name>
<Value>False</Value>
</Property>
<Property>
<Name>ShowPivotChartActiveFields</Name>
<Value>False</Value>
</Property>
<Property>
<Name>EncryptionProvider</Name>
<Value></Value>
</Property>
<Property>
<Name>DoNotPromptForConvert</Name>
<Value>False</Value>
</Property>
<Property>
<Name>ForceFullCalculation</Name>
<Value>False</Value>
</Property>
<Property>
<Name>ActiveSlicer</Name>
<Value></Value>
</Property>
<Property>
<Name>DefaultSlicerStyle</Name>
<Value>SlicerStyleLight1</Value>
</Property>
<Property>
<Name>AccuracyVersion</Name>
<Value>0</Value>
</Property>
</Properties>
<CodeModule>
<CountOfDeclarationLines>0</CountOfDeclarationLines>
<CountOfLines>0</CountOfLines>
<Interfaces>
</Interfaces>
<Events>
</Events>
<Procedures>
</Procedures>
<CommentLines>
</CommentLines>
</CodeModule>
</File>
<File>
<Name>Sheet1</Name>
<FileName></FileName>
<PathFileName></PathFileName>
<Type>VBADocument</Type>
<Properties>
<Property>
<Name>Creator</Name>
<Value>1480803660</Value>
</Property>
<Property>
<Name>CodeName</Name>
<Value>Sheet1</Value>
</Property>
<Property>
<Name>_CodeName</Name>
<Value>Sheet1</Value>
</Property>
<Property>
<Name>Index</Name>
<Value>1</Value>
</Property>
<Property>
<Name>Name</Name>
<Value>RES</Value>
</Property>
<Property>
<Name>Next</Name>
<Value></Value>
</Property>
<Property>
<Name>OnDoubleClick</Name>
<Value></Value>
</Property>
<Property>
<Name>OnSheetActivate</Name>
<Value></Value>
</Property>
<Property>
<Name>OnSheetDeactivate</Name>
<Value></Value>
</Property>
<Property>
<Name>Previous</Name>
<Value></Value>
</Property>
<Property>
<Name>ProtectContents</Name>
<Value>False</Value>
</Property>
<Property>
<Name>ProtectDrawingObjects</Name>
<Value>False</Value>
</Property>
<Property>
<Name>ProtectionMode</Name>
<Value>False</Value>
</Property>
<Property>
<Name>ProtectScenarios</Name>
<Value>False</Value>
</Property>
<Property>
<Name>Visible</Name>
<Value>-1</Value>
</Property>
<Property>
<Name>TransitionExpEval</Name>
<Value>False</Value>
</Property>
<Property>
<Name>AutoFilterMode</Name>
<Value>False</Value>
</Property>
<Property>
<Name>EnableCalculation</Name>
<Value>True</Value>
</Property>
<Property>
<Name>CircularReference</Name>
<Value></Value>
</Property>
<Property>
<Name>ConsolidationFunction</Name>
<Value>-4157</Value>
</Property>
<Property>
<Name>ConsolidationOptions</Name>
<Value></Value>
</Property>
<Property>
<Name>ConsolidationSources</Name>
<Value></Value>
</Property>
<Property>
<Name>DisplayAutomaticPageBreaks</Name>
<Value>False</Value>
</Property>
<Property>
<Name>EnableAutoFilter</Name>
<Value>False</Value>
</Property>
<Property>
<Name>EnableSelection</Name>
<Value>0</Value>
</Property>
<Property>
<Name>EnableOutlining</Name>
<Value>False</Value>
</Property>
<Property>
<Name>EnablePivotTable</Name>
<Value>False</Value>
</Property>
<Property>
<Name>FilterMode</Name>
<Value>False</Value>
</Property>
<Property>
<Name>OnCalculate</Name>
<Value></Value>
</Property>
<Property>
<Name>OnData</Name>
<Value></Value>
</Property>
<Property>
<Name>OnEntry</Name>
<Value></Value>
</Property>
<Property>
<Name>Range</Name>
<Value></Value>
</Property>
<Property>
<Name>ScrollArea</Name>
<Value></Value>
</Property>
<Property>
<Name>StandardHeight</Name>
<Value>12,75</Value>
</Property>
<Property>
<Name>StandardWidth</Name>
<Value>8,43</Value>
</Property>
<Property>
<Name>TransitionFormEntry</Name>
<Value>False</Value>
</Property>
<Property>
<Name>Type</Name>
<Value>-4167</Value>
</Property>
<Property>
<Name>DisplayPageBreaks</Name>
<Value>False</Value>
</Property>
<Property>
<Name>_DisplayRightToLeft</Name>
<Value>False</Value>
</Property>
<Property>
<Name>AutoFilter</Name>
<Value></Value>
</Property>
<Property>
<Name>DisplayRightToLeft</Name>
<Value>False</Value>
</Property>
<Property>
<Name>EnableFormatConditionsCalculation</Name>
<Value>True</Value>
</Property>
<Property>
<Name>PrintedCommentPages</Name>
<Value>0</Value>
</Property>
</Properties>
<CodeModule>
<CountOfDeclarationLines>0</CountOfDeclarationLines>
<CountOfLines>0</CountOfLines>
<Interfaces>
</Interfaces>
<Events>
</Events>
<Procedures>
</Procedures>
<CommentLines>
</CommentLines>
</CodeModule>
</File>
<File>
<Name>RibbonX_Code</Name>
<FileName></FileName>
<PathFileName></PathFileName>
<Type>StdModule</Type>
<Properties>
<Property>
<Name>Name</Name>
<Value>RibbonX_Code</Value>
</Property>
</Properties>
<CodeModule>
<CountOfDeclarationLines>0</CountOfDeclarationLines>
<CountOfLines>10</CountOfLines>
<Interfaces>
</Interfaces>
<Events>
</Events>
<Procedures>
<Procedure>
<Name>ShowATPDialog</Name>
<Scope></Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
<CommentLine>Entry point for RibbonX button click</CommentLine>
</CommentLines>
<Declaration>Sub ShowATPDialog(control As IRibbonControl)</Declaration>
<Parameters>
<Parameter>
<Name>control</Name>
<Type>IRibbonControl</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>GetATPLabel</Name>
<Scope></Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>5</CountOfLines>
<CommentLines>
<CommentLine>Callback for RibbonX button label</CommentLine>
</CommentLines>
<Declaration>Sub GetATPLabel(control As IRibbonControl, ByRef label)</Declaration>
<Parameters>
<Parameter>
<Name>control</Name>
<Type>IRibbonControl</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>label</Name>
<Type></Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
</Procedures>
<CommentLines>
</CommentLines>
</CodeModule>
</File>
</Files>
</Project>
<Project>
<Name>VBAProject</Name>
<FileName>Excel Utilities.xlsm</FileName>
<PathFileName>C:\Users\BoZ\dev\office-microsoft\Utilities Excel\ms-office-excel-utilities\Excel Utilities.xlsm</PathFileName>
<BuildFileName>Excel Utilities.DLL</BuildFileName>
<BuildPathFileName>C:\Users\BoZ\dev\office-microsoft\Utilities Excel\ms-office-excel-utilities\Excel Utilities.DLL</BuildPathFileName>
<Description></Description>
<HelpContextID>0</HelpContextID>
<HelpFile>116539198</HelpFile>
<Type>Host Project</Type>
<References>
<Reference>
<Name>VBA</Name>
<FileName>vbe7.dll</FileName>
<PathFileName>c:\progra~2\common~1\micros~1\vba\vba7\vbe7.dll</PathFileName>
<Description>Visual Basic For Applications</Description>
<BuiltIn>True</BuiltIn>
<Guid>{000204EF-0000-0000-C000-000000000046}</Guid>
<Major>4</Major>
<Minor>1</Minor>
<Type>TypeLib</Type>
</Reference>
<Reference>
<Name>Excel</Name>
<FileName>excel.exe</FileName>
<PathFileName>c:\program files (x86)\microsoft office\office14\excel.exe</PathFileName>
<Description>Microsoft Excel 14.0 Object Library</Description>
<BuiltIn>True</BuiltIn>
<Guid>{00020813-0000-0000-C000-000000000046}</Guid>
<Major>1</Major>
<Minor>7</Minor>
<Type>TypeLib</Type>
</Reference>
<Reference>
<Name>MSForms</Name>
<FileName>fm20.dll</FileName>
<PathFileName>c:\windows\syswow64\fm20.dll</PathFileName>
<Description>Microsoft Forms 2.0 Object Library</Description>
<BuiltIn>False</BuiltIn>
<Guid>{0D452EE1-E08F-101A-852E-02608C4D0BB4}</Guid>
<Major>2</Major>
<Minor>0</Minor>
<Type>TypeLib</Type>
</Reference>
<Reference>
<Name>Office</Name>
<FileName>mso.dll</FileName>
<PathFileName>c:\program files (x86)\common files\microsoft shared\office14\mso.dll</PathFileName>
<Description>Microsoft Office 14.0 Object Library</Description>
<BuiltIn>False</BuiltIn>
<Guid>{2DF8D04C-5BFA-101B-BDE5-00AA0044DE52}</Guid>
<Major>2</Major>
<Minor>5</Minor>
<Type>TypeLib</Type>
</Reference>
<Reference>
<Name>Scripting</Name>
<FileName>scrrun.dll</FileName>
<PathFileName>c:\windows\syswow64\scrrun.dll</PathFileName>
<Description>Microsoft Scripting Runtime</Description>
<BuiltIn>False</BuiltIn>
<Guid>{420B2830-E718-11CF-893D-00A0C9054228}</Guid>
<Major>1</Major>
<Minor>0</Minor>
<Type>TypeLib</Type>
</Reference>
<Reference>
<Name>stdole</Name>
<FileName>stdole2.tlb</FileName>
<PathFileName>c:\windows\syswow64\stdole2.tlb</PathFileName>
<Description>OLE Automation</Description>
<BuiltIn>False</BuiltIn>
<Guid>{00020430-0000-0000-C000-000000000046}</Guid>
<Major>2</Major>
<Minor>0</Minor>
<Type>TypeLib</Type>
</Reference>
</References>
<Files>
<File>
<Name>ThisWorkbook</Name>
<FileName></FileName>
<PathFileName></PathFileName>
<Type>VBADocument</Type>
<Properties>
<Property>
<Name>Creator</Name>
<Value>1480803660</Value>
</Property>
<Property>
<Name>AcceptLabelsInFormulas</Name>
<Value>False</Value>
</Property>
<Property>
<Name>ActiveChart</Name>
<Value></Value>
</Property>
<Property>
<Name>Author</Name>
<Value>Ivanov, Bozhan (E F PR SU OM PIM 4)</Value>
</Property>
<Property>
<Name>AutoUpdateFrequency</Name>
<Value>0</Value>
</Property>
<Property>
<Name>AutoUpdateSaveChanges</Name>
<Value></Value>
</Property>
<Property>
<Name>ChangeHistoryDuration</Name>
<Value>0</Value>
</Property>
<Property>
<Name>CodeName</Name>
<Value>ThisWorkbook</Value>
</Property>
<Property>
<Name>_CodeName</Name>
<Value>ThisWorkbook</Value>
</Property>
<Property>
<Name>Colors</Name>
<Value></Value>
</Property>
<Property>
<Name>CommandBars</Name>
<Value></Value>
</Property>
<Property>
<Name>Comments</Name>
<Value></Value>
</Property>
<Property>
<Name>ConflictResolution</Name>
<Value>1</Value>
</Property>
<Property>
<Name>Container</Name>
<Value></Value>
</Property>
<Property>
<Name>CreateBackup</Name>
<Value>False</Value>
</Property>
<Property>
<Name>Date1904</Name>
<Value>False</Value>
</Property>
<Property>
<Name>DisplayDrawingObjects</Name>
<Value>-4104</Value>
</Property>
<Property>
<Name>FileFormat</Name>
<Value>52</Value>
</Property>
<Property>
<Name>FullName</Name>
<Value>C:\Users\BoZ\dev\office-microsoft\Utilities Excel\ms-office-excel-utilities\Excel Utilities.xlsm</Value>
</Property>
<Property>
<Name>HasMailer</Name>
<Value>False</Value>
</Property>
<Property>
<Name>HasPassword</Name>
<Value>False</Value>
</Property>
<Property>
<Name>HasRoutingSlip</Name>
<Value>False</Value>
</Property>
<Property>
<Name>IsAddin</Name>
<Value>False</Value>
</Property>
<Property>
<Name>Keywords</Name>
<Value>C_Confidential</Value>
</Property>
<Property>
<Name>Mailer</Name>
<Value></Value>
</Property>
<Property>
<Name>MultiUserEditing</Name>
<Value>False</Value>
</Property>
<Property>
<Name>Name</Name>
<Value>Excel Utilities.xlsm</Value>
</Property>
<Property>
<Name>OnSave</Name>
<Value></Value>
</Property>
<Property>
<Name>OnSheetActivate</Name>
<Value></Value>
</Property>
<Property>
<Name>OnSheetDeactivate</Name>
<Value></Value>
</Property>
<Property>
<Name>Path</Name>
<Value>C:\Users\BoZ\dev\office-microsoft\Utilities Excel\ms-office-excel-utilities</Value>
</Property>
<Property>
<Name>PersonalViewListSettings</Name>
<Value>True</Value>
</Property>
<Property>
<Name>PersonalViewPrintSettings</Name>
<Value>True</Value>
</Property>
<Property>
<Name>PrecisionAsDisplayed</Name>
<Value>False</Value>
</Property>
<Property>
<Name>ProtectStructure</Name>
<Value>False</Value>
</Property>
<Property>
<Name>ProtectWindows</Name>
<Value>False</Value>
</Property>
<Property>
<Name>ReadOnly</Name>
<Value>False</Value>
</Property>
<Property>
<Name>_ReadOnlyRecommended</Name>
<Value>False</Value>
</Property>
<Property>
<Name>RevisionNumber</Name>
<Value>0</Value>
</Property>
<Property>
<Name>Routed</Name>
<Value>False</Value>
</Property>
<Property>
<Name>Saved</Name>
<Value>True</Value>
</Property>
<Property>
<Name>SaveLinkValues</Name>
<Value>True</Value>
</Property>
<Property>
<Name>ShowConflictHistory</Name>
<Value>False</Value>
</Property>
<Property>
<Name>Subject</Name>
<Value></Value>
</Property>
<Property>
<Name>Title</Name>
<Value></Value>
</Property>
<Property>
<Name>UpdateRemoteReferences</Name>
<Value>True</Value>
</Property>
<Property>
<Name>UserControl</Name>
<Value></Value>
</Property>
<Property>
<Name>UserStatus</Name>
<Value></Value>
</Property>
<Property>
<Name>WriteReserved</Name>
<Value>False</Value>
</Property>
<Property>
<Name>WriteReservedBy</Name>
<Value>BoZ</Value>
</Property>
<Property>
<Name>TemplateRemoveExtData</Name>
<Value>False</Value>
</Property>
<Property>
<Name>HighlightChangesOnScreen</Name>
<Value>False</Value>
</Property>
<Property>
<Name>KeepChangeHistory</Name>
<Value>True</Value>
</Property>
<Property>
<Name>ListChangesOnNewSheet</Name>
<Value>False</Value>
</Property>
<Property>
<Name>IsInplace</Name>
<Value>False</Value>
</Property>
<Property>
<Name>EnvelopeVisible</Name>
<Value>False</Value>
</Property>
<Property>
<Name>CalculationVersion</Name>
<Value>145621</Value>
</Property>
<Property>
<Name>VBASigned</Name>
<Value>False</Value>
</Property>
<Property>
<Name>ShowPivotTableFieldList</Name>
<Value>True</Value>
</Property>
<Property>
<Name>UpdateLinks</Name>
<Value>1</Value>
</Property>
<Property>
<Name>EnableAutoRecover</Name>
<Value>True</Value>
</Property>
<Property>
<Name>RemovePersonalInformation</Name>
<Value>False</Value>
</Property>
<Property>
<Name>FullNameURLEncoded</Name>
<Value>C:\Users\BoZ\dev\office-microsoft\Utilities Excel\ms-office-excel-utilities\Excel Utilities.xlsm</Value>
</Property>
<Property>
<Name>Password</Name>
<Value>********</Value>
</Property>
<Property>
<Name>WritePassword</Name>
<Value>********</Value>
</Property>
<Property>
<Name>PasswordEncryptionProvider</Name>
<Value></Value>
</Property>
<Property>
<Name>PasswordEncryptionAlgorithm</Name>
<Value></Value>
</Property>
<Property>
<Name>PasswordEncryptionKeyLength</Name>
<Value>0</Value>
</Property>
<Property>
<Name>PasswordEncryptionFileProperties</Name>
<Value>True</Value>
</Property>
<Property>
<Name>ReadOnlyRecommended</Name>
<Value>False</Value>
</Property>
<Property>
<Name>SmartTagOptions</Name>
<Value></Value>
</Property>
<Property>
<Name>SharedWorkspace</Name>
<Value></Value>
</Property>
<Property>
<Name>DocumentLibraryVersions</Name>
<Value></Value>
</Property>
<Property>
<Name>InactiveListBorderVisible</Name>
<Value>True</Value>
</Property>
<Property>
<Name>DisplayInkComments</Name>
<Value>True</Value>
</Property>
<Property>
<Name>ContentTypeProperties</Name>
<Value></Value>
</Property>
<Property>
<Name>ServerPolicy</Name>
<Value></Value>
</Property>
<Property>
<Name>DefaultTableStyle</Name>
<Value>TableStyleMedium2</Value>
</Property>
<Property>
<Name>DefaultPivotTableStyle</Name>
<Value>PivotStyleMedium9</Value>
</Property>
<Property>
<Name>CheckCompatibility</Name>
<Value>False</Value>
</Property>
<Property>
<Name>HasVBProject</Name>
<Value>True</Value>
</Property>
<Property>
<Name>Final</Name>
<Value>False</Value>
</Property>
<Property>
<Name>Excel8CompatibilityMode</Name>
<Value>False</Value>
</Property>
<Property>
<Name>ConnectionsDisabled</Name>
<Value>False</Value>
</Property>
<Property>
<Name>ShowPivotChartActiveFields</Name>
<Value>False</Value>
</Property>
<Property>
<Name>EncryptionProvider</Name>
<Value></Value>
</Property>
<Property>
<Name>DoNotPromptForConvert</Name>
<Value>False</Value>
</Property>
<Property>
<Name>ForceFullCalculation</Name>
<Value>False</Value>
</Property>
<Property>
<Name>ActiveSlicer</Name>
<Value></Value>
</Property>
<Property>
<Name>DefaultSlicerStyle</Name>
<Value>SlicerStyleLight1</Value>
</Property>
<Property>
<Name>AccuracyVersion</Name>
<Value>0</Value>
</Property>
</Properties>
<CodeModule>
<CountOfDeclarationLines>0</CountOfDeclarationLines>
<CountOfLines>5</CountOfLines>
<Interfaces>
</Interfaces>
<Events>
</Events>
<Procedures>
<Procedure>
<Name>Workbook_Open</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>5</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub Workbook_Open()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
</Procedures>
<CommentLines>
</CommentLines>
</CodeModule>
</File>
<File>
<Name>Sheet1</Name>
<FileName></FileName>
<PathFileName></PathFileName>
<Type>VBADocument</Type>
<Properties>
<Property>
<Name>Creator</Name>
<Value>1480803660</Value>
</Property>
<Property>
<Name>CodeName</Name>
<Value>Sheet1</Value>
</Property>
<Property>
<Name>_CodeName</Name>
<Value>Sheet1</Value>
</Property>
<Property>
<Name>Index</Name>
<Value>1</Value>
</Property>
<Property>
<Name>Name</Name>
<Value>Input</Value>
</Property>
<Property>
<Name>OnDoubleClick</Name>
<Value></Value>
</Property>
<Property>
<Name>OnSheetActivate</Name>
<Value></Value>
</Property>
<Property>
<Name>OnSheetDeactivate</Name>
<Value></Value>
</Property>
<Property>
<Name>Previous</Name>
<Value></Value>
</Property>
<Property>
<Name>ProtectContents</Name>
<Value>False</Value>
</Property>
<Property>
<Name>ProtectDrawingObjects</Name>
<Value>False</Value>
</Property>
<Property>
<Name>ProtectionMode</Name>
<Value>False</Value>
</Property>
<Property>
<Name>ProtectScenarios</Name>
<Value>False</Value>
</Property>
<Property>
<Name>Visible</Name>
<Value>-1</Value>
</Property>
<Property>
<Name>TransitionExpEval</Name>
<Value>False</Value>
</Property>
<Property>
<Name>AutoFilterMode</Name>
<Value>False</Value>
</Property>
<Property>
<Name>EnableCalculation</Name>
<Value>True</Value>
</Property>
<Property>
<Name>CircularReference</Name>
<Value></Value>
</Property>
<Property>
<Name>ConsolidationFunction</Name>
<Value>-4157</Value>
</Property>
<Property>
<Name>ConsolidationOptions</Name>
<Value></Value>
</Property>
<Property>
<Name>ConsolidationSources</Name>
<Value></Value>
</Property>
<Property>
<Name>DisplayAutomaticPageBreaks</Name>
<Value>False</Value>
</Property>
<Property>
<Name>EnableAutoFilter</Name>
<Value>False</Value>
</Property>
<Property>
<Name>EnableSelection</Name>
<Value>0</Value>
</Property>
<Property>
<Name>EnableOutlining</Name>
<Value>False</Value>
</Property>
<Property>
<Name>EnablePivotTable</Name>
<Value>False</Value>
</Property>
<Property>
<Name>FilterMode</Name>
<Value>False</Value>
</Property>
<Property>
<Name>OnCalculate</Name>
<Value></Value>
</Property>
<Property>
<Name>OnData</Name>
<Value></Value>
</Property>
<Property>
<Name>OnEntry</Name>
<Value></Value>
</Property>
<Property>
<Name>Range</Name>
<Value></Value>
</Property>
<Property>
<Name>ScrollArea</Name>
<Value></Value>
</Property>
<Property>
<Name>StandardHeight</Name>
<Value>15</Value>
</Property>
<Property>
<Name>StandardWidth</Name>
<Value>8,43</Value>
</Property>
<Property>
<Name>TransitionFormEntry</Name>
<Value>False</Value>
</Property>
<Property>
<Name>Type</Name>
<Value>-4167</Value>
</Property>
<Property>
<Name>DisplayPageBreaks</Name>
<Value>False</Value>
</Property>
<Property>
<Name>_DisplayRightToLeft</Name>
<Value>False</Value>
</Property>
<Property>
<Name>AutoFilter</Name>
<Value></Value>
</Property>
<Property>
<Name>DisplayRightToLeft</Name>
<Value>False</Value>
</Property>
<Property>
<Name>EnableFormatConditionsCalculation</Name>
<Value>True</Value>
</Property>
<Property>
<Name>PrintedCommentPages</Name>
<Value>1</Value>
</Property>
</Properties>
<CodeModule>
<CountOfDeclarationLines>0</CountOfDeclarationLines>
<CountOfLines>0</CountOfLines>
<Interfaces>
</Interfaces>
<Events>
</Events>
<Procedures>
</Procedures>
<CommentLines>
</CommentLines>
</CodeModule>
</File>
<File>
<Name>UtilColor</Name>
<FileName></FileName>
<PathFileName></PathFileName>
<Type>ClassModule</Type>
<Properties>
<Property>
<Name>Name</Name>
<Value>UtilColor</Value>
</Property>
<Property>
<Name>Instancing</Name>
<Value>1</Value>
</Property>
</Properties>
<CodeModule>
<CountOfDeclarationLines>42</CountOfDeclarationLines>
<CountOfLines>92</CountOfLines>
<Interfaces>
</Interfaces>
<Events>
</Events>
<Procedures>
<Procedure>
<Name>GetRed</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function GetRed(c As ColorDec) As Long</Declaration>
<Parameters>
<Parameter>
<Name>c</Name>
<Type>ColorDec</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Long</ReturnType>
</Procedure>
<Procedure>
<Name>GetGreen</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function GetGreen(c As ColorDec) As Long</Declaration>
<Parameters>
<Parameter>
<Name>c</Name>
<Type>ColorDec</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Long</ReturnType>
</Procedure>
<Procedure>
<Name>GetBlue</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function GetBlue(c As ColorDec) As Long</Declaration>
<Parameters>
<Parameter>
<Name>c</Name>
<Type>ColorDec</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Long</ReturnType>
</Procedure>
<Procedure>
<Name>testMatchColorWithTolerance</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>36</CountOfLines>
<CommentLines>
<CommentLine>TODO Revise</CommentLine>
</CommentLines>
<Declaration>Private Sub testMatchColorWithTolerance()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
</Procedures>
<CommentLines>
</CommentLines>
</CodeModule>
</File>
<File>
<Name>UtilForm</Name>
<FileName></FileName>
<PathFileName></PathFileName>
<Type>ClassModule</Type>
<Properties>
<Property>
<Name>Name</Name>
<Value>UtilForm</Value>
</Property>
<Property>
<Name>Instancing</Name>
<Value>1</Value>
</Property>
</Properties>
<CodeModule>
<CountOfDeclarationLines>8</CountOfDeclarationLines>
<CountOfLines>390</CountOfLines>
<Interfaces>
</Interfaces>
<Events>
</Events>
<Procedures>
<Procedure>
<Name>IsFormLoaded</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>3</CountOfDeclarationLines>
<CountOfLines>19</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : IsFormLoaded</CommentLine>
<CommentLine> Descr.    :</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
<Declaration>Public Function IsFormLoaded( ByVal userFormObj As Object ) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>userFormObj</Name>
<Type>Object</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>IsFormLoadedByName</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>3</CountOfDeclarationLines>
<CountOfLines>15</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function IsFormLoadedByName( ByVal userFormName As String ) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>userFormName</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>GenerateListChoiceForm</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>7</CountOfDeclarationLines>
<CountOfLines>66</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : GenerateListChoiceForm</CommentLine>
<CommentLine> Descr.    : Displays a list box with the provided Initial List and returns the selected</CommentLine>
<CommentLine>   entries from the list in a form of a string array</CommentLine>
<CommentLine>   if cancel was pressed an empty array will be returned</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine></CommentLine>
</CommentLines>
<Declaration>Public Function GenerateListChoiceForm( initList As Variant, Optional Caption As String = &quot;Select from list ...&quot;, Optional text As String = &quot;&quot;, Optional Hint As String = &quot;&quot;, Optional lMultiSelect As MSforms.fmMultiSelect ) As Variant</Declaration>
<Parameters>
<Parameter>
<Name>initList</Name>
<Type>Variant</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Caption</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>&quot;Select from list ...&quot;</DefaultValue>
</Parameter>
<Parameter>
<Name>text</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>&quot;&quot;</DefaultValue>
</Parameter>
<Parameter>
<Name>Hint</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>&quot;&quot;</DefaultValue>
</Parameter>
<Parameter>
<Name>lMultiSelect</Name>
<Type>MSforms.fmMultiSelect</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Variant</ReturnType>
</Procedure>
<Procedure>
<Name>SetControlSizePosition</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>7</CountOfDeclarationLines>
<CountOfLines>13</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub SetControlSizePosition( ByRef crl As Object, ByVal Top As Single, ByVal Height As Single, ByVal Left As Single, ByVal Width As Single )</Declaration>
<Parameters>
<Parameter>
<Name>crl</Name>
<Type>Object</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Top</Name>
<Type>Single</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Height</Name>
<Type>Single</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Left</Name>
<Type>Single</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Width</Name>
<Type>Single</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>SetControlPositionToRelativeObject</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>7</CountOfDeclarationLines>
<CountOfLines>16</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub SetControlPositionToRelativeObject( ByRef crl As Object, ByRef RelativeObject As Object, ByVal TopOffset As Single, ByVal LeftOffset As Single, Optional ByVal Overlay As Boolean = False )</Declaration>
<Parameters>
<Parameter>
<Name>crl</Name>
<Type>Object</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>RelativeObject</Name>
<Type>Object</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>TopOffset</Name>
<Type>Single</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>LeftOffset</Name>
<Type>Single</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Overlay</Name>
<Type>Boolean</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>False</DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>AddLabel</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>14</CountOfDeclarationLines>
<CountOfLines>33</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure   : addLabel</CommentLine>
<CommentLine> Description : adds a label to a provided form obejct</CommentLine>
<CommentLine>   if a relateive object is provided then the label position is se to the relative object</CommentLine>
<CommentLine>   taking into consideration Top and Left offsets w.r.t the relative object</CommentLine>
<CommentLine>   The overlay parameter allows the new label to overlay the relative object or not</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
<Declaration>Public Function AddLabel( ByRef Form As Object, ByVal name As String, Optional ByVal text As String = &quot;&quot;, Optional ByVal Top As Single = 0, Optional ByVal Height As Single = 12, Optional ByVal Left As Single = 0, Optional ByVal Width As Single = 50, Optional ByVal IsVisible As Boolean = True, Optional ByVal RelativeObject As Object = Nothing, Optional ByVal TopOffset As Single = 0, Optional ByVal LeftOffset As Single = 0, Optional ByVal Overlay As Boolean = False ) As Object</Declaration>
<Parameters>
<Parameter>
<Name>Form</Name>
<Type>Object</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>name</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>text</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>&quot;&quot;</DefaultValue>
</Parameter>
<Parameter>
<Name>Top</Name>
<Type>Single</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>0</DefaultValue>
</Parameter>
<Parameter>
<Name>Height</Name>
<Type>Single</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>12</DefaultValue>
</Parameter>
<Parameter>
<Name>Left</Name>
<Type>Single</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>0</DefaultValue>
</Parameter>
<Parameter>
<Name>Width</Name>
<Type>Single</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>50</DefaultValue>
</Parameter>
<Parameter>
<Name>IsVisible</Name>
<Type>Boolean</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>True</DefaultValue>
</Parameter>
<Parameter>
<Name>RelativeObject</Name>
<Type>Object</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>Nothing</DefaultValue>
</Parameter>
<Parameter>
<Name>TopOffset</Name>
<Type>Single</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>0</DefaultValue>
</Parameter>
<Parameter>
<Name>LeftOffset</Name>
<Type>Single</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>0</DefaultValue>
</Parameter>
<Parameter>
<Name>Overlay</Name>
<Type>Boolean</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>False</DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Object</ReturnType>
</Procedure>
<Procedure>
<Name>AddTextBox</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>14</CountOfDeclarationLines>
<CountOfLines>34</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure   : AddTextBox</CommentLine>
<CommentLine> Description : adds a text box to a provided form obejct</CommentLine>
<CommentLine>   if a relateive object is provided then the label position is se to the relative object</CommentLine>
<CommentLine>   taking into consideration Top and Left offsets w.r.t the relative object</CommentLine>
<CommentLine>   The overlay parameter allows the new label to overlay the relative object or not</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
<Declaration>Public Function AddTextBox( ByRef Form As Object, ByVal name As String, Optional ByVal text As String = &quot;&quot;, Optional ByVal Top As Single = 0, Optional ByVal Height As Single = 18, Optional ByVal Left As Single = 0, Optional ByVal Width As Single = 72, Optional ByVal IsVisible As Boolean = True, Optional ByVal RelativeObject As Object = Nothing, Optional ByVal TopOffset As Single = 0, Optional ByVal LeftOffset As Single = 0, Optional ByVal Overlay As Boolean = False ) As Object</Declaration>
<Parameters>
<Parameter>
<Name>Form</Name>
<Type>Object</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>name</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>text</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>&quot;&quot;</DefaultValue>
</Parameter>
<Parameter>
<Name>Top</Name>
<Type>Single</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>0</DefaultValue>
</Parameter>
<Parameter>
<Name>Height</Name>
<Type>Single</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>18</DefaultValue>
</Parameter>
<Parameter>
<Name>Left</Name>
<Type>Single</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>0</DefaultValue>
</Parameter>
<Parameter>
<Name>Width</Name>
<Type>Single</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>72</DefaultValue>
</Parameter>
<Parameter>
<Name>IsVisible</Name>
<Type>Boolean</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>True</DefaultValue>
</Parameter>
<Parameter>
<Name>RelativeObject</Name>
<Type>Object</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>Nothing</DefaultValue>
</Parameter>
<Parameter>
<Name>TopOffset</Name>
<Type>Single</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>0</DefaultValue>
</Parameter>
<Parameter>
<Name>LeftOffset</Name>
<Type>Single</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>0</DefaultValue>
</Parameter>
<Parameter>
<Name>Overlay</Name>
<Type>Boolean</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>False</DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Object</ReturnType>
</Procedure>
<Procedure>
<Name>AddButton</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>14</CountOfDeclarationLines>
<CountOfLines>34</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure   : AddButton</CommentLine>
<CommentLine> Description : adds a button to a provided form obejct</CommentLine>
<CommentLine>   if a relateive object is provided then the label position is se to the relative object</CommentLine>
<CommentLine>   taking into consideration Top and Left offsets w.r.t the relative object</CommentLine>
<CommentLine>   The overlay parameter allows the new label to overlay the relative object or not</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
<Declaration>Public Function AddButton( ByRef Form As Object, ByVal name As String, Optional ByVal text As String = &quot;&quot;, Optional ByVal Top As Single = 0, Optional ByVal Height As Single = 24, Optional ByVal Left As Single = 0, Optional ByVal Width As Single = 72, Optional ByVal IsVisible As Boolean = True, Optional ByVal RelativeObject As Object = Nothing, Optional ByVal TopOffset As Single = 0, Optional ByVal LeftOffset As Single = 0, Optional ByVal Overlay As Boolean = False ) As Object</Declaration>
<Parameters>
<Parameter>
<Name>Form</Name>
<Type>Object</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>name</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>text</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>&quot;&quot;</DefaultValue>
</Parameter>
<Parameter>
<Name>Top</Name>
<Type>Single</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>0</DefaultValue>
</Parameter>
<Parameter>
<Name>Height</Name>
<Type>Single</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>24</DefaultValue>
</Parameter>
<Parameter>
<Name>Left</Name>
<Type>Single</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>0</DefaultValue>
</Parameter>
<Parameter>
<Name>Width</Name>
<Type>Single</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>72</DefaultValue>
</Parameter>
<Parameter>
<Name>IsVisible</Name>
<Type>Boolean</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>True</DefaultValue>
</Parameter>
<Parameter>
<Name>RelativeObject</Name>
<Type>Object</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>Nothing</DefaultValue>
</Parameter>
<Parameter>
<Name>TopOffset</Name>
<Type>Single</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>0</DefaultValue>
</Parameter>
<Parameter>
<Name>LeftOffset</Name>
<Type>Single</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>0</DefaultValue>
</Parameter>
<Parameter>
<Name>Overlay</Name>
<Type>Boolean</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>False</DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Object</ReturnType>
</Procedure>
<Procedure>
<Name>getLeftOffsetWithOverlay</Name>
<Scope>Private</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>4</CountOfDeclarationLines>
<CountOfLines>20</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : getLeftOffsetWithOverlay</CommentLine>
<CommentLine> Descr.    : returns the calculated Left offset for the current control object</CommentLine>
<CommentLine>             relative to another control object</CommentLine>
<CommentLine>             The left value of the control is calculated</CommentLine>
<CommentLine>             in such a way that overlay of controls is allowed on the form and the</CommentLine>
<CommentLine>             supplied offset value is calc form the inner edges of the relative control</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine></CommentLine>
</CommentLines>
<Declaration>Private Function getLeftOffsetWithOverlay( ByVal relObj As Object, ByVal offset As Long ) As Long</Declaration>
<Parameters>
<Parameter>
<Name>relObj</Name>
<Type>Object</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>offset</Name>
<Type>Long</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Long</ReturnType>
</Procedure>
<Procedure>
<Name>getTopOffsetWithOverlay</Name>
<Scope>Private</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>4</CountOfDeclarationLines>
<CountOfLines>20</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : getTopOffsetWithOverlay</CommentLine>
<CommentLine> Descr.    : returns the calculated Top offset for the current control object</CommentLine>
<CommentLine>             relative to another control object</CommentLine>
<CommentLine>             The top value of the control is calculated</CommentLine>
<CommentLine>             in such a way overlay of controls is allowed on the form and the</CommentLine>
<CommentLine>             supplied offset value is calc form the inner edges of the relative control</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine></CommentLine>
</CommentLines>
<Declaration>Private Function getTopOffsetWithOverlay( ByVal relObj As Object, ByVal offset As Long ) As Long</Declaration>
<Parameters>
<Parameter>
<Name>relObj</Name>
<Type>Object</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>offset</Name>
<Type>Long</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Long</ReturnType>
</Procedure>
<Procedure>
<Name>getLeftOffsetWithoutOverlay</Name>
<Scope>Private</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>5</CountOfDeclarationLines>
<CountOfLines>29</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : getLeftOffsetWithoutOverlay</CommentLine>
<CommentLine> Descr.    : returns the calculated Left offset for the current control object</CommentLine>
<CommentLine>             relative to another control object</CommentLine>
<CommentLine>             The left value of the control is calculated</CommentLine>
<CommentLine>             in such a way that no overlay of controls is allowed on the form and the</CommentLine>
<CommentLine>             supplied offset value is calc form the outher edges of the relative control</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine></CommentLine>
</CommentLines>
<Declaration>Private Function getLeftOffsetWithoutOverlay( ByVal obj As Object, ByVal relObj As Object, ByVal offset As Long ) As Long</Declaration>
<Parameters>
<Parameter>
<Name>obj</Name>
<Type>Object</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>relObj</Name>
<Type>Object</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>offset</Name>
<Type>Long</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Long</ReturnType>
</Procedure>
<Procedure>
<Name>getTopOffsetWithoutOverlay</Name>
<Scope>Private</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>5</CountOfDeclarationLines>
<CountOfLines>29</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : getTopOffsetWithoutOverlay</CommentLine>
<CommentLine> Descr.    : returns the calculated Left offset for the current control object</CommentLine>
<CommentLine>             relative to another control object</CommentLine>
<CommentLine>             The top value of the control is calculated</CommentLine>
<CommentLine>             in such a way that no overlay of controls is allowed on the form and the</CommentLine>
<CommentLine>             supplied offset value is calc form the outher edges of the relative control</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine></CommentLine>
</CommentLines>
<Declaration>Private Function getTopOffsetWithoutOverlay( ByVal obj As Object, ByVal relObj As Object, ByVal offset As Long ) As Long</Declaration>
<Parameters>
<Parameter>
<Name>obj</Name>
<Type>Object</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>relObj</Name>
<Type>Object</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>offset</Name>
<Type>Long</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Long</ReturnType>
</Procedure>
<Procedure>
<Name>GetTextBoxes</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>3</CountOfDeclarationLines>
<CountOfLines>18</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure   : GetTextBoxes</CommentLine>
<CommentLine> Description : Returns a collection of all text boxes in provided form object</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
<Declaration>Public Function GetTextBoxes( ByRef Form As Object ) As Collection</Declaration>
<Parameters>
<Parameter>
<Name>Form</Name>
<Type>Object</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Collection</ReturnType>
</Procedure>
<Procedure>
<Name>GetLables</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>3</CountOfDeclarationLines>
<CountOfLines>18</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure   : GetLables</CommentLine>
<CommentLine> Description : Returns a collection of all labels in provided form object</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
<Declaration>Public Function GetLables( ByRef Form As Object ) As Collection</Declaration>
<Parameters>
<Parameter>
<Name>Form</Name>
<Type>Object</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Collection</ReturnType>
</Procedure>
<Procedure>
<Name>GetButtons</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>3</CountOfDeclarationLines>
<CountOfLines>18</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure   : GetButtons</CommentLine>
<CommentLine> Description : Returns a collection of all command buttons in provided form object</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
<Declaration>Public Function GetButtons( ByRef Form As Object ) As Collection</Declaration>
<Parameters>
<Parameter>
<Name>Form</Name>
<Type>Object</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Collection</ReturnType>
</Procedure>
</Procedures>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Module    : FormUtil</CommentLine>
<CommentLine> Author    : Ivanov, Bozhan</CommentLine>
<CommentLine> Purpose   :</CommentLine>
<CommentLine> Dependancy: Requires Microsoft Forms 2.0 Object Library</CommentLine>
<CommentLine>   C:\Windows\SysWOW64\FM20.dll</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
</CodeModule>
</File>
<File>
<Name>Tests</Name>
<FileName></FileName>
<PathFileName></PathFileName>
<Type>StdModule</Type>
<Properties>
<Property>
<Name>Name</Name>
<Value>Tests</Value>
</Property>
</Properties>
<CodeModule>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>1</CountOfLines>
<Interfaces>
</Interfaces>
<Events>
</Events>
<Procedures>
</Procedures>
<CommentLines>
</CommentLines>
</CodeModule>
</File>
<File>
<Name>HeadColumn</Name>
<FileName></FileName>
<PathFileName></PathFileName>
<Type>ClassModule</Type>
<Properties>
<Property>
<Name>Name</Name>
<Value>HeadColumn</Value>
</Property>
<Property>
<Name>Instancing</Name>
<Value>1</Value>
</Property>
</Properties>
<CodeModule>
<CountOfDeclarationLines>18</CountOfDeclarationLines>
<CountOfLines>474</CountOfLines>
<Interfaces>
</Interfaces>
<Events>
</Events>
<Procedures>
<Procedure>
<Name>Class_Initialize</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>6</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub Class_Initialize()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>Class_Terminate</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub Class_Terminate()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>Init</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>12</CountOfDeclarationLines>
<CountOfLines>34</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure   : Init</CommentLine>
<CommentLine> Description :</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
<Declaration>Public Sub Init( ByRef SearchDomain As Object, ByVal HeadTitles As Variant, Optional LookAt As XlLookAt = xlWhole, Optional LookIn As XlFindLookIn = xlValues, Optional SearchOrder As XlSearchOrder = xlByRows, Optional SearchDirection As XlSearchDirection = xlNext, Optional MatchCase As Boolean = False, Optional SearchFormat As Boolean = False, Optional dataType As Variant = vbNullString, Optional NewHeaderValue As Variant = vbNullString )</Declaration>
<Parameters>
<Parameter>
<Name>SearchDomain</Name>
<Type>Object</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>HeadTitles</Name>
<Type>Variant</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>LookAt</Name>
<Type>XlLookAt</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>xlWhole</DefaultValue>
</Parameter>
<Parameter>
<Name>LookIn</Name>
<Type>XlFindLookIn</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>xlValues</DefaultValue>
</Parameter>
<Parameter>
<Name>SearchOrder</Name>
<Type>XlSearchOrder</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>xlByRows</DefaultValue>
</Parameter>
<Parameter>
<Name>SearchDirection</Name>
<Type>XlSearchDirection</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>xlNext</DefaultValue>
</Parameter>
<Parameter>
<Name>MatchCase</Name>
<Type>Boolean</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>False</DefaultValue>
</Parameter>
<Parameter>
<Name>SearchFormat</Name>
<Type>Boolean</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>False</DefaultValue>
</Parameter>
<Parameter>
<Name>dataType</Name>
<Type>Variant</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>vbNullString</DefaultValue>
</Parameter>
<Parameter>
<Name>NewHeaderValue</Name>
<Type>Variant</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>vbNullString</DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>newHeader</Name>
<Scope></Scope>
<Type>PropertyGet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Property Get newHeader() As String</Declaration>
<Parameters>
</Parameters>
<ReturnType>String</ReturnType>
</Procedure>
<Procedure>
<Name>newHeader</Name>
<Scope></Scope>
<Type>PropertyLet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Property Let newHeader(ByVal name As String)</Declaration>
<Parameters>
<Parameter>
<Name>name</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>UsedRange</Name>
<Scope></Scope>
<Type>PropertyGet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>6</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Property Get UsedRange() As Range</Declaration>
<Parameters>
</Parameters>
<ReturnType>Range</ReturnType>
</Procedure>
<Procedure>
<Name>HeadSearchRange</Name>
<Scope></Scope>
<Type>PropertyGet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Property Get HeadSearchRange() As Range</Declaration>
<Parameters>
</Parameters>
<ReturnType>Range</ReturnType>
</Procedure>
<Procedure>
<Name>HeadSearchRange</Name>
<Scope></Scope>
<Type>PropertyLet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Property Let HeadSearchRange(ByRef rng As Range)</Declaration>
<Parameters>
<Parameter>
<Name>rng</Name>
<Type>Range</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>Worksheet</Name>
<Scope></Scope>
<Type>PropertyGet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>9</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Property Get Worksheet() As Worksheet</Declaration>
<Parameters>
</Parameters>
<ReturnType>Worksheet</ReturnType>
</Procedure>
<Procedure>
<Name>Worksheet</Name>
<Scope></Scope>
<Type>PropertyLet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Property Let Worksheet(w As Worksheet)</Declaration>
<Parameters>
<Parameter>
<Name>w</Name>
<Type>Worksheet</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>Head</Name>
<Scope></Scope>
<Type>PropertyGet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>22</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Property Get Head() As Range</Declaration>
<Parameters>
</Parameters>
<ReturnType>Range</ReturnType>
</Procedure>
<Procedure>
<Name>AfterHeadRange</Name>
<Scope></Scope>
<Type>PropertyGet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>24</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure   : AfterHeadRange</CommentLine>
<CommentLine> Description : in case the no data exist but the headers</CommentLine>
<CommentLine>   we set the afterhead as the next cell after the header as default</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
<Declaration>Property Get AfterHeadRange() As Range</Declaration>
<Parameters>
</Parameters>
<ReturnType>Range</ReturnType>
</Procedure>
<Procedure>
<Name>dataType</Name>
<Scope></Scope>
<Type>PropertyGet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Property Get dataType() As String</Declaration>
<Parameters>
</Parameters>
<ReturnType>String</ReturnType>
</Procedure>
<Procedure>
<Name>dataType</Name>
<Scope></Scope>
<Type>PropertyLet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Property Let dataType(ByVal dType As String)</Declaration>
<Parameters>
<Parameter>
<Name>dType</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>LastCell</Name>
<Scope></Scope>
<Type>PropertyGet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>25</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : LastCell</CommentLine>
<CommentLine> Descr.    : returns the last used cell in the headcolumn used range with column depth</CommentLine>
<CommentLine>   equal to the max depth of the worksheet used range</CommentLine>
<CommentLine>   Used later to set the column depth of the AfterHead range we use Worksheet.</CommentLine>
<CommentLine>   We adjust the depth of the HeadClumn beacuase we want all headcolumns with the</CommentLine>
<CommentLine>   same worksheet to have the same depth</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
<Declaration>Property Get LastCell() As Range</Declaration>
<Parameters>
</Parameters>
<ReturnType>Range</ReturnType>
</Procedure>
<Procedure>
<Name>getLastCell</Name>
<Scope>Private</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>11</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Function getLastCell() As Range</Declaration>
<Parameters>
</Parameters>
<ReturnType>Range</ReturnType>
</Procedure>
<Procedure>
<Name>Headers</Name>
<Scope></Scope>
<Type>PropertyGet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Property Get Headers() As Variant</Declaration>
<Parameters>
</Parameters>
<ReturnType>Variant</ReturnType>
</Procedure>
<Procedure>
<Name>AddHeaders</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub AddHeaders(HeadTitles As Variant)</Declaration>
<Parameters>
<Parameter>
<Name>HeadTitles</Name>
<Type>Variant</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>appendTitles</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>19</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub appendTitles(HeadTitles As Variant)</Declaration>
<Parameters>
<Parameter>
<Name>HeadTitles</Name>
<Type>Variant</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>Find</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>9</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : Find</CommentLine>
<CommentLine> Descr.    : searches in the headcolumn range for the provided parameter</CommentLine>
<CommentLine>   returns the found range or nothing if not found</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
<Declaration>Public Function Find(ByVal searchValue As Variant) As Range</Declaration>
<Parameters>
<Parameter>
<Name>searchValue</Name>
<Type>Variant</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Range</ReturnType>
</Procedure>
<Procedure>
<Name>FindAll</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>10</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function FindAll(ByVal searchValue As Variant) As Collection</Declaration>
<Parameters>
<Parameter>
<Name>searchValue</Name>
<Type>Variant</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Collection</ReturnType>
</Procedure>
<Procedure>
<Name>findFirst</Name>
<Scope>Private</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>4</CountOfDeclarationLines>
<CountOfLines>40</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : findFirst</CommentLine>
<CommentLine> Descr.    : returns the full range (also merged area) of the first match of string</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
<Declaration>Private Function findFirst( ByVal searchValue As Variant, Optional ByRef HeadSearchRange As Range ) As Range</Declaration>
<Parameters>
<Parameter>
<Name>searchValue</Name>
<Type>Variant</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>HeadSearchRange</Name>
<Type>Range</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Range</ReturnType>
</Procedure>
<Procedure>
<Name>SetSearchOptions</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>8</CountOfDeclarationLines>
<CountOfLines>18</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub SetSearchOptions( Optional LookAt As XlLookAt = xlWhole, Optional LookIn As XlFindLookIn = xlValues, Optional SearchOrder As XlSearchOrder = xlByRows, Optional SearchDirection As XlSearchDirection = xlNext, Optional MatchCase As Boolean = False, Optional SearchFormat As Boolean = False )</Declaration>
<Parameters>
<Parameter>
<Name>LookAt</Name>
<Type>XlLookAt</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>xlWhole</DefaultValue>
</Parameter>
<Parameter>
<Name>LookIn</Name>
<Type>XlFindLookIn</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>xlValues</DefaultValue>
</Parameter>
<Parameter>
<Name>SearchOrder</Name>
<Type>XlSearchOrder</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>xlByRows</DefaultValue>
</Parameter>
<Parameter>
<Name>SearchDirection</Name>
<Type>XlSearchDirection</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>xlNext</DefaultValue>
</Parameter>
<Parameter>
<Name>MatchCase</Name>
<Type>Boolean</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>False</DefaultValue>
</Parameter>
<Parameter>
<Name>SearchFormat</Name>
<Type>Boolean</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>False</DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>Sort</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>6</CountOfDeclarationLines>
<CountOfLines>40</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub Sort( Optional ByVal order As XlSortOrder = xlAscending, Optional ByVal Header As XlYesNoGuess = xlYes, Optional ByVal expandToUsedRange As Boolean = True, Optional ByRef tableStartRange As Range )</Declaration>
<Parameters>
<Parameter>
<Name>order</Name>
<Type>XlSortOrder</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>xlAscending</DefaultValue>
</Parameter>
<Parameter>
<Name>Header</Name>
<Type>XlYesNoGuess</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>xlYes</DefaultValue>
</Parameter>
<Parameter>
<Name>expandToUsedRange</Name>
<Type>Boolean</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>True</DefaultValue>
</Parameter>
<Parameter>
<Name>tableStartRange</Name>
<Type>Range</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>Filter</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>7</CountOfDeclarationLines>
<CountOfLines>39</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : Filter</CommentLine>
<CommentLine> Descr.    : up to 2 criteria for filtering a HeadColumn range</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
<Declaration>Public Sub Filter( Optional ByVal Criteria1 As Variant = Null, Optional Operator As XlAutoFilterOperator = XlAutoFilterOperator.xlAnd, Optional ByVal Criteria2 As Variant = Null, Optional VisibleDropDown As Boolean = False, Optional ByRef tableStartRange As Range )</Declaration>
<Parameters>
<Parameter>
<Name>Criteria1</Name>
<Type>Variant</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>Null</DefaultValue>
</Parameter>
<Parameter>
<Name>Operator</Name>
<Type>XlAutoFilterOperator</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>XlAutoFilterOperator.xlAnd</DefaultValue>
</Parameter>
<Parameter>
<Name>Criteria2</Name>
<Type>Variant</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>Null</DefaultValue>
</Parameter>
<Parameter>
<Name>VisibleDropDown</Name>
<Type>Boolean</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>False</DefaultValue>
</Parameter>
<Parameter>
<Name>tableStartRange</Name>
<Type>Range</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>ReCalc</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>5</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub ReCalc()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>GetRangeOfUniqueValues</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>3</CountOfDeclarationLines>
<CountOfLines>44</CountOfLines>
<CommentLines>
<CommentLine>TODO FIx bug when the column is part of a list and the result ends up in the same list</CommentLine>
<CommentLine> will not input only unique values</CommentLine>
<CommentLine> fix name to a more descriptive one like ..InRange</CommentLine>
</CommentLines>
<Declaration>Public Function GetRangeOfUniqueValues( Optional ByRef insertAfter As Range ) As Range</Declaration>
<Parameters>
<Parameter>
<Name>insertAfter</Name>
<Type>Range</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Range</ReturnType>
</Procedure>
<Procedure>
<Name>GetUniqueValues</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>52</CountOfLines>
<CommentLines>
<CommentLine>TODO just use util.arrays</CommentLine>
</CommentLines>
<Declaration>Public Function GetUniqueValues() As Variant</Declaration>
<Parameters>
</Parameters>
<ReturnType>Variant</ReturnType>
</Procedure>
</Procedures>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Class     : HeadColumn</CommentLine>
<CommentLine> Author    : Ivanov, Bozhan</CommentLine>
<CommentLine> Descr.    : Represents a range of a whole column and a seperate range for the</CommentLine>
<CommentLine>             column header</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
</CodeModule>
</File>
<File>
<Name>HeadColumnDict</Name>
<FileName></FileName>
<PathFileName></PathFileName>
<Type>ClassModule</Type>
<Properties>
<Property>
<Name>Name</Name>
<Value>HeadColumnDict</Value>
</Property>
<Property>
<Name>Instancing</Name>
<Value>1</Value>
</Property>
</Properties>
<CodeModule>
<CountOfDeclarationLines>17</CountOfDeclarationLines>
<CountOfLines>395</CountOfLines>
<Interfaces>
</Interfaces>
<Events>
</Events>
<Procedures>
<Procedure>
<Name>Class_Initialize</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>5</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub Class_Initialize()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>Class_Terminate</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>5</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub Class_Terminate()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>Init</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>36</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
<Declaration>Public Sub Init(ByRef initArray As Variant)</Declaration>
<Parameters>
<Parameter>
<Name>initArray</Name>
<Type>Variant</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>InitArrayIsConsistent</Name>
<Scope>Private</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>69</CountOfLines>
<CommentLines>
<CommentLine>Public Sub Init_withHeadColumnDictType(ByRef InitCol As Collection)</CommentLine>
<CommentLine>Dim hcto As InitHeadColumnDictType</CommentLine>
<CommentLine></CommentLine>
<CommentLine>  For Each hcto In InitCol</CommentLine>
<CommentLine>    If TypeOf hcto Is InitHeadColumnDictType Then</CommentLine>
<CommentLine></CommentLine>
<CommentLine>      addHeadColumn hcto.Alias</CommentLine>
<CommentLine></CommentLine>
<CommentLine>      Dim domain As Range</CommentLine>
<CommentLine>      If TypeOf hcto.domain Is Excel.Worksheet Then</CommentLine>
<CommentLine>        Set domain = hcto.domain.UsedRange</CommentLine>
<CommentLine>      ElseIf TypeOf hcto.domain Is Excel.ListObject Then</CommentLine>
<CommentLine>        Set domain = hcto.domain.Range</CommentLine>
<CommentLine>      ElseIf TypeOf hcto.domain Is Excel.Range Then</CommentLine>
<CommentLine>        Set domain = hcto.domain</CommentLine>
<CommentLine>      Else</CommentLine>
<CommentLine>        Set domain = Nothing</CommentLine>
<CommentLine>      End If</CommentLine>
<CommentLine></CommentLine>
<CommentLine>      Me.HeadColumn(hcto.Alias).init domain:=domain, headTitles:=hcto.Headers</CommentLine>
<CommentLine>      If Not IsEmpty(hcto.DataFormat) Then</CommentLine>
<CommentLine>        Me.HeadColumn(hcto.Alias).DataFormat = hcto.DataFormat</CommentLine>
<CommentLine>      End If</CommentLine>
<CommentLine></CommentLine>
<CommentLine>    End If</CommentLine>
<CommentLine>  Next hcto</CommentLine>
<CommentLine>End Sub</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : InitArrayIsConsistent</CommentLine>
<CommentLine> Descr.    : Checks if the input is in the following format</CommentLine>
<CommentLine>   Array(Variant) and more specific</CommentLine>
<CommentLine>   Array(Array(String, Array(String)),</CommentLine>
<CommentLine>         Array(String, Array(String)))</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
<Declaration>Private Function InitArrayIsConsistent(initArray As Variant) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>initArray</Name>
<Type>Variant</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>InitArrayElementIsConsistant</Name>
<Scope>Private</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>39</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : InitArrayElementIsConsistant</CommentLine>
<CommentLine> Descr.    : checks if the input is in the following format</CommentLine>
<CommentLine>   Array(Variant) and more specific</CommentLine>
<CommentLine>   Array(String, Array(String))</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
<Declaration>Private Function InitArrayElementIsConsistant(initArrayElement As Variant) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>initArrayElement</Name>
<Type>Variant</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>HeadColumn</Name>
<Scope></Scope>
<Type>PropertyGet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Property Get HeadColumn(ByVal alias As Variant) As HeadColumn</Declaration>
<Parameters>
<Parameter>
<Name>alias</Name>
<Type>Variant</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>HeadColumn</ReturnType>
</Procedure>
<Procedure>
<Name>HeadColumns</Name>
<Scope></Scope>
<Type>PropertyGet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Property Get HeadColumns() As Collection</Declaration>
<Parameters>
</Parameters>
<ReturnType>Collection</ReturnType>
</Procedure>
<Procedure>
<Name>aliases</Name>
<Scope></Scope>
<Type>PropertyGet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Property Get aliases() As Collection</Declaration>
<Parameters>
</Parameters>
<ReturnType>Collection</ReturnType>
</Procedure>
<Procedure>
<Name>SetHeadColumnAliases</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub SetHeadColumnAliases(ByRef aliases As Variant)</Declaration>
<Parameters>
<Parameter>
<Name>aliases</Name>
<Type>Variant</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>AppendHeadColumnAliases</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub AppendHeadColumnAliases(ByRef aliases As Variant)</Declaration>
<Parameters>
<Parameter>
<Name>aliases</Name>
<Type>Variant</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>appendAliases</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>35</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub appendAliases(aliases As Variant)</Declaration>
<Parameters>
<Parameter>
<Name>aliases</Name>
<Type>Variant</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>count</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function count() As Long</Declaration>
<Parameters>
</Parameters>
<ReturnType>Long</ReturnType>
</Procedure>
<Procedure>
<Name>Remove</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>5</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub Remove(ByVal alias As Variant)</Declaration>
<Parameters>
<Parameter>
<Name>alias</Name>
<Type>Variant</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>Clear</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>5</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub Clear()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>IsEveryHeadFound</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>13</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function IsEveryHeadFound() As Boolean</Declaration>
<Parameters>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>GetTitlesOfHeadsNotFound</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>18</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function GetTitlesOfHeadsNotFound() As Variant</Declaration>
<Parameters>
</Parameters>
<ReturnType>Variant</ReturnType>
</Procedure>
<Procedure>
<Name>GetTitlesOfHeadsFound</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>17</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function GetTitlesOfHeadsFound() As Variant</Declaration>
<Parameters>
</Parameters>
<ReturnType>Variant</ReturnType>
</Procedure>
<Procedure>
<Name>FindMatchingWorksheet</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>3</CountOfDeclarationLines>
<CountOfLines>11</CountOfLines>
<CommentLines>
<CommentLine> TODO:</CommentLine>
<CommentLine> Impl FindMatchingWorksheet(ParamArray ANDCond() as Variant, ParamArray ORCond() as Variant)</CommentLine>
<CommentLine>   supple a string with condition: A AND B OR C</CommentLine>
<CommentLine>TODO impl a find appropriate worksheet function by testing HCAliases</CommentLine>
</CommentLines>
<Declaration>Public Function FindMatchingWorksheet( ParamArray containingStrings() As Variant ) As Worksheet</Declaration>
<Parameters>
<Parameter>
<Name>containingStrings()</Name>
<Type>Variant</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>True</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Worksheet</ReturnType>
</Procedure>
<Procedure>
<Name>GetMaxUsedRowsFromAllHeaderFound</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>14</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function GetMaxUsedRowsFromAllHeaderFound() As Long</Declaration>
<Parameters>
</Parameters>
<ReturnType>Long</ReturnType>
</Procedure>
<Procedure>
<Name>GetMinStartRowFromAllHeaderFound</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>14</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function GetMinStartRowFromAllHeaderFound() As Long</Declaration>
<Parameters>
</Parameters>
<ReturnType>Long</ReturnType>
</Procedure>
<Procedure>
<Name>GetFirstFound</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>13</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function GetFirstFound() As HeadColumn</Declaration>
<Parameters>
</Parameters>
<ReturnType>HeadColumn</ReturnType>
</Procedure>
<Procedure>
<Name>HeadersConsistant</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>35</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function HeadersConsistant() As Boolean</Declaration>
<Parameters>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>addHeadColumn</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>5</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub addHeadColumn(ByVal alias As Variant)</Declaration>
<Parameters>
<Parameter>
<Name>alias</Name>
<Type>Variant</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>ReCalc</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>7</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub ReCalc()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
</Procedures>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Class     : HeadColumnDict</CommentLine>
<CommentLine> Author    : Ivanov, Bozhan</CommentLine>
<CommentLine> Descr.    : Extends Collection. Represents a collecion of HeadColumn objects</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Example:</CommentLine>
<CommentLine> Set c = New HeadColumnDict</CommentLine>
<CommentLine> c.setHeadColumnAliases &quot;c1&quot;, &quot;c2&quot;, &quot;c3&quot;, &quot;c4&quot;</CommentLine>
<CommentLine> c.HeadColumn(&quot;c1&quot;).Init ThisWorkbook.Worksheets(1), &quot;Title1&quot;, &quot;Title2&quot;, ...</CommentLine>
<CommentLine> c.HeadColumn(&quot;c1&quot;).InitWithArr ThisWorkbook.Worksheets(1), AliasesArray</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine></CommentLine>
<CommentLine>TODO exapnd all HC ranges to same columnd depth</CommentLine>
</CommentLines>
</CodeModule>
</File>
<File>
<Name>UtilTimer</Name>
<FileName></FileName>
<PathFileName></PathFileName>
<Type>ClassModule</Type>
<Properties>
<Property>
<Name>Name</Name>
<Value>UtilTimer</Value>
</Property>
<Property>
<Name>Instancing</Name>
<Value>1</Value>
</Property>
</Properties>
<CodeModule>
<CountOfDeclarationLines>24</CountOfDeclarationLines>
<CountOfLines>70</CountOfLines>
<Interfaces>
</Interfaces>
<Events>
</Events>
<Procedures>
<Procedure>
<Name>LI2Double</Name>
<Scope>Private</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>7</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Function LI2Double(LI As LARGE_INTEGER) As Double</Declaration>
<Parameters>
<Parameter>
<Name>LI</Name>
<Type>LARGE_INTEGER</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Double</ReturnType>
</Procedure>
<Procedure>
<Name>StartCounter</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>7</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub StartCounter()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>ElapsedTime</Name>
<Scope></Scope>
<Type>PropertyGet</Type>
<CountOfDeclarationLines>4</CountOfDeclarationLines>
<CountOfLines>21</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : ElapsedTime</CommentLine>
<CommentLine> Descr.    : returns elapsed time in miliseconds</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
<Declaration>Property Get ElapsedTime( Optional ByVal timeMagnitude As MagnitudeOrder = MagnitudeOrder.milli, Optional ByVal roundTo As Long = 10 ) As Double</Declaration>
<Parameters>
<Parameter>
<Name>timeMagnitude</Name>
<Type>MagnitudeOrder</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>MagnitudeOrder.milli</DefaultValue>
</Parameter>
<Parameter>
<Name>roundTo</Name>
<Type>Long</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>10</DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Double</ReturnType>
</Procedure>
<Procedure>
<Name>StartTime</Name>
<Scope></Scope>
<Type>PropertyGet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Property Get StartTime() As Double</Declaration>
<Parameters>
</Parameters>
<ReturnType>Double</ReturnType>
</Procedure>
<Procedure>
<Name>StopWatch</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>5</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function StopWatch() As Double</Declaration>
<Parameters>
</Parameters>
<ReturnType>Double</ReturnType>
</Procedure>
</Procedures>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Module    : PerformanceTimer</CommentLine>
<CommentLine> Author    : Ivanov, Bozhan</CommentLine>
<CommentLine> Purpose   :</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
</CodeModule>
</File>
<File>
<Name>ProgressBarController</Name>
<FileName></FileName>
<PathFileName></PathFileName>
<Type>ClassModule</Type>
<Properties>
<Property>
<Name>Name</Name>
<Value>ProgressBarController</Value>
</Property>
<Property>
<Name>Instancing</Name>
<Value>1</Value>
</Property>
</Properties>
<CodeModule>
<CountOfDeclarationLines>10</CountOfDeclarationLines>
<CountOfLines>216</CountOfLines>
<Interfaces>
</Interfaces>
<Events>
</Events>
<Procedures>
<Procedure>
<Name>Class_Initialize</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>24</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub Class_Initialize()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>setControlGeoAndCaption</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>8</CountOfDeclarationLines>
<CountOfLines>21</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub setControlGeoAndCaption( ByRef crl As Object, ByVal Top As Single, ByVal Height As Single, ByVal Left As Single, ByVal Width As Single, Optional ByVal Caption As String = vbNullString )</Declaration>
<Parameters>
<Parameter>
<Name>crl</Name>
<Type>Object</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Top</Name>
<Type>Single</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Height</Name>
<Type>Single</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Left</Name>
<Type>Single</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Width</Name>
<Type>Single</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Caption</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>vbNullString</DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>Class_Terminate</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub Class_Terminate()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>IsCancelable</Name>
<Scope>Public</Scope>
<Type>PropertyGet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Property Get IsCancelable() As Boolean</Declaration>
<Parameters>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>IsCancelable</Name>
<Scope>Public</Scope>
<Type>PropertyLet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>9</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Property Let IsCancelable(ByVal value As Boolean)</Declaration>
<Parameters>
<Parameter>
<Name>value</Name>
<Type>Boolean</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>ShowCancelControl</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>8</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub ShowCancelControl()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>Form</Name>
<Scope>Public</Scope>
<Type>PropertyGet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Property Get Form() As frmProgressBar</Declaration>
<Parameters>
</Parameters>
<ReturnType>frmProgressBar</ReturnType>
</Procedure>
<Procedure>
<Name>Caption</Name>
<Scope>Public</Scope>
<Type>PropertyGet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Property Get Caption() As Variant</Declaration>
<Parameters>
</Parameters>
<ReturnType>Variant</ReturnType>
</Procedure>
<Procedure>
<Name>Caption</Name>
<Scope>Public</Scope>
<Type>PropertyLet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Property Let Caption(ByVal value As Variant)</Declaration>
<Parameters>
<Parameter>
<Name>value</Name>
<Type>Variant</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>ProgressMax</Name>
<Scope>Public</Scope>
<Type>PropertyGet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Property Get ProgressMax() As Single</Declaration>
<Parameters>
</Parameters>
<ReturnType>Single</ReturnType>
</Procedure>
<Procedure>
<Name>ProgressLeft</Name>
<Scope>Public</Scope>
<Type>PropertyGet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Property Get ProgressLeft() As Single</Declaration>
<Parameters>
</Parameters>
<ReturnType>Single</ReturnType>
</Procedure>
<Procedure>
<Name>Progress</Name>
<Scope>Public</Scope>
<Type>PropertyGet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Property Get Progress() As Single</Declaration>
<Parameters>
</Parameters>
<ReturnType>Single</ReturnType>
</Procedure>
<Procedure>
<Name>Progress</Name>
<Scope>Public</Scope>
<Type>PropertyLet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>18</CountOfLines>
<CommentLines>
<CommentLine>TODO set progress to the value not incrementally incerasing with the value</CommentLine>
<CommentLine>impl another sub that will increaseprogress</CommentLine>
</CommentLines>
<Declaration>Public Property Let Progress(ByVal value As Single)</Declaration>
<Parameters>
<Parameter>
<Name>value</Name>
<Type>Single</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>TextProgress</Name>
<Scope>Public</Scope>
<Type>PropertyGet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Property Get TextProgress() As Variant</Declaration>
<Parameters>
</Parameters>
<ReturnType>Variant</ReturnType>
</Procedure>
<Procedure>
<Name>TextProgress</Name>
<Scope>Public</Scope>
<Type>PropertyLet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>5</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Property Let TextProgress(ByVal value As Variant)</Declaration>
<Parameters>
<Parameter>
<Name>value</Name>
<Type>Variant</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>TextResult</Name>
<Scope>Public</Scope>
<Type>PropertyGet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Property Get TextResult() As Variant</Declaration>
<Parameters>
</Parameters>
<ReturnType>Variant</ReturnType>
</Procedure>
<Procedure>
<Name>TextResult</Name>
<Scope>Public</Scope>
<Type>PropertyLet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Property Let TextResult(ByVal value As Variant)</Declaration>
<Parameters>
<Parameter>
<Name>value</Name>
<Type>Variant</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>OkButton</Name>
<Scope>Public</Scope>
<Type>PropertyGet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Property Get OkButton() As Control</Declaration>
<Parameters>
</Parameters>
<ReturnType>Control</ReturnType>
</Procedure>
<Procedure>
<Name>CancelButton</Name>
<Scope>Public</Scope>
<Type>PropertyGet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Property Get CancelButton() As Control</Declaration>
<Parameters>
</Parameters>
<ReturnType>Control</ReturnType>
</Procedure>
<Procedure>
<Name>AlertIcon</Name>
<Scope>Public</Scope>
<Type>PropertyGet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Property Get AlertIcon() As Control</Declaration>
<Parameters>
</Parameters>
<ReturnType>Control</ReturnType>
</Procedure>
<Procedure>
<Name>SuccessIcon</Name>
<Scope>Public</Scope>
<Type>PropertyGet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Property Get SuccessIcon() As Control</Declaration>
<Parameters>
</Parameters>
<ReturnType>Control</ReturnType>
</Procedure>
<Procedure>
<Name>IsCanceled</Name>
<Scope>Public</Scope>
<Type>PropertyGet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Property Get IsCanceled() As Boolean</Declaration>
<Parameters>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>CloseForm</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub CloseForm()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>HideResultControls</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>10</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub HideResultControls()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>ShowResultControls</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>15</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub ShowResultControls()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>IncreseByPercent</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub IncreseByPercent(Optional ByVal value As Integer = 1)</Declaration>
<Parameters>
<Parameter>
<Name>value</Name>
<Type>Integer</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>1</DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>Show</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>17</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub Show(Optional ByVal Modal As Boolean = False)</Declaration>
<Parameters>
<Parameter>
<Name>Modal</Name>
<Type>Boolean</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>False</DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>Hide</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub Hide()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
</Procedures>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Module    :</CommentLine>
<CommentLine> Author    : Ivanov, Bozhan</CommentLine>
<CommentLine> Purpose   :</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
</CodeModule>
</File>
<File>
<Name>UtilRegEx</Name>
<FileName></FileName>
<PathFileName></PathFileName>
<Type>ClassModule</Type>
<Properties>
<Property>
<Name>Name</Name>
<Value>UtilRegEx</Value>
</Property>
<Property>
<Name>Instancing</Name>
<Value>1</Value>
</Property>
</Properties>
<CodeModule>
<CountOfDeclarationLines>6</CountOfDeclarationLines>
<CountOfLines>55</CountOfLines>
<Interfaces>
</Interfaces>
<Events>
</Events>
<Procedures>
<Procedure>
<Name>Replace</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>7</CountOfDeclarationLines>
<CountOfLines>16</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function Replace( ByVal pattern As String, ByVal searchValue As String, ByVal ReplaceValue As String, Optional ByVal IsGlobal As Boolean = True, Optional ByVal IsCaseSensitive As Boolean = True ) As String</Declaration>
<Parameters>
<Parameter>
<Name>pattern</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>searchValue</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>ReplaceValue</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>IsGlobal</Name>
<Type>Boolean</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>True</DefaultValue>
</Parameter>
<Parameter>
<Name>IsCaseSensitive</Name>
<Type>Boolean</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>True</DefaultValue>
</Parameter>
</Parameters>
<ReturnType>String</ReturnType>
</Procedure>
<Procedure>
<Name>match</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>6</CountOfDeclarationLines>
<CountOfLines>31</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function match( ByVal pattern As String, ByVal queryString As String, Optional ByVal IsGlobal As Boolean = True, Optional ByVal IsCaseSensitive As Boolean = True ) As Variant</Declaration>
<Parameters>
<Parameter>
<Name>pattern</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>queryString</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>IsGlobal</Name>
<Type>Boolean</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>True</DefaultValue>
</Parameter>
<Parameter>
<Name>IsCaseSensitive</Name>
<Type>Boolean</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>True</DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Variant</ReturnType>
</Procedure>
</Procedures>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Module    : RegEx</CommentLine>
<CommentLine> Author    : Ivanov, Bozhan</CommentLine>
<CommentLine> Purpose   :</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
</CodeModule>
</File>
<File>
<Name>UtilExcel</Name>
<FileName></FileName>
<PathFileName></PathFileName>
<Type>ClassModule</Type>
<Properties>
<Property>
<Name>Name</Name>
<Value>UtilExcel</Value>
</Property>
<Property>
<Name>Instancing</Name>
<Value>1</Value>
</Property>
</Properties>
<CodeModule>
<CountOfDeclarationLines>62</CountOfDeclarationLines>
<CountOfLines>2111</CountOfLines>
<Interfaces>
</Interfaces>
<Events>
</Events>
<Procedures>
<Procedure>
<Name>Class_Initialize</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>13</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub Class_Initialize()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>getRibbon</Name>
<Scope>Private</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>7</CountOfLines>
<CommentLines>
<CommentLine>aqcuire the ribbon pointer on ribbon load</CommentLine>
</CommentLines>
<Declaration>Private Function getRibbon(ByRef RibbonPointer As Long) As IRibbonUI</Declaration>
<Parameters>
<Parameter>
<Name>RibbonPointer</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>IRibbonUI</ReturnType>
</Procedure>
<Procedure>
<Name>CreateWorkbook</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>6</CountOfDeclarationLines>
<CountOfLines>31</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function CreateWorkbook( ByRef app As Excel.Application, ByVal path As String, Optional ByVal title As String = vbNullString, Optional ByVal Subject As String = vbNullString ) As Workbook</Declaration>
<Parameters>
<Parameter>
<Name>app</Name>
<Type>Excel.Application</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>path</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>title</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>vbNullString</DefaultValue>
</Parameter>
<Parameter>
<Name>Subject</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>vbNullString</DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Workbook</ReturnType>
</Procedure>
<Procedure>
<Name>GetHiddenColumnsIndeces</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>4</CountOfDeclarationLines>
<CountOfLines>42</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : GetHiddenColumnsIndeces</CommentLine>
<CommentLine> Descr.    : Returns an array of all hidden columns in the given worksheet</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
<Declaration>Public Function GetHiddenColumnsIndeces( ByRef WS As Worksheet, Optional ByRef SearchRange As Range ) As Variant</Declaration>
<Parameters>
<Parameter>
<Name>WS</Name>
<Type>Worksheet</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>SearchRange</Name>
<Type>Range</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Variant</ReturnType>
</Procedure>
<Procedure>
<Name>GetHiddenRowsIndeces</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>4</CountOfDeclarationLines>
<CountOfLines>42</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : GetHiddenRowsIndeces</CommentLine>
<CommentLine> Descr.    : Returns an array of all hidden rows in the given worksheet</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
<Declaration>Public Function GetHiddenRowsIndeces( ByRef WS As Worksheet, Optional ByRef SearchRange As Range ) As Variant</Declaration>
<Parameters>
<Parameter>
<Name>WS</Name>
<Type>Worksheet</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>SearchRange</Name>
<Type>Range</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Variant</ReturnType>
</Procedure>
<Procedure>
<Name>GetGroupedColumnsIndeces</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>4</CountOfDeclarationLines>
<CountOfLines>31</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : GetGroupedColumnsIndeces</CommentLine>
<CommentLine> Descr.    : Returns the indeces of columns which have an outline level &gt; 1</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
<Declaration>Public Function GetGroupedColumnsIndeces( ByRef WS As Worksheet, Optional ByRef SearchRange As Range ) As Variant</Declaration>
<Parameters>
<Parameter>
<Name>WS</Name>
<Type>Worksheet</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>SearchRange</Name>
<Type>Range</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Variant</ReturnType>
</Procedure>
<Procedure>
<Name>GetGroupedRowsIndeces</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>4</CountOfDeclarationLines>
<CountOfLines>31</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : GetGroupedRowsIndeces</CommentLine>
<CommentLine> Descr.    : Returns the indeces of rows which have an outline level &gt; 1</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
<Declaration>Public Function GetGroupedRowsIndeces( ByRef WS As Worksheet, Optional ByRef SearchRange As Range ) As Variant</Declaration>
<Parameters>
<Parameter>
<Name>WS</Name>
<Type>Worksheet</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>SearchRange</Name>
<Type>Range</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Variant</ReturnType>
</Procedure>
<Procedure>
<Name>HideColumnsWithIndeces</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>4</CountOfDeclarationLines>
<CountOfLines>23</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : HideColumnsWithIndeces</CommentLine>
<CommentLine> Descr.    : Hides columns in the refernced sheet with the given column indeces</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
<Declaration>Public Sub HideColumnsWithIndeces( ByRef WS As Worksheet, ByRef columnIndeces As Variant )</Declaration>
<Parameters>
<Parameter>
<Name>WS</Name>
<Type>Worksheet</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>columnIndeces</Name>
<Type>Variant</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>ShowColumnsWithIndeces</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>4</CountOfDeclarationLines>
<CountOfLines>23</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : ShowColumnsWithIndeces</CommentLine>
<CommentLine> Descr.    : Shows columns in the refernced sheet with the given column indeces</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
<Declaration>Public Sub ShowColumnsWithIndeces( ByRef WS As Worksheet, ByRef columnIndeces As Variant )</Declaration>
<Parameters>
<Parameter>
<Name>WS</Name>
<Type>Worksheet</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>columnIndeces</Name>
<Type>Variant</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>HideWorksheet</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>4</CountOfDeclarationLines>
<CountOfLines>11</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : HideWorksheet</CommentLine>
<CommentLine> Descr.    : Hides a worksheet by name in the provided workbook</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
<Declaration>Public Sub HideWorksheet( ByRef wb As Workbook, ByVal WorksheetName As String )</Declaration>
<Parameters>
<Parameter>
<Name>wb</Name>
<Type>Workbook</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>WorksheetName</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>HideWorksheets</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>4</CountOfDeclarationLines>
<CountOfLines>17</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure   : HideWorksheets</CommentLine>
<CommentLine> Description : Hides worksheets matching provided names</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
<Declaration>Public Sub HideWorksheets( ByRef wb As Workbook, ByVal worksheetNames As Variant )</Declaration>
<Parameters>
<Parameter>
<Name>wb</Name>
<Type>Workbook</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>worksheetNames</Name>
<Type>Variant</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>ShowWorksheet</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>4</CountOfDeclarationLines>
<CountOfLines>11</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : ShowWorksheet</CommentLine>
<CommentLine> Descr.    : Shows a worksheet by name in the provided workbook</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
<Declaration>Public Sub ShowWorksheet( ByRef wb As Workbook, ByVal WorksheetName As String )</Declaration>
<Parameters>
<Parameter>
<Name>wb</Name>
<Type>Workbook</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>WorksheetName</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>ShowWorksheets</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>4</CountOfDeclarationLines>
<CountOfLines>17</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure   : ShowWorksheets</CommentLine>
<CommentLine> Description : Shows worksheets matching provided names</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
<Declaration>Public Sub ShowWorksheets( ByRef wb As Workbook, ByVal worksheetNames As Variant )</Declaration>
<Parameters>
<Parameter>
<Name>wb</Name>
<Type>Workbook</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>worksheetNames</Name>
<Type>Variant</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>IsWorksheetVisible</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>4</CountOfDeclarationLines>
<CountOfLines>7</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function IsWorksheetVisible( ByRef wb As Workbook, ByRef WorksheetName As String ) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>wb</Name>
<Type>Workbook</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>WorksheetName</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>HideRowsWithIndeces</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>4</CountOfDeclarationLines>
<CountOfLines>23</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : HideRowsWithIndeces</CommentLine>
<CommentLine> Descr.    : Hides rows in the refernced sheet with the given row indeces</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
<Declaration>Public Sub HideRowsWithIndeces( ByRef SearchWorksheet As Worksheet, ByRef RowIndeces As Variant )</Declaration>
<Parameters>
<Parameter>
<Name>SearchWorksheet</Name>
<Type>Worksheet</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>RowIndeces</Name>
<Type>Variant</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>ShowRowsWithIndeces</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>4</CountOfDeclarationLines>
<CountOfLines>23</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : ShowRowsWithIndeces</CommentLine>
<CommentLine> Descr.    : Shows rows in the refernced sheet with the given row indeces</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
<Declaration>Public Sub ShowRowsWithIndeces( ByRef SearchWorksheet As Worksheet, ByRef RowIndeces As Variant )</Declaration>
<Parameters>
<Parameter>
<Name>SearchWorksheet</Name>
<Type>Worksheet</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>RowIndeces</Name>
<Type>Variant</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>GetVisibleComments</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>3</CountOfDeclarationLines>
<CountOfLines>15</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure   : GetVisibleComments</CommentLine>
<CommentLine> Description : Returns all visible comments in provided worksheet</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
<Declaration>Public Function GetVisibleComments( ByRef xlWorksheet As Worksheet ) As Collection</Declaration>
<Parameters>
<Parameter>
<Name>xlWorksheet</Name>
<Type>Worksheet</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Collection</ReturnType>
</Procedure>
<Procedure>
<Name>GetHiddenComments</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>3</CountOfDeclarationLines>
<CountOfLines>15</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure   : GetHiddenComments</CommentLine>
<CommentLine> Description : Returns all hidden comments in provided worksheet</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
<Declaration>Public Function GetHiddenComments( ByRef xlWorksheet As Worksheet ) As Collection</Declaration>
<Parameters>
<Parameter>
<Name>xlWorksheet</Name>
<Type>Worksheet</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Collection</ReturnType>
</Procedure>
<Procedure>
<Name>ShowComments</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>3</CountOfDeclarationLines>
<CountOfLines>13</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure   : ShowComments</CommentLine>
<CommentLine> Description : Sets provided comments in collection to visible</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
<Declaration>Public Sub ShowComments( ByRef CommentsCollection As Collection )</Declaration>
<Parameters>
<Parameter>
<Name>CommentsCollection</Name>
<Type>Collection</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>HideComments</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>3</CountOfDeclarationLines>
<CountOfLines>13</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure   : HideComments</CommentLine>
<CommentLine> Description : Sets provided comments in collection to not visible</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
<Declaration>Public Sub HideComments( ByRef CommentsCollection As Collection )</Declaration>
<Parameters>
<Parameter>
<Name>CommentsCollection</Name>
<Type>Collection</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>GetLastColumnWithData</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>4</CountOfDeclarationLines>
<CountOfLines>66</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : GetLastColumnWithData</CommentLine>
<CommentLine> Descr.    : returns a range of the last column where data was found</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
<Declaration>Public Function GetLastColumnWithData( ByRef SearchWorksheet As Worksheet, Optional ByRef SearchRange As Range ) As Range</Declaration>
<Parameters>
<Parameter>
<Name>SearchWorksheet</Name>
<Type>Worksheet</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>SearchRange</Name>
<Type>Range</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Range</ReturnType>
</Procedure>
<Procedure>
<Name>GetLastRowWithData</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>4</CountOfDeclarationLines>
<CountOfLines>64</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : GetLastRowWithData</CommentLine>
<CommentLine> Descr.    : returns a range of the last row where data was found</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
<Declaration>Public Function GetLastRowWithData( ByRef SearchWorksheet As Worksheet, Optional ByRef SearchRange As Range ) As Range</Declaration>
<Parameters>
<Parameter>
<Name>SearchWorksheet</Name>
<Type>Worksheet</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>SearchRange</Name>
<Type>Range</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Range</ReturnType>
</Procedure>
<Procedure>
<Name>getUsedRange</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>4</CountOfDeclarationLines>
<CountOfLines>48</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : GetUsedRange</CommentLine>
<CommentLine> Descr.    : returns the working range for the supplied worksheet</CommentLine>
<CommentLine> Examples  : wu.GetUsedRange(Worksheet, rng) - the range from rng to max row and col</CommentLine>
<CommentLine>   wu.GetUsedRange(Worksheet, Worksheet.Rows(rng.Row)) - range from A(rng.row) to max row col</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
<Declaration>Public Function getUsedRange( ByRef WS As Worksheet, Optional ByRef fromStartRange As Range ) As Range</Declaration>
<Parameters>
<Parameter>
<Name>WS</Name>
<Type>Worksheet</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>fromStartRange</Name>
<Type>Range</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Range</ReturnType>
</Procedure>
<Procedure>
<Name>SortWorksheetByRange</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>7</CountOfDeclarationLines>
<CountOfLines>17</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub SortWorksheetByRange( ByRef WS As Worksheet, ByRef key As Range, Optional ByRef tableStartRange As Range, Optional ByVal order As XlSortOrder = xlAscending, Optional ByVal Header As XlYesNoGuess = xlYes )</Declaration>
<Parameters>
<Parameter>
<Name>WS</Name>
<Type>Worksheet</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>key</Name>
<Type>Range</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>tableStartRange</Name>
<Type>Range</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>order</Name>
<Type>XlSortOrder</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>xlAscending</DefaultValue>
</Parameter>
<Parameter>
<Name>Header</Name>
<Type>XlYesNoGuess</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>xlYes</DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>SortRange</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>5</CountOfDeclarationLines>
<CountOfLines>11</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub SortRange( ByRef rngToSort As Range, Optional ByVal order As XlSortOrder = xlAscending, Optional ByVal Header As XlYesNoGuess = xlYes )</Declaration>
<Parameters>
<Parameter>
<Name>rngToSort</Name>
<Type>Range</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>order</Name>
<Type>XlSortOrder</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>xlAscending</DefaultValue>
</Parameter>
<Parameter>
<Name>Header</Name>
<Type>XlYesNoGuess</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>xlYes</DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>FilterWorksheetToCriteriaOnRange</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>9</CountOfDeclarationLines>
<CountOfLines>36</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : FilterWorksheetToCriteriaOnRange</CommentLine>
<CommentLine> Descr.    :</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
<Declaration>Public Sub FilterWorksheetToCriteriaOnRange( ByRef WS As Worksheet, ByVal fieldNum As Long, Optional ByVal Criteria1 As Variant = Null, Optional ByRef tableStartRange As Range, Optional op As XlAutoFilterOperator = XlAutoFilterOperator.xlAnd, Optional Criteria2 As Variant = Null, Optional VisibleDropDown As Boolean = False )</Declaration>
<Parameters>
<Parameter>
<Name>WS</Name>
<Type>Worksheet</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>fieldNum</Name>
<Type>Long</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Criteria1</Name>
<Type>Variant</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>Null</DefaultValue>
</Parameter>
<Parameter>
<Name>tableStartRange</Name>
<Type>Range</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>op</Name>
<Type>XlAutoFilterOperator</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>XlAutoFilterOperator.xlAnd</DefaultValue>
</Parameter>
<Parameter>
<Name>Criteria2</Name>
<Type>Variant</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>Null</DefaultValue>
</Parameter>
<Parameter>
<Name>VisibleDropDown</Name>
<Type>Boolean</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>False</DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>GetWorksheetsByName</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>4</CountOfDeclarationLines>
<CountOfLines>21</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure   : GetWorksheetsByName</CommentLine>
<CommentLine> Description : returns all worksheets in the provided workbook that match the given</CommentLine>
<CommentLine>   name(s). Parameter names can be a string or an array of strings</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
<Declaration>Public Function GetWorksheetsByName( ByRef wb As Workbook, ByVal names As Variant ) As Collection</Declaration>
<Parameters>
<Parameter>
<Name>wb</Name>
<Type>Workbook</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>names</Name>
<Type>Variant</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Collection</ReturnType>
</Procedure>
<Procedure>
<Name>GetWorksheetNames</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>3</CountOfDeclarationLines>
<CountOfLines>18</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : GetWorksheetNames</CommentLine>
<CommentLine> Descr.    : returns an array of strings - the names of all available worksheets in</CommentLine>
<CommentLine>             a supplied workbook.</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
<Declaration>Public Function GetWorksheetNames( ByRef wb As Workbook ) As Variant</Declaration>
<Parameters>
<Parameter>
<Name>wb</Name>
<Type>Workbook</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Variant</ReturnType>
</Procedure>
<Procedure>
<Name>GetListObjects</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>3</CountOfDeclarationLines>
<CountOfLines>20</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : GetListObjects</CommentLine>
<CommentLine> Descr.    : returns a collection of all available list objects in a supplied workbook</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
<Declaration>Public Function GetListObjects( ByRef wb As Workbook ) As Collection</Declaration>
<Parameters>
<Parameter>
<Name>wb</Name>
<Type>Workbook</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Collection</ReturnType>
</Procedure>
<Procedure>
<Name>GetListObjectsInSheetName</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>4</CountOfDeclarationLines>
<CountOfLines>24</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : GetListObjectsInSheetName</CommentLine>
<CommentLine> Descr.    : returns a collection of all available list objects in a supplied workbook</CommentLine>
<CommentLine>   that are in a given worksheet by name</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
<Declaration>Public Function GetListObjectsInSheetName( ByRef wb As Workbook, ByVal sheetName As Variant ) As Collection</Declaration>
<Parameters>
<Parameter>
<Name>wb</Name>
<Type>Workbook</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>sheetName</Name>
<Type>Variant</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Collection</ReturnType>
</Procedure>
<Procedure>
<Name>GetListObjectNames</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>3</CountOfDeclarationLines>
<CountOfLines>20</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : GetListObjectNames</CommentLine>
<CommentLine> Descr.    : returns an array of all available list object names in a supplied workbook</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
<Declaration>Public Function GetListObjectNames( ByRef wb As Workbook ) As Variant</Declaration>
<Parameters>
<Parameter>
<Name>wb</Name>
<Type>Workbook</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Variant</ReturnType>
</Procedure>
<Procedure>
<Name>GetListObjectNamesInSheetName</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>4</CountOfDeclarationLines>
<CountOfLines>22</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : GetListObjectNames</CommentLine>
<CommentLine> Descr.    : returns an array of all available list object names in a supplied workbook</CommentLine>
<CommentLine>             The parameter sheetName can also be an array of multiple names</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
<Declaration>Public Function GetListObjectNamesInSheetName( ByRef wb As Workbook, ByVal sheetName As Variant ) As Variant</Declaration>
<Parameters>
<Parameter>
<Name>wb</Name>
<Type>Workbook</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>sheetName</Name>
<Type>Variant</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Variant</ReturnType>
</Procedure>
<Procedure>
<Name>GetListObjectByName</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>4</CountOfDeclarationLines>
<CountOfLines>23</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure   : GetListObjectByName</CommentLine>
<CommentLine> Description : returns a list object matching the provided name</CommentLine>
<CommentLine>   Function with Workbook parameter is necessary,</CommentLine>
<CommentLine>   beacause ListObject are children of the Worksheet class</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
<Declaration>Public Function GetListObjectByName( ByRef wb As Workbook, ByVal ListName As String ) As ListObject</Declaration>
<Parameters>
<Parameter>
<Name>wb</Name>
<Type>Workbook</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>ListName</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>ListObject</ReturnType>
</Procedure>
<Procedure>
<Name>IsListObjectName</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>4</CountOfDeclarationLines>
<CountOfLines>7</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function IsListObjectName( ByRef wb As Workbook, ByVal listObjectName As String ) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>wb</Name>
<Type>Workbook</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>listObjectName</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>GetListObjectColumnName</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>4</CountOfDeclarationLines>
<CountOfLines>16</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function GetListObjectColumnName( ByRef lo As ListObject, ByVal columnIndex As Long ) As String</Declaration>
<Parameters>
<Parameter>
<Name>lo</Name>
<Type>ListObject</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>columnIndex</Name>
<Type>Long</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>String</ReturnType>
</Procedure>
<Procedure>
<Name>GetListObjectColumnIndex</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>4</CountOfDeclarationLines>
<CountOfLines>16</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function GetListObjectColumnIndex( ByRef lo As ListObject, ByVal columnName As String ) As Long</Declaration>
<Parameters>
<Parameter>
<Name>lo</Name>
<Type>ListObject</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>columnName</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Long</ReturnType>
</Procedure>
<Procedure>
<Name>GetWorkbooksFromPaths</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>4</CountOfDeclarationLines>
<CountOfLines>24</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function GetWorkbooksFromPaths( ByRef xlApp As Object, ByVal workbookPaths As Variant ) As Variant</Declaration>
<Parameters>
<Parameter>
<Name>xlApp</Name>
<Type>Object</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>workbookPaths</Name>
<Type>Variant</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Variant</ReturnType>
</Procedure>
<Procedure>
<Name>GetWorkbookFromPath</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>6</CountOfDeclarationLines>
<CountOfLines>22</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : GetWorkbookFromPath</CommentLine>
<CommentLine> Author    : Ivanov, Bozhan</CommentLine>
<CommentLine> Purpose   : opens and returns a workbook from the provided path and assignes it to the</CommentLine>
<CommentLine>   provided application object</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
<Declaration>Public Function GetWorkbookFromPath( ByRef xlApp As Object, ByVal workbookPath As String, Optional ByVal Password As Variant, Optional ByVal writeResPassword As Variant ) As Workbook</Declaration>
<Parameters>
<Parameter>
<Name>xlApp</Name>
<Type>Object</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>workbookPath</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Password</Name>
<Type>Variant</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>writeResPassword</Name>
<Type>Variant</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Workbook</ReturnType>
</Procedure>
<Procedure>
<Name>IsWorkbookOpen</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>4</CountOfDeclarationLines>
<CountOfLines>29</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure   : IsWorkbookOpen</CommentLine>
<CommentLine> Description : Returns TRUE if a workbook is open in provided application</CommentLine>
<CommentLine>   Accepts workbook name or workbook object as input</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
<Declaration>Public Function IsWorkbookOpen( ByRef xlApp As Excel.Application, ByVal xlWorkbook As Variant ) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>xlApp</Name>
<Type>Excel.Application</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>xlWorkbook</Name>
<Type>Variant</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>IsRangeName</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>4</CountOfDeclarationLines>
<CountOfLines>20</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : IsRangeName</CommentLine>
<CommentLine> Descr.    : returns true if range name exist in workbook</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
<Declaration>Public Function IsRangeName( ByRef wb As Workbook, rangeName As String ) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>wb</Name>
<Type>Workbook</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>rangeName</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>GetRangeNameIndex</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>4</CountOfDeclarationLines>
<CountOfLines>15</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : GetRangeNameIndex</CommentLine>
<CommentLine> Descr.    : returns index of the range name, but -1 if range name was not found</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
<Declaration>Public Function GetRangeNameIndex( ByRef wb As Workbook, ByVal rangeName As String ) As Long</Declaration>
<Parameters>
<Parameter>
<Name>wb</Name>
<Type>Workbook</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>rangeName</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Long</ReturnType>
</Procedure>
<Procedure>
<Name>GetRangeByName</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>4</CountOfDeclarationLines>
<CountOfLines>16</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : GetRangeByName</CommentLine>
<CommentLine> Descr.    : returns range of a range name</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
<Declaration>Public Function GetRangeByName( ByRef wb As Workbook, ByVal rangeName As String ) As Range</Declaration>
<Parameters>
<Parameter>
<Name>wb</Name>
<Type>Workbook</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>rangeName</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Range</ReturnType>
</Procedure>
<Procedure>
<Name>MergeRanges</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>3</CountOfDeclarationLines>
<CountOfLines>35</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : MergeRanges</CommentLine>
<CommentLine> Descr.    : A Union operation that accepts parameters that are Nothing</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
<Declaration>Public Function MergeRanges( ParamArray rngs() As Variant ) As Range</Declaration>
<Parameters>
<Parameter>
<Name>rngs()</Name>
<Type>Variant</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>True</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Range</ReturnType>
</Procedure>
<Procedure>
<Name>CloseWorbooksInApplication</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>4</CountOfDeclarationLines>
<CountOfLines>16</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : CloseWorbooksInApplication</CommentLine>
<CommentLine> Descr.    : Closes all open workbook in an excel application</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
<Declaration>Public Sub CloseWorbooksInApplication( ByRef xlApp As Excel.Application, Optional ByVal bSave As Boolean = False )</Declaration>
<Parameters>
<Parameter>
<Name>xlApp</Name>
<Type>Excel.Application</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>bSave</Name>
<Type>Boolean</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>False</DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>CloseWorkbooks</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>4</CountOfDeclarationLines>
<CountOfLines>30</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : CloseWorkbooks</CommentLine>
<CommentLine> Descr.    : Closes all provided as parameters workbooks</CommentLine>
<CommentLine>   Workbooks can be an array of Excel.Workbook elements of a collection of Workbooks</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
<Declaration>Public Sub CloseWorkbooks( ByRef Workbooks As Variant, Optional ByVal bSave As Boolean = False )</Declaration>
<Parameters>
<Parameter>
<Name>Workbooks</Name>
<Type>Variant</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>bSave</Name>
<Type>Boolean</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>False</DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>InsertCheckBoxAndGetIndex</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>7</CountOfDeclarationLines>
<CountOfLines>52</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : InsertCheckBoxAndGetIndex</CommentLine>
<CommentLine> Descr.    : returns the index of the inserted checkboxes</CommentLine>
<CommentLine>   On error of any kind -1 will be returned</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
<Declaration>Public Function InsertCheckBoxAndGetIndex( ByRef rng As Range, Optional ByVal Caption As String = vbNullString, Optional ByVal text As String = vbNullString, Optional ByVal checked As Long = Excel.xlOn, Optional ByVal namePrefix As String = vbNullString ) As Long</Declaration>
<Parameters>
<Parameter>
<Name>rng</Name>
<Type>Range</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Caption</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>vbNullString</DefaultValue>
</Parameter>
<Parameter>
<Name>text</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>vbNullString</DefaultValue>
</Parameter>
<Parameter>
<Name>checked</Name>
<Type>Long</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>Excel.xlOn</DefaultValue>
</Parameter>
<Parameter>
<Name>namePrefix</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>vbNullString</DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Long</ReturnType>
</Procedure>
<Procedure>
<Name>GetCaptionsOfCheckedCheckBoxesInWorksheet</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>3</CountOfDeclarationLines>
<CountOfLines>18</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function GetCaptionsOfCheckedCheckBoxesInWorksheet( ByRef WS As Worksheet ) As Variant</Declaration>
<Parameters>
<Parameter>
<Name>WS</Name>
<Type>Worksheet</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Variant</ReturnType>
</Procedure>
<Procedure>
<Name>DeleteCheckboxesInWorksheet</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>7</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub DeleteCheckboxesInWorksheet(ByRef WS As Worksheet)</Declaration>
<Parameters>
<Parameter>
<Name>WS</Name>
<Type>Worksheet</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>SelectCheckboxesInWorksheet</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>7</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub SelectCheckboxesInWorksheet(ByRef WS As Worksheet)</Declaration>
<Parameters>
<Parameter>
<Name>WS</Name>
<Type>Worksheet</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>DeselectCheckboxesInWorksheet</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>7</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub DeselectCheckboxesInWorksheet(ByRef WS As Worksheet)</Declaration>
<Parameters>
<Parameter>
<Name>WS</Name>
<Type>Worksheet</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>GetMergedRange</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>11</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function GetMergedRange(rng As Range) As Range</Declaration>
<Parameters>
<Parameter>
<Name>rng</Name>
<Type>Range</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Range</ReturnType>
</Procedure>
<Procedure>
<Name>TurnOffScreenUpdatingAndAlerts</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>3</CountOfDeclarationLines>
<CountOfLines>13</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub TurnOffScreenUpdatingAndAlerts( Optional ByRef xlApp As Excel.Application )</Declaration>
<Parameters>
<Parameter>
<Name>xlApp</Name>
<Type>Excel.Application</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>TurnOnScreenUpdatingAndAlerts</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>3</CountOfDeclarationLines>
<CountOfLines>13</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub TurnOnScreenUpdatingAndAlerts( Optional ByRef xlApp As Excel.Application )</Declaration>
<Parameters>
<Parameter>
<Name>xlApp</Name>
<Type>Excel.Application</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>IsShape</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>17</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : IsShape</CommentLine>
<CommentLine> Descr.    : returns true if shape exists in worksheet</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
<Declaration>Public Function IsShape(WS As Worksheet, shapeName As String) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>WS</Name>
<Type>Worksheet</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>shapeName</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>GetShapeText</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>12</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : GetShapeText</CommentLine>
<CommentLine> Descr.    : returns text value for a given shape name</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
<Declaration>Public Function GetShapeText(ByRef WS As Worksheet, shapeName As String) As String</Declaration>
<Parameters>
<Parameter>
<Name>WS</Name>
<Type>Worksheet</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>shapeName</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>String</ReturnType>
</Procedure>
<Procedure>
<Name>SetShapeText</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>10</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : SetShapeText</CommentLine>
<CommentLine> Descr.    : sets text value for a given shape name</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
<Declaration>Public Sub SetShapeText(ByRef WS As Worksheet, ByVal shapeName As String, ByVal text As String)</Declaration>
<Parameters>
<Parameter>
<Name>WS</Name>
<Type>Worksheet</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>shapeName</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>text</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>FindFirstInWorkbook</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>11</CountOfDeclarationLines>
<CountOfLines>32</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function FindFirstInWorkbook( ByRef SearchWorkbook As Workbook, ByVal FindWhat As Variant, Optional ByVal LookIn As XlFindLookIn = xlValues, Optional ByVal LookAt As XlLookAt = xlWhole, Optional ByVal SearchOrder As XlSearchOrder = xlByRows, Optional ByVal MatchCase As Boolean = False, Optional ByVal BeginsWith As String = vbNullString, Optional ByVal EndsWith As String = vbNullString, Optional ByVal SubStringCompareMethod As VbCompareMethod = vbTextCompare ) As Range</Declaration>
<Parameters>
<Parameter>
<Name>SearchWorkbook</Name>
<Type>Workbook</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>FindWhat</Name>
<Type>Variant</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>LookIn</Name>
<Type>XlFindLookIn</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>xlValues</DefaultValue>
</Parameter>
<Parameter>
<Name>LookAt</Name>
<Type>XlLookAt</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>xlWhole</DefaultValue>
</Parameter>
<Parameter>
<Name>SearchOrder</Name>
<Type>XlSearchOrder</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>xlByRows</DefaultValue>
</Parameter>
<Parameter>
<Name>MatchCase</Name>
<Type>Boolean</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>False</DefaultValue>
</Parameter>
<Parameter>
<Name>BeginsWith</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>vbNullString</DefaultValue>
</Parameter>
<Parameter>
<Name>EndsWith</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>vbNullString</DefaultValue>
</Parameter>
<Parameter>
<Name>SubStringCompareMethod</Name>
<Type>VbCompareMethod</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>vbTextCompare</DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Range</ReturnType>
</Procedure>
<Procedure>
<Name>FindFirstInWorksheets</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>11</CountOfDeclarationLines>
<CountOfLines>61</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : FindFirstInWorksheets</CommentLine>
<CommentLine> Descr.    :</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
<Declaration>Public Function FindFirstInWorksheets( ByRef WorksheetsArray As Variant, ByVal FindWhat As Variant, Optional ByVal LookIn As XlFindLookIn = xlValues, Optional ByVal LookAt As XlLookAt = xlWhole, Optional ByVal SearchOrder As XlSearchOrder = xlByRows, Optional ByVal MatchCase As Boolean = False, Optional ByVal BeginsWith As String = vbNullString, Optional ByVal EndsWith As String = vbNullString, Optional ByVal SubStringCompareMethod As VbCompareMethod = vbTextCompare ) As Range</Declaration>
<Parameters>
<Parameter>
<Name>WorksheetsArray</Name>
<Type>Variant</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>FindWhat</Name>
<Type>Variant</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>LookIn</Name>
<Type>XlFindLookIn</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>xlValues</DefaultValue>
</Parameter>
<Parameter>
<Name>LookAt</Name>
<Type>XlLookAt</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>xlWhole</DefaultValue>
</Parameter>
<Parameter>
<Name>SearchOrder</Name>
<Type>XlSearchOrder</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>xlByRows</DefaultValue>
</Parameter>
<Parameter>
<Name>MatchCase</Name>
<Type>Boolean</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>False</DefaultValue>
</Parameter>
<Parameter>
<Name>BeginsWith</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>vbNullString</DefaultValue>
</Parameter>
<Parameter>
<Name>EndsWith</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>vbNullString</DefaultValue>
</Parameter>
<Parameter>
<Name>SubStringCompareMethod</Name>
<Type>VbCompareMethod</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>vbTextCompare</DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Range</ReturnType>
</Procedure>
<Procedure>
<Name>FindFirstInWorksheet</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>11</CountOfDeclarationLines>
<CountOfLines>29</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function FindFirstInWorksheet( ByRef SearchWorksheet As Worksheet, ByVal FindWhat As Variant, Optional ByVal LookIn As XlFindLookIn = xlValues, Optional ByVal LookAt As XlLookAt = xlWhole, Optional ByVal SearchOrder As XlSearchOrder = xlByRows, Optional ByVal MatchCase As Boolean = False, Optional ByVal BeginsWith As String = vbNullString, Optional ByVal EndsWith As String = vbNullString, Optional ByVal SubStringCompareMethod As VbCompareMethod = vbTextCompare ) As Range</Declaration>
<Parameters>
<Parameter>
<Name>SearchWorksheet</Name>
<Type>Worksheet</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>FindWhat</Name>
<Type>Variant</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>LookIn</Name>
<Type>XlFindLookIn</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>xlValues</DefaultValue>
</Parameter>
<Parameter>
<Name>LookAt</Name>
<Type>XlLookAt</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>xlWhole</DefaultValue>
</Parameter>
<Parameter>
<Name>SearchOrder</Name>
<Type>XlSearchOrder</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>xlByRows</DefaultValue>
</Parameter>
<Parameter>
<Name>MatchCase</Name>
<Type>Boolean</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>False</DefaultValue>
</Parameter>
<Parameter>
<Name>BeginsWith</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>vbNullString</DefaultValue>
</Parameter>
<Parameter>
<Name>EndsWith</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>vbNullString</DefaultValue>
</Parameter>
<Parameter>
<Name>SubStringCompareMethod</Name>
<Type>VbCompareMethod</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>vbTextCompare</DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Range</ReturnType>
</Procedure>
<Procedure>
<Name>FindFirstInRange</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>12</CountOfDeclarationLines>
<CountOfLines>55</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : FindFirstInRange</CommentLine>
<CommentLine> Descr.    :</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
<Declaration>Public Function FindFirstInRange( ByRef SearchRange As Range, ByVal FindWhat As Variant, Optional ByVal after As Range, Optional ByVal LookIn As XlFindLookIn = xlValues, Optional ByVal LookAt As XlLookAt = xlWhole, Optional ByVal SearchOrder As XlSearchOrder = xlByRows, Optional ByVal MatchCase As Boolean = False, Optional ByVal BeginsWith As String = vbNullString, Optional ByVal EndsWith As String = vbNullString, Optional ByVal SubStringCompareMethod As VbCompareMethod = vbTextCompare ) As Range</Declaration>
<Parameters>
<Parameter>
<Name>SearchRange</Name>
<Type>Range</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>FindWhat</Name>
<Type>Variant</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>after</Name>
<Type>Range</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>LookIn</Name>
<Type>XlFindLookIn</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>xlValues</DefaultValue>
</Parameter>
<Parameter>
<Name>LookAt</Name>
<Type>XlLookAt</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>xlWhole</DefaultValue>
</Parameter>
<Parameter>
<Name>SearchOrder</Name>
<Type>XlSearchOrder</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>xlByRows</DefaultValue>
</Parameter>
<Parameter>
<Name>MatchCase</Name>
<Type>Boolean</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>False</DefaultValue>
</Parameter>
<Parameter>
<Name>BeginsWith</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>vbNullString</DefaultValue>
</Parameter>
<Parameter>
<Name>EndsWith</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>vbNullString</DefaultValue>
</Parameter>
<Parameter>
<Name>SubStringCompareMethod</Name>
<Type>VbCompareMethod</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>vbTextCompare</DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Range</ReturnType>
</Procedure>
<Procedure>
<Name>GetLastCellInRange</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>24</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : GetLastCellInRange</CommentLine>
<CommentLine> Descr.    : Returns the very last cell in a given range independent of the presence of</CommentLine>
<CommentLine>  data content.</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
<Declaration>Public Function GetLastCellInRange(SearchRange As Range) As Range</Declaration>
<Parameters>
<Parameter>
<Name>SearchRange</Name>
<Type>Range</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Range</ReturnType>
</Procedure>
<Procedure>
<Name>FindAllInRange</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>11</CountOfDeclarationLines>
<CountOfLines>68</CountOfLines>
<CommentLines>
<CommentLine> TODO refine/refactor</CommentLine>
<CommentLine>Private Function findLastCellWithDataInRangeByRow(ByRef rng As Range) As Range</CommentLine>
<CommentLine></CommentLine>
<CommentLine>End Function</CommentLine>
<CommentLine></CommentLine>
<CommentLine>Private Function findLastCellWithDataInRangeByColumn(ByRef rng As Range) As Range</CommentLine>
<CommentLine></CommentLine>
<CommentLine>End Function</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : FindAllInRange</CommentLine>
<CommentLine> Descr.    :</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
<Declaration>Public Function FindAllInRange( ByRef SearchRange As Range, ByVal FindWhat As Variant, Optional ByVal LookIn As XlFindLookIn = xlValues, Optional ByVal LookAt As XlLookAt = xlWhole, Optional ByVal SearchOrder As XlSearchOrder = xlByRows, Optional ByVal MatchCase As Boolean = False, Optional ByVal BeginsWith As String = vbNullString, Optional ByVal EndsWith As String = vbNullString, Optional ByVal SubStringCompareMethod As VbCompareMethod = vbTextCompare ) As Collection</Declaration>
<Parameters>
<Parameter>
<Name>SearchRange</Name>
<Type>Range</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>FindWhat</Name>
<Type>Variant</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>LookIn</Name>
<Type>XlFindLookIn</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>xlValues</DefaultValue>
</Parameter>
<Parameter>
<Name>LookAt</Name>
<Type>XlLookAt</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>xlWhole</DefaultValue>
</Parameter>
<Parameter>
<Name>SearchOrder</Name>
<Type>XlSearchOrder</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>xlByRows</DefaultValue>
</Parameter>
<Parameter>
<Name>MatchCase</Name>
<Type>Boolean</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>False</DefaultValue>
</Parameter>
<Parameter>
<Name>BeginsWith</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>vbNullString</DefaultValue>
</Parameter>
<Parameter>
<Name>EndsWith</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>vbNullString</DefaultValue>
</Parameter>
<Parameter>
<Name>SubStringCompareMethod</Name>
<Type>VbCompareMethod</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>vbTextCompare</DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Collection</ReturnType>
</Procedure>
<Procedure>
<Name>FindAllInWorksheet</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>11</CountOfDeclarationLines>
<CountOfLines>40</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : FindAllInWorksheet</CommentLine>
<CommentLine> Descr.    :</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
<Declaration>Public Function FindAllInWorksheet( ByRef SearchWorksheet As Worksheet, ByVal FindWhat As Variant, Optional ByVal LookIn As XlFindLookIn = xlValues, Optional ByVal LookAt As XlLookAt = xlWhole, Optional ByVal SearchOrder As XlSearchOrder = xlByRows, Optional ByVal MatchCase As Boolean = False, Optional ByVal BeginsWith As String = vbNullString, Optional ByVal EndsWith As String = vbNullString, Optional ByVal SubStringCompareMethod As VbCompareMethod = vbTextCompare ) As Collection</Declaration>
<Parameters>
<Parameter>
<Name>SearchWorksheet</Name>
<Type>Worksheet</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>FindWhat</Name>
<Type>Variant</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>LookIn</Name>
<Type>XlFindLookIn</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>xlValues</DefaultValue>
</Parameter>
<Parameter>
<Name>LookAt</Name>
<Type>XlLookAt</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>xlWhole</DefaultValue>
</Parameter>
<Parameter>
<Name>SearchOrder</Name>
<Type>XlSearchOrder</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>xlByRows</DefaultValue>
</Parameter>
<Parameter>
<Name>MatchCase</Name>
<Type>Boolean</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>False</DefaultValue>
</Parameter>
<Parameter>
<Name>BeginsWith</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>vbNullString</DefaultValue>
</Parameter>
<Parameter>
<Name>EndsWith</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>vbNullString</DefaultValue>
</Parameter>
<Parameter>
<Name>SubStringCompareMethod</Name>
<Type>VbCompareMethod</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>vbTextCompare</DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Collection</ReturnType>
</Procedure>
<Procedure>
<Name>FindAllInWorksheets</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>11</CountOfDeclarationLines>
<CountOfLines>67</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : FindAllInWorksheets</CommentLine>
<CommentLine> Descr.    :</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
<Declaration>Public Function FindAllInWorksheets( ByRef WorksheetsArray As Variant, ByVal FindWhat As Variant, Optional ByVal LookIn As XlFindLookIn = xlValues, Optional ByVal LookAt As XlLookAt = xlWhole, Optional ByVal SearchOrder As XlSearchOrder = xlByRows, Optional ByVal MatchCase As Boolean = False, Optional ByVal BeginsWith As String = vbNullString, Optional ByVal EndsWith As String = vbNullString, Optional ByVal SubStringCompareMethod As VbCompareMethod = vbTextCompare ) As Collection</Declaration>
<Parameters>
<Parameter>
<Name>WorksheetsArray</Name>
<Type>Variant</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>FindWhat</Name>
<Type>Variant</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>LookIn</Name>
<Type>XlFindLookIn</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>xlValues</DefaultValue>
</Parameter>
<Parameter>
<Name>LookAt</Name>
<Type>XlLookAt</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>xlWhole</DefaultValue>
</Parameter>
<Parameter>
<Name>SearchOrder</Name>
<Type>XlSearchOrder</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>xlByRows</DefaultValue>
</Parameter>
<Parameter>
<Name>MatchCase</Name>
<Type>Boolean</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>False</DefaultValue>
</Parameter>
<Parameter>
<Name>BeginsWith</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>vbNullString</DefaultValue>
</Parameter>
<Parameter>
<Name>EndsWith</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>vbNullString</DefaultValue>
</Parameter>
<Parameter>
<Name>SubStringCompareMethod</Name>
<Type>VbCompareMethod</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>vbTextCompare</DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Collection</ReturnType>
</Procedure>
<Procedure>
<Name>FindAllInWorkbook</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>11</CountOfDeclarationLines>
<CountOfLines>46</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : FindAllInWorkbook</CommentLine>
<CommentLine> Descr.    :</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
<Declaration>Public Function FindAllInWorkbook( ByRef SearchWorkbook As Workbook, ByVal FindWhat As Variant, Optional ByVal LookIn As XlFindLookIn = xlValues, Optional ByVal LookAt As XlLookAt = xlWhole, Optional ByVal SearchOrder As XlSearchOrder = xlByRows, Optional ByVal MatchCase As Boolean = False, Optional ByVal BeginsWith As String = vbNullString, Optional ByVal EndsWith As String = vbNullString, Optional ByVal SubStringCompareMethod As VbCompareMethod = vbTextCompare ) As Collection</Declaration>
<Parameters>
<Parameter>
<Name>SearchWorkbook</Name>
<Type>Workbook</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>FindWhat</Name>
<Type>Variant</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>LookIn</Name>
<Type>XlFindLookIn</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>xlValues</DefaultValue>
</Parameter>
<Parameter>
<Name>LookAt</Name>
<Type>XlLookAt</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>xlWhole</DefaultValue>
</Parameter>
<Parameter>
<Name>SearchOrder</Name>
<Type>XlSearchOrder</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>xlByRows</DefaultValue>
</Parameter>
<Parameter>
<Name>MatchCase</Name>
<Type>Boolean</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>False</DefaultValue>
</Parameter>
<Parameter>
<Name>BeginsWith</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>vbNullString</DefaultValue>
</Parameter>
<Parameter>
<Name>EndsWith</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>vbNullString</DefaultValue>
</Parameter>
<Parameter>
<Name>SubStringCompareMethod</Name>
<Type>VbCompareMethod</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>vbTextCompare</DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Collection</ReturnType>
</Procedure>
<Procedure>
<Name>GetColumnLetter</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>24</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : GetColumnLetter</CommentLine>
<CommentLine> Descr.    :</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
<Declaration>Public Function GetColumnLetter(ByRef rng As Range) As String</Declaration>
<Parameters>
<Parameter>
<Name>rng</Name>
<Type>Range</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>String</ReturnType>
</Procedure>
<Procedure>
<Name>GetRangeFromListObjectOnCondition</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>6</CountOfDeclarationLines>
<CountOfLines>45</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : GetRangeFromListObjectOnCondition</CommentLine>
<CommentLine> Descr.    :</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
<Declaration>Public Function GetRangeFromListObjectOnCondition( ByRef sourceTableRange As Range, ByVal conditionColumnHeader As String, ByVal conditionValue As Variant, ByVal searchColumnHeader As String ) As Range</Declaration>
<Parameters>
<Parameter>
<Name>sourceTableRange</Name>
<Type>Range</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>conditionColumnHeader</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>conditionValue</Name>
<Type>Variant</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>searchColumnHeader</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Range</ReturnType>
</Procedure>
<Procedure>
<Name>SetRangeInListObjectOnCondition</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>7</CountOfDeclarationLines>
<CountOfLines>35</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : SetRangeInListObjectOnCondition</CommentLine>
<CommentLine> Descr.    :</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
<Declaration>Public Function SetRangeInListObjectOnCondition( ByRef sourceTableRange As Range, ByVal conditionColumnHeader As String, ByVal conditionValue As Variant, ByVal searchColumnHeader As String, ByVal updateRangeValue As Variant ) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>sourceTableRange</Name>
<Type>Range</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>conditionColumnHeader</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>conditionValue</Name>
<Type>Variant</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>searchColumnHeader</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>updateRangeValue</Name>
<Type>Variant</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>CopyHyperlinks</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>4</CountOfDeclarationLines>
<CountOfLines>16</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub CopyHyperlinks( ByRef src As Range, ByRef dst As Range )</Declaration>
<Parameters>
<Parameter>
<Name>src</Name>
<Type>Range</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>dst</Name>
<Type>Range</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>ImportDataFromDSVFile</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>6</CountOfDeclarationLines>
<CountOfLines>16</CountOfLines>
<CommentLines>
<CommentLine>todo make desc and clear variable names</CommentLine>
</CommentLines>
<Declaration>Public Sub ImportDataFromDSVFile( ByVal FilePath As String, ByVal colDelimiter As String, ByRef resultRange As Range, Optional ByVal rowDelimiter As String = vbCrLf )</Declaration>
<Parameters>
<Parameter>
<Name>FilePath</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>colDelimiter</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>resultRange</Name>
<Type>Range</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>rowDelimiter</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>vbCrLf</DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>ImportDataFromDSVFileOnCondition</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>7</CountOfDeclarationLines>
<CountOfLines>15</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub ImportDataFromDSVFileOnCondition( ByVal FilePath As String, ByVal colDelimiter As String, ByRef resultRange As Range, ByVal condition As Variant, Optional ByVal rowDelimiter As String = vbCrLf )</Declaration>
<Parameters>
<Parameter>
<Name>FilePath</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>colDelimiter</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>resultRange</Name>
<Type>Range</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>condition</Name>
<Type>Variant</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>rowDelimiter</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>vbCrLf</DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>CropWorksheet</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>8</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub CropWorksheet(ByRef WS As Excel.Worksheet)</Declaration>
<Parameters>
<Parameter>
<Name>WS</Name>
<Type>Excel.Worksheet</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>CreateWorksheet</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>4</CountOfDeclarationLines>
<CountOfLines>19</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function CreateWorksheet( ByRef wb As Workbook, Optional ByVal sheetName As String = vbNullString ) As Worksheet</Declaration>
<Parameters>
<Parameter>
<Name>wb</Name>
<Type>Workbook</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>sheetName</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>vbNullString</DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Worksheet</ReturnType>
</Procedure>
<Procedure>
<Name>IsWorksheetName</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>4</CountOfDeclarationLines>
<CountOfLines>7</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function IsWorksheetName( ByRef wb As Workbook, ByVal sheetName As String ) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>wb</Name>
<Type>Workbook</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>sheetName</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>SortCustomListObjectsByColumn</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>4</CountOfDeclarationLines>
<CountOfLines>25</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function SortCustomListObjectsByColumn( ByRef los As Collection, ByVal sortColumnName As String ) As Variant</Declaration>
<Parameters>
<Parameter>
<Name>los</Name>
<Type>Collection</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>sortColumnName</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Variant</ReturnType>
</Procedure>
<Procedure>
<Name>SortListObjectsByColumn</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>4</CountOfDeclarationLines>
<CountOfLines>25</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function SortListObjectsByColumn( ByRef los As ListObjects, ByVal sortColumnName As String ) As Variant</Declaration>
<Parameters>
<Parameter>
<Name>los</Name>
<Type>ListObjects</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>sortColumnName</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Variant</ReturnType>
</Procedure>
<Procedure>
<Name>GetOLEObjectCount</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>4</CountOfDeclarationLines>
<CountOfLines>13</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function GetOLEObjectCount( ByRef WS As Worksheet, ByVal objType As XlOLEType ) As Long</Declaration>
<Parameters>
<Parameter>
<Name>WS</Name>
<Type>Worksheet</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>objType</Name>
<Type>XlOLEType</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Long</ReturnType>
</Procedure>
<Procedure>
<Name>GetAssignedOLEObjectToRange</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>4</CountOfDeclarationLines>
<CountOfLines>14</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function GetAssignedOLEObjectToRange( ByRef WS As Worksheet, ByVal targetAddress As String ) As oleObject</Declaration>
<Parameters>
<Parameter>
<Name>WS</Name>
<Type>Worksheet</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>targetAddress</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>oleObject</ReturnType>
</Procedure>
<Procedure>
<Name>ExistsAssignedOLEObjectToRange</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>4</CountOfDeclarationLines>
<CountOfLines>13</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function ExistsAssignedOLEObjectToRange( ByRef WS As Worksheet, targetAddress As String ) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>WS</Name>
<Type>Worksheet</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>targetAddress</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>CreateComboBoxForCell</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>4</CountOfDeclarationLines>
<CountOfLines>41</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function CreateComboBoxForCell( ByRef rng As Range, ByRef cboSettings As OLEObjectSetting ) As oleObject</Declaration>
<Parameters>
<Parameter>
<Name>rng</Name>
<Type>Range</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>cboSettings</Name>
<Type>OLEObjectSetting</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>oleObject</ReturnType>
</Procedure>
<Procedure>
<Name>PromptMacroSecuritySettings</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub PromptMacroSecuritySettings(ByRef app As Excel.Application)</Declaration>
<Parameters>
<Parameter>
<Name>app</Name>
<Type>Excel.Application</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>ImportTextFileContentIntoNewWorksheet</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>48</CountOfLines>
<CommentLines>
<CommentLine>TODO Revise Subprocedure</CommentLine>
</CommentLines>
<Declaration>Public Sub ImportTextFileContentIntoNewWorksheet(FName As String, sep As String)</Declaration>
<Parameters>
<Parameter>
<Name>FName</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>sep</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>GetJoinCollections</Name>
<Scope>Private</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>3</CountOfDeclarationLines>
<CountOfLines>18</CountOfLines>
<CommentLines>
<CommentLine>TODO move to a UtilCollection class Module</CommentLine>
</CommentLines>
<Declaration>Private Function GetJoinCollections( ParamArray collections() As Variant ) As Collection</Declaration>
<Parameters>
<Parameter>
<Name>collections()</Name>
<Type>Variant</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>True</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Collection</ReturnType>
</Procedure>
</Procedures>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Module    : UtilExcel</CommentLine>
<CommentLine> Author    : Ivanov, Bozhan</CommentLine>
<CommentLine> Purpose   : Provides workbook Utility to extend functionality and management of</CommentLine>
<CommentLine>   excel workbooks and worksheets</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> TODO modFormat:setConditionalFormatingForRange</CommentLine>
<CommentLine> TODO to be excel object independent import all xl enums from Excel lib as private enums with the same name</CommentLine>
</CommentLines>
</CodeModule>
</File>
<File>
<Name>WorksheetIO</Name>
<FileName></FileName>
<PathFileName></PathFileName>
<Type>ClassModule</Type>
<Properties>
<Property>
<Name>Name</Name>
<Value>WorksheetIO</Value>
</Property>
<Property>
<Name>Instancing</Name>
<Value>1</Value>
</Property>
</Properties>
<CodeModule>
<CountOfDeclarationLines>15</CountOfDeclarationLines>
<CountOfLines>130</CountOfLines>
<Interfaces>
</Interfaces>
<Events>
</Events>
<Procedures>
<Procedure>
<Name>Application</Name>
<Scope></Scope>
<Type>PropertyGet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>9</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Property Get Application() As Excel.Application</Declaration>
<Parameters>
</Parameters>
<ReturnType>Excel.Application</ReturnType>
</Procedure>
<Procedure>
<Name>Application</Name>
<Scope></Scope>
<Type>PropertyLet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Property Let Application(ByRef app As Excel.Application)</Declaration>
<Parameters>
<Parameter>
<Name>app</Name>
<Type>Excel.Application</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>Workbook</Name>
<Scope></Scope>
<Type>PropertyGet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>9</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Property Get Workbook() As Excel.Workbook</Declaration>
<Parameters>
</Parameters>
<ReturnType>Excel.Workbook</ReturnType>
</Procedure>
<Procedure>
<Name>Workbook</Name>
<Scope></Scope>
<Type>PropertyLet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Property Let Workbook(ByRef wb As Excel.Workbook)</Declaration>
<Parameters>
<Parameter>
<Name>wb</Name>
<Type>Excel.Workbook</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>Worksheet</Name>
<Scope></Scope>
<Type>PropertyGet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>9</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Property Get Worksheet() As Excel.Worksheet</Declaration>
<Parameters>
</Parameters>
<ReturnType>Excel.Worksheet</ReturnType>
</Procedure>
<Procedure>
<Name>Worksheet</Name>
<Scope></Scope>
<Type>PropertyLet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Property Let Worksheet(ByRef xlWorksheet As Excel.Worksheet)</Declaration>
<Parameters>
<Parameter>
<Name>xlWorksheet</Name>
<Type>Excel.Worksheet</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>UsedRange</Name>
<Scope></Scope>
<Type>PropertyGet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>9</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Property Get UsedRange() As Excel.Range</Declaration>
<Parameters>
</Parameters>
<ReturnType>Excel.Range</ReturnType>
</Procedure>
<Procedure>
<Name>UsedRange</Name>
<Scope></Scope>
<Type>PropertyLet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Property Let UsedRange(ByRef rng As Excel.Range)</Declaration>
<Parameters>
<Parameter>
<Name>rng</Name>
<Type>Excel.Range</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>hcc</Name>
<Scope></Scope>
<Type>PropertyGet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Property Get hcc() As HeadColumnDict</Declaration>
<Parameters>
</Parameters>
<ReturnType>HeadColumnDict</ReturnType>
</Procedure>
<Procedure>
<Name>hcc</Name>
<Scope></Scope>
<Type>PropertyLet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Property Let hcc(ByRef HeadColumnColObject As HeadColumnDict)</Declaration>
<Parameters>
<Parameter>
<Name>HeadColumnColObject</Name>
<Type>HeadColumnDict</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>ConditionHCC</Name>
<Scope></Scope>
<Type>PropertyGet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Property Get ConditionHCC() As HeadColumnDict</Declaration>
<Parameters>
</Parameters>
<ReturnType>HeadColumnDict</ReturnType>
</Procedure>
<Procedure>
<Name>ConditionHCC</Name>
<Scope></Scope>
<Type>PropertyLet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Property Let ConditionHCC(ByRef HeadColumnColObject As HeadColumnDict)</Declaration>
<Parameters>
<Parameter>
<Name>HeadColumnColObject</Name>
<Type>HeadColumnDict</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>RevealHiddenData</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>8</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub RevealHiddenData()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>HideRevealedData</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>6</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub HideRevealedData()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>TurnOffScreenUpdatingAndAlerts</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub TurnOffScreenUpdatingAndAlerts()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>TurnOnScreenUpdatingAndAlerts</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub TurnOnScreenUpdatingAndAlerts()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>OpenWorkbookFromPath</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>5</CountOfDeclarationLines>
<CountOfLines>12</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub OpenWorkbookFromPath( ByVal path As String, Optional ByVal Password As Variant, Optional ByVal writeResPassword As Variant )</Declaration>
<Parameters>
<Parameter>
<Name>path</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Password</Name>
<Type>Variant</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>writeResPassword</Name>
<Type>Variant</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>CloseAllWorbooks</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub CloseAllWorbooks(Optional Save As Boolean = False)</Declaration>
<Parameters>
<Parameter>
<Name>Save</Name>
<Type>Boolean</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>False</DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>CloseWorbook</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>8</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub CloseWorbook(Optional Save As Boolean = False)</Declaration>
<Parameters>
<Parameter>
<Name>Save</Name>
<Type>Boolean</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>False</DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
</Procedures>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Module    : WorksheetIO</CommentLine>
<CommentLine> Author    : Ivanov, Bozhan</CommentLine>
<CommentLine> Purpose   :</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
</CodeModule>
</File>
<File>
<Name>Init</Name>
<FileName></FileName>
<PathFileName></PathFileName>
<Type>StdModule</Type>
<Properties>
<Property>
<Name>Name</Name>
<Value>Init</Value>
</Property>
</Properties>
<CodeModule>
<CountOfDeclarationLines>6</CountOfDeclarationLines>
<CountOfLines>26</CountOfLines>
<Interfaces>
</Interfaces>
<Events>
</Events>
<Procedures>
<Procedure>
<Name>initWorkbook</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>18</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub initWorkbook()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
</Procedures>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : initWorkbook</CommentLine>
<CommentLine> Date      : 09.04.2014</CommentLine>
<CommentLine> Descr.    : Initialize Status, Progress and UI elements properties</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
</CodeModule>
</File>
<File>
<Name>UtilWindows</Name>
<FileName></FileName>
<PathFileName></PathFileName>
<Type>ClassModule</Type>
<Properties>
<Property>
<Name>Name</Name>
<Value>UtilWindows</Value>
</Property>
<Property>
<Name>Instancing</Name>
<Value>1</Value>
</Property>
</Properties>
<CodeModule>
<CountOfDeclarationLines>134</CountOfDeclarationLines>
<CountOfLines>618</CountOfLines>
<Interfaces>
</Interfaces>
<Events>
</Events>
<Procedures>
<Procedure>
<Name>FrameClassNames</Name>
<Scope>Public</Scope>
<Type>PropertyGet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>21</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Property Get FrameClassNames() As Object</Declaration>
<Parameters>
</Parameters>
<ReturnType>Object</ReturnType>
</Procedure>
<Procedure>
<Name>CopyMemoryValueAdrFromReferenceAdr</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>5</CountOfDeclarationLines>
<CountOfLines>8</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub CopyMemoryValueAdrFromReferenceAdr( ByVal hpvDest As Object, ByRef hpvSource As Object, ByVal cbCopy As Long )</Declaration>
<Parameters>
<Parameter>
<Name>hpvDest</Name>
<Type>Object</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>hpvSource</Name>
<Type>Object</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>cbCopy</Name>
<Type>Long</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>CopyMemoryReferenceAdrFromValueAdr</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>5</CountOfDeclarationLines>
<CountOfLines>8</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub CopyMemoryReferenceAdrFromValueAdr( ByRef hpvDest As Object, ByVal hpvSource As Object, ByVal cbCopy As Long )</Declaration>
<Parameters>
<Parameter>
<Name>hpvDest</Name>
<Type>Object</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>hpvSource</Name>
<Type>Object</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>cbCopy</Name>
<Type>Long</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>WindowHandle</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>4</CountOfDeclarationLines>
<CountOfLines>11</CountOfLines>
<CommentLines>
<CommentLine>The window name (lpWindowName) in findWindow is usually the window&apos;s caption;</CommentLine>
<CommentLine>see the window&apos;s title bar. Passing the object in the following form might also work: Object.caption</CommentLine>
<CommentLine>FindWindow(FrameClasses.Class, frm.Caption)</CommentLine>
</CommentLines>
<Declaration>Public Function WindowHandle( ByVal ClassName As String, Optional WindowsName As String = vbNullString ) As Long</Declaration>
<Parameters>
<Parameter>
<Name>ClassName</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>WindowsName</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>vbNullString</DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Long</ReturnType>
</Procedure>
<Procedure>
<Name>ProcIdFromWinClass</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>4</CountOfDeclarationLines>
<CountOfLines>9</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function ProcIdFromWinClass( ByVal ClassName As String, Optional WindowsName As String = vbNullString ) As Long</Declaration>
<Parameters>
<Parameter>
<Name>ClassName</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>WindowsName</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>vbNullString</DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Long</ReturnType>
</Procedure>
<Procedure>
<Name>ProcIdFromWinHandle</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>3</CountOfDeclarationLines>
<CountOfLines>8</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function ProcIdFromWinHandle( ByVal hwnd As Long ) As Long</Declaration>
<Parameters>
<Parameter>
<Name>hwnd</Name>
<Type>Long</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Long</ReturnType>
</Procedure>
<Procedure>
<Name>CurrentProcessId</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function CurrentProcessId() As Long</Declaration>
<Parameters>
</Parameters>
<ReturnType>Long</ReturnType>
</Procedure>
<Procedure>
<Name>WinHandleFromProcId</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>3</CountOfDeclarationLines>
<CountOfLines>19</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function WinHandleFromProcId( hInstance As Long ) As Long</Declaration>
<Parameters>
<Parameter>
<Name>hInstance</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Long</ReturnType>
</Procedure>
<Procedure>
<Name>WinCaptionFromProcId</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>3</CountOfDeclarationLines>
<CountOfLines>12</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function WinCaptionFromProcId( ByVal hInstance As Long ) As String</Declaration>
<Parameters>
<Parameter>
<Name>hInstance</Name>
<Type>Long</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>String</ReturnType>
</Procedure>
<Procedure>
<Name>GetWinCaptionFromWinHandle</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>3</CountOfDeclarationLines>
<CountOfLines>10</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function GetWinCaptionFromWinHandle( ByVal winHndl As Long ) As String</Declaration>
<Parameters>
<Parameter>
<Name>winHndl</Name>
<Type>Long</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>String</ReturnType>
</Procedure>
<Procedure>
<Name>UserName</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>6</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function UserName() As String</Declaration>
<Parameters>
</Parameters>
<ReturnType>String</ReturnType>
</Procedure>
<Procedure>
<Name>ComputerName</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>7</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function ComputerName() As String</Declaration>
<Parameters>
</Parameters>
<ReturnType>String</ReturnType>
</Procedure>
<Procedure>
<Name>FindExe</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>4</CountOfDeclarationLines>
<CountOfLines>18</CountOfLines>
<CommentLines>
<CommentLine>Resturns exectuable for passed data file. Returns null string if no application found</CommentLine>
</CommentLines>
<Declaration>Public Function FindExe( ByVal FilePath As String, Optional ByVal dirPath As String = &quot;&quot; ) As String</Declaration>
<Parameters>
<Parameter>
<Name>FilePath</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>dirPath</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>&quot;&quot;</DefaultValue>
</Parameter>
</Parameters>
<ReturnType>String</ReturnType>
</Procedure>
<Procedure>
<Name>ActiveWindowHandle</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>8</CountOfLines>
<CommentLines>
<CommentLine>Retrieves the window handle to the active window attached to the calling thread&apos;s message queue.</CommentLine>
<CommentLine>You can quickly learn whether a specific form is still the active window</CommentLine>
<CommentLine>using the following expression if the host application supports a handle property (Access does):</CommentLine>
<CommentLine>GetActiveWindow() = | &lt;&gt; form.hWND</CommentLine>
</CommentLines>
<Declaration>Public Function ActiveWindowHandle()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>TempPath</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>8</CountOfLines>
<CommentLines>
<CommentLine>Returns path to system&apos;s temporary folder.</CommentLine>
</CommentLines>
<Declaration>Public Function TempPath() As String</Declaration>
<Parameters>
</Parameters>
<ReturnType>String</ReturnType>
</Procedure>
<Procedure>
<Name>TempFileName</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>3</CountOfDeclarationLines>
<CountOfLines>20</CountOfLines>
<CommentLines>
<CommentLine>Creates a name for a temporary file.</CommentLine>
<CommentLine>If a unique file name is generated, an empty file is created and the handle to it is released;</CommentLine>
<CommentLine>otherwise, only a file name is generated.</CommentLine>
</CommentLines>
<Declaration>Public Function TempFileName( Optional ByVal prefix As String = &quot;&quot; ) As String</Declaration>
<Parameters>
<Parameter>
<Name>prefix</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>&quot;&quot;</DefaultValue>
</Parameter>
</Parameters>
<ReturnType>String</ReturnType>
</Procedure>
<Procedure>
<Name>DesktopWindowHandle</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>6</CountOfLines>
<CommentLines>
<CommentLine>Retrieves a handle to the desktop window. The desktop window covers the entire screen.</CommentLine>
<CommentLine>The desktop window is the area on top of which other windows are painted.</CommentLine>
</CommentLines>
<Declaration>Public Function DesktopWindowHandle() As Long</Declaration>
<Parameters>
</Parameters>
<ReturnType>Long</ReturnType>
</Procedure>
<Procedure>
<Name>SetWindowState</Name>
<Scope></Scope>
<Type>Function</Type>
<CountOfDeclarationLines>5</CountOfDeclarationLines>
<CountOfLines>12</CountOfLines>
<CommentLines>
<CommentLine>Sets the specified window&apos;s show state.</CommentLine>
<CommentLine>Returns True if operation was successfully executed</CommentLine>
</CommentLines>
<Declaration>Function SetWindowState( ByVal ClassName As String, ByVal WindowsState As WindowShowState, Optional ByVal WindowName As String = vbNullString ) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>ClassName</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>WindowsState</Name>
<Type>WindowShowState</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>WindowName</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>vbNullString</DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>SleepApplication</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>3</CountOfDeclarationLines>
<CountOfLines>6</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub SleepApplication( ByVal miliseconds As Long )</Declaration>
<Parameters>
<Parameter>
<Name>miliseconds</Name>
<Type>Long</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>FocusWindow</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>3</CountOfDeclarationLines>
<CountOfLines>6</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function FocusWindow( ByVal winHandle As Long ) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>winHandle</Name>
<Type>Long</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>ShellAndWait</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>4</CountOfDeclarationLines>
<CountOfLines>199</CountOfLines>
<CommentLines>
<CommentLine>TODO Revise</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : ShellAndWait</CommentLine>
<CommentLine> Purpose   : By Chip Pearson, chip@cpearson.com, www.cpearson.com</CommentLine>
<CommentLine> This page on the web site: www.cpearson.com/Excel/ShellAndWait.aspx</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
<Declaration>Public Function ShellAndWait(shellCommand As String, TimeOutMs As Long, ShellWindowState As VbAppWinStyle, BreakKey As ActionOnBreak) As ShellAndWaitResult</Declaration>
<Parameters>
<Parameter>
<Name>shellCommand</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>TimeOutMs</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>ShellWindowState</Name>
<Type>VbAppWinStyle</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>BreakKey</Name>
<Type>ActionOnBreak</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>ShellAndWaitResult</ReturnType>
</Procedure>
<Procedure>
<Name>DotNetVersion</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>20</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function DotNetVersion() As String</Declaration>
<Parameters>
</Parameters>
<ReturnType>String</ReturnType>
</Procedure>
<Procedure>
<Name>ShellRun</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>4</CountOfDeclarationLines>
<CountOfLines>24</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function ShellRun( ByVal ExecutablePath As String, Optional ByVal StdInput As String = vbNullString ) As String</Declaration>
<Parameters>
<Parameter>
<Name>ExecutablePath</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>StdInput</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>vbNullString</DefaultValue>
</Parameter>
</Parameters>
<ReturnType>String</ReturnType>
</Procedure>
<Procedure>
<Name>ActiveDirectoryTest</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>34</CountOfLines>
<CommentLines>
<CommentLine>Active Directroy all attributes</CommentLine>
<CommentLine>https://msdn.microsoft.com/en-us/library/ms675090(v=vs.85).aspx</CommentLine>
<CommentLine>List of LDAP Attributes Supported by ADMP</CommentLine>
<CommentLine>https://www.manageengine.com/products/ad-manager/help/csv-import-management/active-directory-ldap-attributes.html</CommentLine>
</CommentLines>
<Declaration>Private Sub ActiveDirectoryTest()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
</Procedures>
<CommentLines>
<CommentLine>ref:</CommentLine>
<CommentLine>http://www.techrepublic.com/blog/10-things/10-plus-of-my-favorite-windows-api-functions-to-use-in-office-applications/</CommentLine>
</CommentLines>
</CodeModule>
</File>
<File>
<Name>UtilFile</Name>
<FileName></FileName>
<PathFileName></PathFileName>
<Type>ClassModule</Type>
<Properties>
<Property>
<Name>Name</Name>
<Value>UtilFile</Value>
</Property>
<Property>
<Name>Instancing</Name>
<Value>1</Value>
</Property>
</Properties>
<CodeModule>
<CountOfDeclarationLines>22</CountOfDeclarationLines>
<CountOfLines>740</CountOfLines>
<Interfaces>
</Interfaces>
<Events>
</Events>
<Procedures>
<Procedure>
<Name>FileSys</Name>
<Scope>Private</Scope>
<Type>PropertyGet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>16</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Property Get FileSys() As Scripting.FileSystemObject</Declaration>
<Parameters>
</Parameters>
<ReturnType>Scripting.FileSystemObject</ReturnType>
</Procedure>
<Procedure>
<Name>Class_Terminate</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub Class_Terminate()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>DefaultExcelExt</Name>
<Scope></Scope>
<Type>PropertyGet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Property Get DefaultExcelExt() As String</Declaration>
<Parameters>
</Parameters>
<ReturnType>String</ReturnType>
</Procedure>
<Procedure>
<Name>DefaultMSProjectExt</Name>
<Scope></Scope>
<Type>PropertyGet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Property Get DefaultMSProjectExt() As String</Declaration>
<Parameters>
</Parameters>
<ReturnType>String</ReturnType>
</Procedure>
<Procedure>
<Name>DefaultTextFileExt</Name>
<Scope></Scope>
<Type>PropertyGet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Property Get DefaultTextFileExt() As String</Declaration>
<Parameters>
</Parameters>
<ReturnType>String</ReturnType>
</Procedure>
<Procedure>
<Name>LastPath</Name>
<Scope></Scope>
<Type>PropertyGet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>6</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Property Get LastPath() As String</Declaration>
<Parameters>
</Parameters>
<ReturnType>String</ReturnType>
</Procedure>
<Procedure>
<Name>LastPath</Name>
<Scope></Scope>
<Type>PropertyLet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Property Let LastPath(ByVal value As String)</Declaration>
<Parameters>
<Parameter>
<Name>value</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>CreateTextFile</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>5</CountOfDeclarationLines>
<CountOfLines>8</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function CreateTextFile( ByVal path As String, Optional overwrite As Boolean = True, Optional unicode As Boolean = False ) As Object</Declaration>
<Parameters>
<Parameter>
<Name>path</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>overwrite</Name>
<Type>Boolean</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>True</DefaultValue>
</Parameter>
<Parameter>
<Name>unicode</Name>
<Type>Boolean</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>False</DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Object</ReturnType>
</Procedure>
<Procedure>
<Name>GetFilePathViaDialogWindow</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>9</CountOfDeclarationLines>
<CountOfLines>46</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : GetFilePathViaDialogWindow</CommentLine>
<CommentLine> Descr.    : Pop-up file dialog window returns the path of the selected file</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
<Declaration>Public Function GetFilePathViaDialogWindow( Optional ByVal InitialFilename As String = vbNullString, Optional ByVal title As String = &quot;Choose file...&quot;, Optional ByVal buttonName As String = &quot;Select...&quot;, Optional ByVal InitialView As Long = Office.MsoFileDialogView.msoFileDialogViewDetails, Optional ByVal FilterDesc As String = &quot;All&quot;, Optional ByVal FilterExt As String = &quot;*.*&quot;, Optional ByVal FilterPos As Long = 1 ) As String</Declaration>
<Parameters>
<Parameter>
<Name>InitialFilename</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>vbNullString</DefaultValue>
</Parameter>
<Parameter>
<Name>title</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>&quot;Choose file...&quot;</DefaultValue>
</Parameter>
<Parameter>
<Name>buttonName</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>&quot;Select...&quot;</DefaultValue>
</Parameter>
<Parameter>
<Name>InitialView</Name>
<Type>Long</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>Office.MsoFileDialogView.msoFileDialogViewDetails</DefaultValue>
</Parameter>
<Parameter>
<Name>FilterDesc</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>&quot;All&quot;</DefaultValue>
</Parameter>
<Parameter>
<Name>FilterExt</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>&quot;*.*&quot;</DefaultValue>
</Parameter>
<Parameter>
<Name>FilterPos</Name>
<Type>Long</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>1</DefaultValue>
</Parameter>
</Parameters>
<ReturnType>String</ReturnType>
</Procedure>
<Procedure>
<Name>GetMultipleFilePathsViaDialogWindow</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>9</CountOfDeclarationLines>
<CountOfLines>50</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : GetMultipleFilePathsViaDialogWindow</CommentLine>
<CommentLine> Descr.    : Pop-up file dialog window returns an array of selected fiel paths</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
<Declaration>Public Function GetMultipleFilePathsViaDialogWindow( Optional ByVal InitialFilename As String = vbNullString, Optional ByVal title As String = &quot;Choose file(s)...&quot;, Optional ByVal buttonName As String = &quot;Select...&quot;, Optional ByVal InitialView As Long = Office.MsoFileDialogView.msoFileDialogViewDetails, Optional ByVal FilterDesc As String = &quot;All&quot;, Optional ByVal FilterExt As String = &quot;*.*&quot;, Optional ByVal FilterPos As Long = 1 ) As Variant</Declaration>
<Parameters>
<Parameter>
<Name>InitialFilename</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>vbNullString</DefaultValue>
</Parameter>
<Parameter>
<Name>title</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>&quot;Choose file(s)...&quot;</DefaultValue>
</Parameter>
<Parameter>
<Name>buttonName</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>&quot;Select...&quot;</DefaultValue>
</Parameter>
<Parameter>
<Name>InitialView</Name>
<Type>Long</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>Office.MsoFileDialogView.msoFileDialogViewDetails</DefaultValue>
</Parameter>
<Parameter>
<Name>FilterDesc</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>&quot;All&quot;</DefaultValue>
</Parameter>
<Parameter>
<Name>FilterExt</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>&quot;*.*&quot;</DefaultValue>
</Parameter>
<Parameter>
<Name>FilterPos</Name>
<Type>Long</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>1</DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Variant</ReturnType>
</Procedure>
<Procedure>
<Name>GetFolderPathViaDialogWindow</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>6</CountOfDeclarationLines>
<CountOfLines>42</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : GetFolderPathViaDialogWindow</CommentLine>
<CommentLine> Descr.    : Pop-up file dialog window returns the path of a selected folder</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
<Declaration>Public Function GetFolderPathViaDialogWindow( Optional ByVal InitialFilename As String = vbNullString, Optional ByVal title As String = &quot;Choose folder...&quot;, Optional ByVal buttonName As String = &quot;Select...&quot;, Optional ByVal InitialView As Long = Office.MsoFileDialogView.msoFileDialogViewDetails ) As String</Declaration>
<Parameters>
<Parameter>
<Name>InitialFilename</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>vbNullString</DefaultValue>
</Parameter>
<Parameter>
<Name>title</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>&quot;Choose folder...&quot;</DefaultValue>
</Parameter>
<Parameter>
<Name>buttonName</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>&quot;Select...&quot;</DefaultValue>
</Parameter>
<Parameter>
<Name>InitialView</Name>
<Type>Long</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>Office.MsoFileDialogView.msoFileDialogViewDetails</DefaultValue>
</Parameter>
</Parameters>
<ReturnType>String</ReturnType>
</Procedure>
<Procedure>
<Name>SaveAsFilePathViaDialogWindow</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>6</CountOfDeclarationLines>
<CountOfLines>34</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : SaveAsFilePathViaDialogWindow</CommentLine>
<CommentLine> Descr.    : Pop-up file dialog window returns the save as path</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
<Declaration>Public Function SaveAsFilePathViaDialogWindow( Optional ByVal InitialFilename As String = vbNullString, Optional ByVal title As String = &quot;Choose save path...&quot;, Optional ByVal buttonName As String = &quot;Save&quot;, Optional ByVal InitialView As Long = Office.MsoFileDialogView.msoFileDialogViewDetails ) As String</Declaration>
<Parameters>
<Parameter>
<Name>InitialFilename</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>vbNullString</DefaultValue>
</Parameter>
<Parameter>
<Name>title</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>&quot;Choose save path...&quot;</DefaultValue>
</Parameter>
<Parameter>
<Name>buttonName</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>&quot;Save&quot;</DefaultValue>
</Parameter>
<Parameter>
<Name>InitialView</Name>
<Type>Long</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>Office.MsoFileDialogView.msoFileDialogViewDetails</DefaultValue>
</Parameter>
</Parameters>
<ReturnType>String</ReturnType>
</Procedure>
<Procedure>
<Name>CopyFile</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>5</CountOfDeclarationLines>
<CountOfLines>24</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : CopyFile</CommentLine>
<CommentLine> Descr.    : Copy a file on disk from one location to another.</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
<Declaration>Public Function CopyFile( SourceFilePath As String, DestFilePath As String, Optional overwrite As Boolean = True ) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>SourceFilePath</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>DestFilePath</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>overwrite</Name>
<Type>Boolean</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>True</DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>CopyFileXCopy</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>5</CountOfDeclarationLines>
<CountOfLines>35</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : CopyFileXCopy</CommentLine>
<CommentLine> Descr.    : Copy a file on disk from one location to another using xcopy shell command</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
<Declaration>Public Function CopyFileXCopy( SourceFilePath As String, DestFilePath As String, Optional overwrite As Boolean = True ) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>SourceFilePath</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>DestFilePath</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>overwrite</Name>
<Type>Boolean</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>True</DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>BackupFile</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>4</CountOfDeclarationLines>
<CountOfLines>33</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : BackupFile</CommentLine>
<CommentLine> Descr.    : makes a backup of a given file path and returns the new file path</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
<Declaration>Public Function BackupFile( ByVal path As String, Optional ByVal dstFolder As String = vbNullString ) As String</Declaration>
<Parameters>
<Parameter>
<Name>path</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>dstFolder</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>vbNullString</DefaultValue>
</Parameter>
</Parameters>
<ReturnType>String</ReturnType>
</Procedure>
<Procedure>
<Name>GetFolderPath</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>3</CountOfDeclarationLines>
<CountOfLines>25</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : GetFolderPath</CommentLine>
<CommentLine> Descr.    : returns the deepest directory path without \ at the end</CommentLine>
<CommentLine>   of the supplied path parameter without path parameter</CommentLine>
<CommentLine>   Returns vbnullstring if path is not valid</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
<Declaration>Public Function GetFolderPath( ByVal path As String ) As String</Declaration>
<Parameters>
<Parameter>
<Name>path</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>String</ReturnType>
</Procedure>
<Procedure>
<Name>GetFolder</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>12</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function GetFolder(ByVal path As String) As folder</Declaration>
<Parameters>
<Parameter>
<Name>path</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>folder</ReturnType>
</Procedure>
<Procedure>
<Name>GetFile</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>11</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function GetFile(ByVal path As String) As File</Declaration>
<Parameters>
<Parameter>
<Name>path</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>File</ReturnType>
</Procedure>
<Procedure>
<Name>GetFileExtension</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>15</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : GetFileExtension</CommentLine>
<CommentLine> Descr.    : Returns the file extension of a provided file path or file name</CommentLine>
<CommentLine>   Returns vbnullstring if path is a directory</CommentLine>
<CommentLine>   No check is done if file exitst on purpose, so procedure can be used to extract ext</CommentLine>
<CommentLine>   from provided string paths</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
<Declaration>Public Function GetFileExtension(path As String) As String</Declaration>
<Parameters>
<Parameter>
<Name>path</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>String</ReturnType>
</Procedure>
<Procedure>
<Name>FileExists</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function FileExists(ByVal path As String) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>path</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>FolderExists</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function FolderExists(ByVal path As String) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>path</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>GetFiles</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>5</CountOfDeclarationLines>
<CountOfLines>46</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure   : GetFiles</CommentLine>
<CommentLine> Description : returns a collection of Scripting.file objects in a folder</CommentLine>
<CommentLine>   matching the ExtensionFilter, if no filter is provieded then all files are returned</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
<Declaration>Public Function GetFiles( ByVal FolderPath As String, Optional ByVal Recurse As Boolean = False, Optional ByVal ExtensionFilter As String = &quot;&quot; ) As Collection</Declaration>
<Parameters>
<Parameter>
<Name>FolderPath</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Recurse</Name>
<Type>Boolean</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>False</DefaultValue>
</Parameter>
<Parameter>
<Name>ExtensionFilter</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>&quot;&quot;</DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Collection</ReturnType>
</Procedure>
<Procedure>
<Name>GetFileName</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>13</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : GetFileName</CommentLine>
<CommentLine> Descr.    : Returns the file name with extension of a provided file path or file name</CommentLine>
<CommentLine>   Returns vbnullstring if path is a directory</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
<Declaration>Public Function GetFileName(ByRef path As String) As String</Declaration>
<Parameters>
<Parameter>
<Name>path</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>String</ReturnType>
</Procedure>
<Procedure>
<Name>GetBaseName</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>9</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : GetBaseName</CommentLine>
<CommentLine> Descr.    : Returns the file name w/o extension of a provided file path or file name</CommentLine>
<CommentLine>   Returns vbnullstring if path is a directory</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
<Declaration>Public Function GetBaseName(path As String) As String</Declaration>
<Parameters>
<Parameter>
<Name>path</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>String</ReturnType>
</Procedure>
<Procedure>
<Name>GetUNCPath</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>22</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : GetUNCPath</CommentLine>
<CommentLine> Purpose   : Returns the Universal Naming Convention path, matching the assigned Letters</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
<Declaration>Public Function GetUNCPath(ByVal localPath As String) As String</Declaration>
<Parameters>
<Parameter>
<Name>localPath</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>String</ReturnType>
</Procedure>
<Procedure>
<Name>GetFileNamesPathsFromFolder</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>4</CountOfDeclarationLines>
<CountOfLines>25</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function GetFileNamesPathsFromFolder( ByVal dirPath As String, ByVal fileNames As Variant ) As Variant</Declaration>
<Parameters>
<Parameter>
<Name>dirPath</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>fileNames</Name>
<Type>Variant</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Variant</ReturnType>
</Procedure>
<Procedure>
<Name>IsWorkbookPath</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>8</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : IsWorkbookPath</CommentLine>
<CommentLine> Descr.    : returns TRUE if the given path is a valid path of an excel workbook</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
<Declaration>Public Function IsWorkbookPath(ByVal path As String) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>path</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>IsMSProjectPath</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>8</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : IsMSProjectPath</CommentLine>
<CommentLine> Descr.    : returns TRUE if the given path is a valid path of an MS Project file</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
<Declaration>Public Function IsMSProjectPath(ByVal path As String) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>path</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>IsFileOfType</Name>
<Scope>Private</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>4</CountOfDeclarationLines>
<CountOfLines>14</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Function IsFileOfType( ByVal path As String, ByVal fileType As String ) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>path</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>fileType</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>IsTempFilePath</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>9</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : IsTempFilePath</CommentLine>
<CommentLine> Descr.    : returns TRUE if the given path is a temporary file</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
<Declaration>Public Function IsTempFilePath(ByVal path As String) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>path</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>GetWorkbookPathsFromFolder</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>4</CountOfDeclarationLines>
<CountOfLines>54</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : GetWorkbookPathsFromFolder</CommentLine>
<CommentLine> Descr.    : Returns an array containing all excel workbook paths in a directory [and sub dirs]</CommentLine>
<CommentLine>   If no start folder path is provided the current sheet directory is searched for WBs</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
<Declaration>Public Function GetWorkbookPathsFromFolder( Optional ByVal FolderPath As String = vbNullString, Optional ByVal searchSubFolders As Boolean = False ) As Variant</Declaration>
<Parameters>
<Parameter>
<Name>FolderPath</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>vbNullString</DefaultValue>
</Parameter>
<Parameter>
<Name>searchSubFolders</Name>
<Type>Boolean</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>False</DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Variant</ReturnType>
</Procedure>
<Procedure>
<Name>GetFileContent</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>3</CountOfDeclarationLines>
<CountOfLines>27</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : GetFileContent</CommentLine>
<CommentLine> Purpose   : Returns content of a file as a string</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
<Declaration>Public Function GetFileContent( ByVal FilePath As String ) As String</Declaration>
<Parameters>
<Parameter>
<Name>FilePath</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>String</ReturnType>
</Procedure>
<Procedure>
<Name>GetFileBytes</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>3</CountOfDeclarationLines>
<CountOfLines>32</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : GetFileBytes</CommentLine>
<CommentLine> Purpose   : Returns content of a file as a byte array</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
<Declaration>Public Function GetFileBytes( ByVal FilePath As String ) As Byte()</Declaration>
<Parameters>
<Parameter>
<Name>FilePath</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Byte()</ReturnType>
</Procedure>
<Procedure>
<Name>CreateFolder</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>40</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function CreateFolder(ByVal path As String) As folder</Declaration>
<Parameters>
<Parameter>
<Name>path</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>folder</ReturnType>
</Procedure>
<Procedure>
<Name>HasWritePermissions</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>24</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function HasWritePermissions(ByVal path As String) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>path</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
</Procedures>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Module    : FileManager</CommentLine>
<CommentLine> Author    : Ivanov, Bozhan</CommentLine>
<CommentLine> Date      : 29.08.2014</CommentLine>
<CommentLine> LastUpdate: 29.08.2014</CommentLine>
<CommentLine> Purpose   : Provides a number of functions and precedures to help manage</CommentLine>
<CommentLine>   file and folder paths and determine thir existance</CommentLine>
<CommentLine> References:</CommentLine>
<CommentLine>   FileSystemObject</CommentLine>
<CommentLine>   https://docs.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/windows-scripting/6tkce7xa%28v%3dvs.84%29</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
</CodeModule>
</File>
<File>
<Name>Sheet3</Name>
<FileName></FileName>
<PathFileName></PathFileName>
<Type>VBADocument</Type>
<Properties>
<Property>
<Name>Creator</Name>
<Value>1480803660</Value>
</Property>
<Property>
<Name>CodeName</Name>
<Value>Sheet3</Value>
</Property>
<Property>
<Name>_CodeName</Name>
<Value>Sheet3</Value>
</Property>
<Property>
<Name>Index</Name>
<Value>2</Value>
</Property>
<Property>
<Name>Name</Name>
<Value>Global Settings</Value>
</Property>
<Property>
<Name>OnDoubleClick</Name>
<Value></Value>
</Property>
<Property>
<Name>OnSheetActivate</Name>
<Value></Value>
</Property>
<Property>
<Name>OnSheetDeactivate</Name>
<Value></Value>
</Property>
<Property>
<Name>ProtectContents</Name>
<Value>False</Value>
</Property>
<Property>
<Name>ProtectDrawingObjects</Name>
<Value>False</Value>
</Property>
<Property>
<Name>ProtectionMode</Name>
<Value>False</Value>
</Property>
<Property>
<Name>ProtectScenarios</Name>
<Value>False</Value>
</Property>
<Property>
<Name>Visible</Name>
<Value>-1</Value>
</Property>
<Property>
<Name>TransitionExpEval</Name>
<Value>False</Value>
</Property>
<Property>
<Name>AutoFilterMode</Name>
<Value>False</Value>
</Property>
<Property>
<Name>EnableCalculation</Name>
<Value>True</Value>
</Property>
<Property>
<Name>CircularReference</Name>
<Value></Value>
</Property>
<Property>
<Name>ConsolidationFunction</Name>
<Value>-4157</Value>
</Property>
<Property>
<Name>ConsolidationOptions</Name>
<Value></Value>
</Property>
<Property>
<Name>ConsolidationSources</Name>
<Value></Value>
</Property>
<Property>
<Name>DisplayAutomaticPageBreaks</Name>
<Value>False</Value>
</Property>
<Property>
<Name>EnableAutoFilter</Name>
<Value>False</Value>
</Property>
<Property>
<Name>EnableSelection</Name>
<Value>0</Value>
</Property>
<Property>
<Name>EnableOutlining</Name>
<Value>False</Value>
</Property>
<Property>
<Name>EnablePivotTable</Name>
<Value>False</Value>
</Property>
<Property>
<Name>FilterMode</Name>
<Value>False</Value>
</Property>
<Property>
<Name>OnCalculate</Name>
<Value></Value>
</Property>
<Property>
<Name>OnData</Name>
<Value></Value>
</Property>
<Property>
<Name>OnEntry</Name>
<Value></Value>
</Property>
<Property>
<Name>Range</Name>
<Value></Value>
</Property>
<Property>
<Name>ScrollArea</Name>
<Value></Value>
</Property>
<Property>
<Name>StandardHeight</Name>
<Value>15</Value>
</Property>
<Property>
<Name>StandardWidth</Name>
<Value>8,43</Value>
</Property>
<Property>
<Name>TransitionFormEntry</Name>
<Value>False</Value>
</Property>
<Property>
<Name>Type</Name>
<Value>-4167</Value>
</Property>
<Property>
<Name>DisplayPageBreaks</Name>
<Value>False</Value>
</Property>
<Property>
<Name>_DisplayRightToLeft</Name>
<Value>False</Value>
</Property>
<Property>
<Name>AutoFilter</Name>
<Value></Value>
</Property>
<Property>
<Name>DisplayRightToLeft</Name>
<Value>False</Value>
</Property>
<Property>
<Name>EnableFormatConditionsCalculation</Name>
<Value>True</Value>
</Property>
<Property>
<Name>PrintedCommentPages</Name>
<Value>0</Value>
</Property>
</Properties>
<CodeModule>
<CountOfDeclarationLines>0</CountOfDeclarationLines>
<CountOfLines>0</CountOfLines>
<Interfaces>
</Interfaces>
<Events>
</Events>
<Procedures>
</Procedures>
<CommentLines>
</CommentLines>
</CodeModule>
</File>
<File>
<Name>GlobalDeclarations</Name>
<FileName></FileName>
<PathFileName></PathFileName>
<Type>StdModule</Type>
<Properties>
<Property>
<Name>Name</Name>
<Value>GlobalDeclarations</Value>
</Property>
</Properties>
<CodeModule>
<CountOfDeclarationLines>66</CountOfDeclarationLines>
<CountOfLines>138</CountOfLines>
<Interfaces>
</Interfaces>
<Events>
</Events>
<Procedures>
<Procedure>
<Name>Temp</Name>
<Scope>Public</Scope>
<Type>PropertyGet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>5</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Property Get Temp() As Collection</Declaration>
<Parameters>
</Parameters>
<ReturnType>Collection</ReturnType>
</Procedure>
<Procedure>
<Name>Util</Name>
<Scope>Public</Scope>
<Type>PropertyGet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>5</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Property Get Util() As Utility</Declaration>
<Parameters>
</Parameters>
<ReturnType>Utility</ReturnType>
</Procedure>
<Procedure>
<Name>Setting</Name>
<Scope>Public</Scope>
<Type>PropertyGet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>5</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Property Get Setting(ByVal rid As SettingRowId) As Variant</Declaration>
<Parameters>
<Parameter>
<Name>rid</Name>
<Type>SettingRowId</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Variant</ReturnType>
</Procedure>
<Procedure>
<Name>ErrHandler</Name>
<Scope>Public</Scope>
<Type>PropertyGet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>5</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Property Get ErrHandler() As ErrorHandler</Declaration>
<Parameters>
</Parameters>
<ReturnType>ErrorHandler</ReturnType>
</Procedure>
<Procedure>
<Name>ClassGen</Name>
<Scope>Public</Scope>
<Type>PropertyGet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>5</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Property Get ClassGen() As ClassGenerator</Declaration>
<Parameters>
</Parameters>
<ReturnType>ClassGenerator</ReturnType>
</Procedure>
<Procedure>
<Name>InfoErrMsg</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>23</CountOfLines>
<CommentLines>
<CommentLine>====================================================================================================</CommentLine>
</CommentLines>
<Declaration>Public Function InfoErrMsg() As String</Declaration>
<Parameters>
</Parameters>
<ReturnType>String</ReturnType>
</Procedure>
<Procedure>
<Name>ButtonEventHandler</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>7</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub ButtonEventHandler()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>GenerateSettignsClass</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>6</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub GenerateSettignsClass()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>Nz</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>5</CountOfLines>
<CommentLines>
<CommentLine>Replacement for the Nz() function from MS Access library</CommentLine>
</CommentLines>
<Declaration>Public Function Nz(ByVal value As Variant, Optional ByVal ValueIfNull = &quot;&quot;)</Declaration>
<Parameters>
<Parameter>
<Name>value</Name>
<Type>Variant</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>ValueIfNull</Name>
<Type></Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>&quot;&quot;</DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>pmUI_onLoad</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>5</CountOfLines>
<CommentLines>
<CommentLine>aqcuire the ribbon pointer on ribbon load</CommentLine>
</CommentLines>
<Declaration>Private Sub pmUI_onLoad(ribbon As IRibbonUI)</Declaration>
<Parameters>
<Parameter>
<Name>ribbon</Name>
<Type>IRibbonUI</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
</Procedures>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Module    : GlobalVariables</CommentLine>
<CommentLine> Author    : Ivanov, Bozhan</CommentLine>
<CommentLine> Purpose   : Initialization of global variables, constants and procedures</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
</CodeModule>
</File>
<File>
<Name>Sheet2</Name>
<FileName></FileName>
<PathFileName></PathFileName>
<Type>VBADocument</Type>
<Properties>
<Property>
<Name>Creator</Name>
<Value>1480803660</Value>
</Property>
<Property>
<Name>CodeName</Name>
<Value>Sheet2</Value>
</Property>
<Property>
<Name>_CodeName</Name>
<Value>Sheet2</Value>
</Property>
<Property>
<Name>Index</Name>
<Value>3</Value>
</Property>
<Property>
<Name>Name</Name>
<Value>Report Settings</Value>
</Property>
<Property>
<Name>OnDoubleClick</Name>
<Value></Value>
</Property>
<Property>
<Name>OnSheetActivate</Name>
<Value></Value>
</Property>
<Property>
<Name>OnSheetDeactivate</Name>
<Value></Value>
</Property>
<Property>
<Name>ProtectContents</Name>
<Value>False</Value>
</Property>
<Property>
<Name>ProtectDrawingObjects</Name>
<Value>False</Value>
</Property>
<Property>
<Name>ProtectionMode</Name>
<Value>False</Value>
</Property>
<Property>
<Name>ProtectScenarios</Name>
<Value>False</Value>
</Property>
<Property>
<Name>Visible</Name>
<Value>-1</Value>
</Property>
<Property>
<Name>TransitionExpEval</Name>
<Value>False</Value>
</Property>
<Property>
<Name>AutoFilterMode</Name>
<Value>False</Value>
</Property>
<Property>
<Name>EnableCalculation</Name>
<Value>True</Value>
</Property>
<Property>
<Name>CircularReference</Name>
<Value></Value>
</Property>
<Property>
<Name>ConsolidationFunction</Name>
<Value>-4157</Value>
</Property>
<Property>
<Name>ConsolidationOptions</Name>
<Value></Value>
</Property>
<Property>
<Name>ConsolidationSources</Name>
<Value></Value>
</Property>
<Property>
<Name>DisplayAutomaticPageBreaks</Name>
<Value>False</Value>
</Property>
<Property>
<Name>EnableAutoFilter</Name>
<Value>False</Value>
</Property>
<Property>
<Name>EnableSelection</Name>
<Value>0</Value>
</Property>
<Property>
<Name>EnableOutlining</Name>
<Value>False</Value>
</Property>
<Property>
<Name>EnablePivotTable</Name>
<Value>False</Value>
</Property>
<Property>
<Name>FilterMode</Name>
<Value>False</Value>
</Property>
<Property>
<Name>OnCalculate</Name>
<Value></Value>
</Property>
<Property>
<Name>OnData</Name>
<Value></Value>
</Property>
<Property>
<Name>OnEntry</Name>
<Value></Value>
</Property>
<Property>
<Name>Range</Name>
<Value></Value>
</Property>
<Property>
<Name>ScrollArea</Name>
<Value></Value>
</Property>
<Property>
<Name>StandardHeight</Name>
<Value>15</Value>
</Property>
<Property>
<Name>StandardWidth</Name>
<Value>8,43</Value>
</Property>
<Property>
<Name>TransitionFormEntry</Name>
<Value>False</Value>
</Property>
<Property>
<Name>Type</Name>
<Value>-4167</Value>
</Property>
<Property>
<Name>DisplayPageBreaks</Name>
<Value>False</Value>
</Property>
<Property>
<Name>_DisplayRightToLeft</Name>
<Value>False</Value>
</Property>
<Property>
<Name>AutoFilter</Name>
<Value></Value>
</Property>
<Property>
<Name>DisplayRightToLeft</Name>
<Value>False</Value>
</Property>
<Property>
<Name>EnableFormatConditionsCalculation</Name>
<Value>True</Value>
</Property>
<Property>
<Name>PrintedCommentPages</Name>
<Value>0</Value>
</Property>
</Properties>
<CodeModule>
<CountOfDeclarationLines>0</CountOfDeclarationLines>
<CountOfLines>0</CountOfLines>
<Interfaces>
</Interfaces>
<Events>
</Events>
<Procedures>
</Procedures>
<CommentLines>
</CommentLines>
</CodeModule>
</File>
<File>
<Name>frmProgressBar</Name>
<FileName></FileName>
<PathFileName></PathFileName>
<Type>MSForm</Type>
<Properties>
<Property>
<Value></Value>
</Property>
</Properties>
<CodeModule>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>13</CountOfLines>
<Interfaces>
</Interfaces>
<Events>
</Events>
<Procedures>
<Procedure>
<Name>cmdCancel_Click</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub cmdCancel_Click()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>cmdOk_Click</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub cmdOk_Click()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>UserForm_Initialize</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub UserForm_Initialize()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
</Procedures>
<CommentLines>
</CommentLines>
</CodeModule>
<Controls>
<Control>
<Name>ProgressFrame</Name>
<ProgId>MSForms.Frame</ProgId>
<ClassName>Frame</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value></Value>
</Property>
</Properties>
</Control>
<Control>
<Name>lblStatus</Name>
<ProgId>MSForms.Label</ProgId>
<ClassName>Label</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value></Value>
</Property>
</Properties>
</Control>
<Control>
<Name>ProgressLabel</Name>
<ProgId>MSForms.Label</ProgId>
<ClassName>Label</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value></Value>
</Property>
</Properties>
</Control>
<Control>
<Name>lblResult</Name>
<ProgId>MSForms.Label</ProgId>
<ClassName>Label</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value></Value>
</Property>
</Properties>
</Control>
<Control>
<Name>cmdOk</Name>
<ProgId>MSForms.CommandButton</ProgId>
<ClassName>CommandButton</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Ok</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>ProgressBar</Name>
<ProgId>MSForms.Label</ProgId>
<ClassName>Label</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value></Value>
</Property>
</Properties>
</Control>
<Control>
<Name>img_Alert</Name>
<ProgId>MSForms.Image</ProgId>
<ClassName>Image</ClassName>
</Control>
<Control>
<Name>cmdCancel</Name>
<ProgId>MSForms.CommandButton</ProgId>
<ClassName>CommandButton</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Cancel</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>Image1</Name>
<ProgId>MSForms.Image</ProgId>
<ClassName>Image</ClassName>
</Control>
<Control>
<Name>img_Success</Name>
<ProgId>MSForms.Image</ProgId>
<ClassName>Image</ClassName>
</Control>
</Controls>
</File>
<File>
<Name>Executor</Name>
<FileName></FileName>
<PathFileName></PathFileName>
<Type>ClassModule</Type>
<Properties>
<Property>
<Name>Name</Name>
<Value>Executor</Value>
</Property>
<Property>
<Name>Instancing</Name>
<Value>1</Value>
</Property>
</Properties>
<CodeModule>
<CountOfDeclarationLines>5</CountOfDeclarationLines>
<CountOfLines>1031</CountOfLines>
<Interfaces>
</Interfaces>
<Events>
</Events>
<Procedures>
<Procedure>
<Name>SourcesFieldNames</Name>
<Scope></Scope>
<Type>PropertyGet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Property Get SourcesFieldNames() As Variant</Declaration>
<Parameters>
</Parameters>
<ReturnType>Variant</ReturnType>
</Procedure>
<Procedure>
<Name>MappingFieldNames</Name>
<Scope></Scope>
<Type>PropertyGet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Property Get MappingFieldNames() As Variant</Declaration>
<Parameters>
</Parameters>
<ReturnType>Variant</ReturnType>
</Procedure>
<Procedure>
<Name>ConditionsFieldNames</Name>
<Scope></Scope>
<Type>PropertyGet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Property Get ConditionsFieldNames() As Variant</Declaration>
<Parameters>
</Parameters>
<ReturnType>Variant</ReturnType>
</Procedure>
<Procedure>
<Name>FieldTypesFieldNames</Name>
<Scope></Scope>
<Type>PropertyGet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Property Get FieldTypesFieldNames() As Variant</Declaration>
<Parameters>
</Parameters>
<ReturnType>Variant</ReturnType>
</Procedure>
<Procedure>
<Name>ImportSources</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>66</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub ImportSources()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>GenerateDiscrepancyReport</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>120</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : GenerateDiscrepancyReport</CommentLine>
<CommentLine> Author    : Ivanov, Bozhan</CommentLine>
<CommentLine> Purpose   :</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
<Declaration>Public Sub GenerateDiscrepancyReport()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>CheckReportSettings</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>34</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub CheckReportSettings()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>CheckSourcesTableConsistency</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub CheckSourcesTableConsistency()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>CheckFieldMappingTableConsistency</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub CheckFieldMappingTableConsistency()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>CheckConditionsTableConsistency</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub CheckConditionsTableConsistency()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>CheckFieldTypesTableConsistency</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub CheckFieldTypesTableConsistency()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>ReportSettingsAreConsistentWithSources</Name>
<Scope>Private</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>26</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure   : ReportSettingsAreConsistentWithSources</CommentLine>
<CommentLine> Description : Returns false if worksheet names in report settings are used that are not</CommentLine>
<CommentLine>   defined as worksheet names in the sources table</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
<Declaration>Private Function ReportSettingsAreConsistentWithSources() As Boolean</Declaration>
<Parameters>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>ExistsDuplicateSource</Name>
<Scope>Private</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>38</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure   : ExistsDuplicateSource</CommentLine>
<CommentLine> Description : Checks for duplicate values on worksheet name and workbook path in sources table</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
<Declaration>Private Function ExistsDuplicateSource() As Boolean</Declaration>
<Parameters>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>ExistsDuplicateSourceWorksheet</Name>
<Scope>Private</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>12</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure   : ExistsDuplicateSourceWorksheet</CommentLine>
<CommentLine> Description : Checks for duplicate values in worksheet names in sources table</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
<Declaration>Private Function ExistsDuplicateSourceWorksheet() As Boolean</Declaration>
<Parameters>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>GetConditions</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>28</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------------------</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------------------</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
<Declaration>Public Function GetConditions() As Collection</Declaration>
<Parameters>
</Parameters>
<ReturnType>Collection</ReturnType>
</Procedure>
<Procedure>
<Name>GetConditionsByWorksheet</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>3</CountOfDeclarationLines>
<CountOfLines>27</CountOfLines>
<CommentLines>
<CommentLine>  Dim lo As ListObject</CommentLine>
<CommentLine>  Set lo = Util.Excel.GetListObjectByName(ThisWorkbook, Setting(ReportFieldConditionsTableName))</CommentLine>
<CommentLine></CommentLine>
<CommentLine>  Dim conds As New Collection</CommentLine>
<CommentLine>  Dim fc As FieldCondition</CommentLine>
<CommentLine>  Dim lr As ListRow</CommentLine>
<CommentLine>  For Each lr In lo.ListRows</CommentLine>
<CommentLine>    If StrComp( _</CommentLine>
<CommentLine>      sheetName, _</CommentLine>
<CommentLine>      lo.DataBodyRange(lr.Index, lo.ListColumns(&quot;Worksheet Name&quot;).Index).Value, _</CommentLine>
<CommentLine>      vbTextCompare _</CommentLine>
<CommentLine>    ) = 0 Then</CommentLine>
<CommentLine>      Set fc = New FieldCondition</CommentLine>
<CommentLine>      fc.Headers = lo.DataBodyRange(lr.Index, lo.ListColumns(&quot;Column Headers&quot;).Index).Value</CommentLine>
<CommentLine>      fc.WorksheetName = lo.DataBodyRange(lr.Index, lo.ListColumns(&quot;Worksheet Name&quot;).Index).Value</CommentLine>
<CommentLine>      fc.Operator = lo.DataBodyRange(lr.Index, lo.ListColumns(&quot;Condition&quot;).Index).Value</CommentLine>
<CommentLine>      fc.Value = lo.DataBodyRange(lr.Index, lo.ListColumns(&quot;Value&quot;).Index).Value</CommentLine>
<CommentLine>      conds.Add fc, &quot;cond&quot; &amp; CStr(lr.Index)</CommentLine>
<CommentLine>    End If</CommentLine>
<CommentLine>  Next lr</CommentLine>
<CommentLine></CommentLine>
<CommentLine>  Set GetConditionsByWorksheet = conds</CommentLine>
</CommentLines>
<Declaration>Public Function GetConditionsByWorksheet( ByVal sheetName As String ) As Collection</Declaration>
<Parameters>
<Parameter>
<Name>sheetName</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Collection</ReturnType>
</Procedure>
<Procedure>
<Name>GetSources</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>3</CountOfDeclarationLines>
<CountOfLines>51</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function GetSources( ByRef app As Excel.Application ) As Collection</Declaration>
<Parameters>
<Parameter>
<Name>app</Name>
<Type>Excel.Application</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Collection</ReturnType>
</Procedure>
<Procedure>
<Name>InitializeSourceWithSettingsAndConditions</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>3</CountOfDeclarationLines>
<CountOfLines>72</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure   : InitializeSourceWithSettingsAndConditions</CommentLine>
<CommentLine> Description : obtains settings from the Report Settings sheet and initializes</CommentLine>
<CommentLine>   WorksheetIO.HeadColumns with the retrieved settings for that specific source</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
<Declaration>Private Sub InitializeSourceWithSettingsAndConditions( ByRef src As WorksheetIO )</Declaration>
<Parameters>
<Parameter>
<Name>src</Name>
<Type>WorksheetIO</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>GetKeyHeadColumnsFromSources</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>3</CountOfDeclarationLines>
<CountOfLines>16</CountOfLines>
<CommentLines>
<CommentLine>Depricated</CommentLine>
</CommentLines>
<Declaration>Public Function GetKeyHeadColumnsFromSources( ByRef sources As Collection ) As Collection</Declaration>
<Parameters>
<Parameter>
<Name>sources</Name>
<Type>Collection</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Collection</ReturnType>
</Procedure>
<Procedure>
<Name>GetUniquePrimaryKeys</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>3</CountOfDeclarationLines>
<CountOfLines>16</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function GetUniquePrimaryKeys( ByRef hcs As Collection ) As Variant</Declaration>
<Parameters>
<Parameter>
<Name>hcs</Name>
<Type>Collection</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Variant</ReturnType>
</Procedure>
<Procedure>
<Name>GetDestination</Name>
<Scope>Private</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>3</CountOfDeclarationLines>
<CountOfLines>24</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Function GetDestination( ByRef app As Application ) As WorksheetIO</Declaration>
<Parameters>
<Parameter>
<Name>app</Name>
<Type>Application</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>WorksheetIO</ReturnType>
</Procedure>
<Procedure>
<Name>IsKeyMapping</Name>
<Scope>Private</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>4</CountOfDeclarationLines>
<CountOfLines>11</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Function IsKeyMapping( ByRef lo As ListObject, rowIdx As Long ) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>lo</Name>
<Type>ListObject</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>rowIdx</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>InitializeDestinationWithSettings</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>3</CountOfDeclarationLines>
<CountOfLines>55</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub InitializeDestinationWithSettings( ByRef dst As WorksheetIO )</Declaration>
<Parameters>
<Parameter>
<Name>dst</Name>
<Type>WorksheetIO</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>GetSheetKeyIndeces</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>29</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function GetSheetKeyIndeces() As Collection</Declaration>
<Parameters>
</Parameters>
<ReturnType>Collection</ReturnType>
</Procedure>
<Procedure>
<Name>GetSearchResultsForKeyInSources</Name>
<Scope>Private</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>5</CountOfDeclarationLines>
<CountOfLines>16</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Function GetSearchResultsForKeyInSources( ByRef sources As Collection, ByRef keyIndeces As Collection, ByRef value As Variant ) As Collection</Declaration>
<Parameters>
<Parameter>
<Name>sources</Name>
<Type>Collection</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>keyIndeces</Name>
<Type>Collection</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>value</Name>
<Type>Variant</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Collection</ReturnType>
</Procedure>
<Procedure>
<Name>GetNumberOfNonEmptyCollections</Name>
<Scope>Private</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>3</CountOfDeclarationLines>
<CountOfLines>15</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Function GetNumberOfNonEmptyCollections( ByRef cols As Collection ) As Integer</Declaration>
<Parameters>
<Parameter>
<Name>cols</Name>
<Type>Collection</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Integer</ReturnType>
</Procedure>
<Procedure>
<Name>ImportSearchResults</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>8</CountOfDeclarationLines>
<CountOfLines>29</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub ImportSearchResults( ByRef sources As Collection, ByRef keyIndeces As Collection, ByRef dst As WorksheetIO, ByVal searchTerm As Variant, ByRef conditions As Collection, ByRef rowOffset As Long )</Declaration>
<Parameters>
<Parameter>
<Name>sources</Name>
<Type>Collection</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>keyIndeces</Name>
<Type>Collection</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>dst</Name>
<Type>WorksheetIO</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>searchTerm</Name>
<Type>Variant</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>conditions</Name>
<Type>Collection</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>rowOffset</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>ImportMatchesFromSource</Name>
<Scope>Private</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>7</CountOfDeclarationLines>
<CountOfLines>19</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Function ImportMatchesFromSource( ByRef src As WorksheetIO, ByRef dst As WorksheetIO, ByRef matches As Collection, ByRef conditions As Collection, ByRef rowOffset As Long ) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>src</Name>
<Type>WorksheetIO</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>dst</Name>
<Type>WorksheetIO</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>matches</Name>
<Type>Collection</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>conditions</Name>
<Type>Collection</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>rowOffset</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>ImportMultipleMatchesFromSources</Name>
<Scope>Private</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>7</CountOfDeclarationLines>
<CountOfLines>28</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Function ImportMultipleMatchesFromSources( ByRef sources As Collection, ByRef dst As WorksheetIO, ByRef searchResults As Collection, ByRef conditions As Collection, ByRef rowOffset As Long ) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>sources</Name>
<Type>Collection</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>dst</Name>
<Type>WorksheetIO</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>searchResults</Name>
<Type>Collection</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>conditions</Name>
<Type>Collection</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>rowOffset</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>FoundMatchesAreDifferent</Name>
<Scope>Private</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>5</CountOfDeclarationLines>
<CountOfLines>19</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Function FoundMatchesAreDifferent( ByRef sources As Collection, ByRef matchCol1 As Collection, ByRef matchCol2 As Collection ) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>sources</Name>
<Type>Collection</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>matchCol1</Name>
<Type>Collection</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>matchCol2</Name>
<Type>Collection</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>AreMatchesDifferent</Name>
<Scope>Private</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>6</CountOfDeclarationLines>
<CountOfLines>24</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Function AreMatchesDifferent( ByRef src1 As WorksheetIO, ByRef src2 As WorksheetIO, ByRef rng1 As Range, ByRef rng2 As Range ) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>src1</Name>
<Type>WorksheetIO</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>src2</Name>
<Type>WorksheetIO</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>rng1</Name>
<Type>Range</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>rng2</Name>
<Type>Range</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>GetSourceByWorksheetName</Name>
<Scope>Private</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>4</CountOfDeclarationLines>
<CountOfLines>15</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Function GetSourceByWorksheetName( ByRef sources As Collection, ByVal sheetName As String ) As WorksheetIO</Declaration>
<Parameters>
<Parameter>
<Name>sources</Name>
<Type>Collection</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>sheetName</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>WorksheetIO</ReturnType>
</Procedure>
<Procedure>
<Name>ImportFromSource</Name>
<Scope>Private</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>7</CountOfDeclarationLines>
<CountOfLines>27</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Function ImportFromSource( ByRef src As WorksheetIO, ByRef dst As WorksheetIO, ByRef rng As Range, ByRef conditions As Collection, ByRef rowOffset As Long ) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>src</Name>
<Type>WorksheetIO</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>dst</Name>
<Type>WorksheetIO</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>rng</Name>
<Type>Range</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>conditions</Name>
<Type>Collection</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>rowOffset</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>CheckListObjectConsistency</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>5</CountOfDeclarationLines>
<CountOfLines>44</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : CheckListObjectConsistency</CommentLine>
<CommentLine> Author    : Ivanov, Bozhan</CommentLine>
<CommentLine> Purpose   : Checks if a list object with that name exists in the provided workbook</CommentLine>
<CommentLine>   and if the list column names are correctly defined</CommentLine>
<CommentLine>   Raises appropriate error if the Check does not pass</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
<Declaration>Private Sub CheckListObjectConsistency( ByRef wb As Workbook, ByVal loName As String, ByVal columnNames As Variant )</Declaration>
<Parameters>
<Parameter>
<Name>wb</Name>
<Type>Workbook</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>loName</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>columnNames</Name>
<Type>Variant</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>CheckWorkbookExistance</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>3</CountOfDeclarationLines>
<CountOfLines>13</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub CheckWorkbookExistance( ByVal path As Variant )</Declaration>
<Parameters>
<Parameter>
<Name>path</Name>
<Type>Variant</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>CheckWorksheetExistance</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>4</CountOfDeclarationLines>
<CountOfLines>14</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub CheckWorksheetExistance( ByRef wb As Workbook, ByVal name As Variant )</Declaration>
<Parameters>
<Parameter>
<Name>wb</Name>
<Type>Workbook</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>name</Name>
<Type>Variant</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>EvaluateFieldCondition</Name>
<Scope>Private</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>5</CountOfDeclarationLines>
<CountOfLines>26</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Function EvaluateFieldCondition( value1 As Variant, value2 As Variant, cond As Variant ) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>value1</Name>
<Type>Variant</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>value2</Name>
<Type>Variant</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>cond</Name>
<Type>Variant</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>AreFieldConditionsMet</Name>
<Scope>Private</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>5</CountOfDeclarationLines>
<CountOfLines>24</CountOfLines>
<CommentLines>
<CommentLine></CommentLine>
<CommentLine>Dim fc As FieldCondition</CommentLine>
<CommentLine>Dim result As Boolean</CommentLine>
<CommentLine>result = True</CommentLine>
<CommentLine></CommentLine>
<CommentLine>  For Each fc In conds</CommentLine>
<CommentLine>    &apos;check if cond are for that field condition</CommentLine>
<CommentLine>    If StrComp(src.Worksheet.Name, fc.WorksheetName, vbTextCompare) = 0 Then</CommentLine>
<CommentLine>      result = result _</CommentLine>
<CommentLine>        And EvaluateFieldCondition( _</CommentLine>
<CommentLine>          src.Worksheet.Cells(rng.row, src.hcc.HeadColumn(fc.alias).Head.Column).Value, _</CommentLine>
<CommentLine>          fc.Value, _</CommentLine>
<CommentLine>          fc.Operator)</CommentLine>
<CommentLine>    End If</CommentLine>
<CommentLine>  Next fc</CommentLine>
<CommentLine></CommentLine>
<CommentLine>  AreFieldConditionsMet = result</CommentLine>
</CommentLines>
<Declaration>Private Function AreFieldConditionsMet( ByRef rng As Range, ByRef src As WorksheetIO, ByRef conds As Collection ) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>rng</Name>
<Type>Range</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>src</Name>
<Type>WorksheetIO</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>conds</Name>
<Type>Collection</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>IsCollectionElement</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>4</CountOfDeclarationLines>
<CountOfLines>12</CountOfLines>
<CommentLines>
<CommentLine>TODO move to a utility module</CommentLine>
</CommentLines>
<Declaration>Public Function IsCollectionElement( ByRef col As Collection, ByRef key As Variant ) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>col</Name>
<Type>Collection</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>key</Name>
<Type>Variant</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>FormatOnChosenDataType</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>5</CountOfDeclarationLines>
<CountOfLines>17</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub FormatOnChosenDataType( ByRef dstRange As Range, ByRef srcRange As Range, ByVal dataType As Variant )</Declaration>
<Parameters>
<Parameter>
<Name>dstRange</Name>
<Type>Range</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>srcRange</Name>
<Type>Range</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>dataType</Name>
<Type>Variant</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>FormatReportSheet</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>3</CountOfDeclarationLines>
<CountOfLines>27</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub FormatReportSheet( ByRef dst As WorksheetIO )</Declaration>
<Parameters>
<Parameter>
<Name>dst</Name>
<Type>WorksheetIO</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
</Procedures>
<CommentLines>
</CommentLines>
</CodeModule>
</File>
<File>
<Name>ErrorHandler</Name>
<FileName></FileName>
<PathFileName></PathFileName>
<Type>ClassModule</Type>
<Properties>
<Property>
<Name>Name</Name>
<Value>ErrorHandler</Value>
</Property>
<Property>
<Name>Instancing</Name>
<Value>1</Value>
</Property>
</Properties>
<CodeModule>
<CountOfDeclarationLines>43</CountOfDeclarationLines>
<CountOfLines>116</CountOfLines>
<Interfaces>
</Interfaces>
<Events>
</Events>
<Procedures>
<Procedure>
<Name>Save</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>9</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub Save(ByRef e As ErrObject)</Declaration>
<Parameters>
<Parameter>
<Name>e</Name>
<Type>ErrObject</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>RaiseLastSaved</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub RaiseLastSaved()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>Number</Name>
<Scope></Scope>
<Type>PropertyGet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Property Get Number() As Long</Declaration>
<Parameters>
</Parameters>
<ReturnType>Long</ReturnType>
</Procedure>
<Procedure>
<Name>Description</Name>
<Scope></Scope>
<Type>PropertyGet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Property Get Description() As String</Declaration>
<Parameters>
</Parameters>
<ReturnType>String</ReturnType>
</Procedure>
<Procedure>
<Name>source</Name>
<Scope></Scope>
<Type>PropertyGet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Property Get source() As String</Declaration>
<Parameters>
</Parameters>
<ReturnType>String</ReturnType>
</Procedure>
<Procedure>
<Name>Class_Initialize</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>9</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub Class_Initialize()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>logErrorToFile</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>37</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : logErrorToFile</CommentLine>
<CommentLine> Purpose   : Logs the occured error with a timestamp to an external log file</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine></CommentLine>
</CommentLines>
<Declaration>Public Sub logErrorToFile(err As ErrObject, errSource As String)</Declaration>
<Parameters>
<Parameter>
<Name>err</Name>
<Type>ErrObject</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>errSource</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
</Procedures>
<CommentLines>
</CommentLines>
</CodeModule>
</File>
<File>
<Name>EventHandler</Name>
<FileName></FileName>
<PathFileName></PathFileName>
<Type>ClassModule</Type>
<Properties>
<Property>
<Name>Name</Name>
<Value>EventHandler</Value>
</Property>
<Property>
<Name>Instancing</Name>
<Value>1</Value>
</Property>
</Properties>
<CodeModule>
<CountOfDeclarationLines>6</CountOfDeclarationLines>
<CountOfLines>33</CountOfLines>
<Interfaces>
</Interfaces>
<Events>
</Events>
<Procedures>
<Procedure>
<Name>HandleEvent</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>21</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : HandleEvent</CommentLine>
<CommentLine> Descr.    : Manages fired events</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
<Declaration>Public Sub HandleEvent(ByVal caller As String)</Declaration>
<Parameters>
<Parameter>
<Name>caller</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>HelpEvent</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>6</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub HelpEvent()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
</Procedures>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Module    : EventHandler</CommentLine>
<CommentLine> Author    : Ivanov, Bozhan</CommentLine>
<CommentLine> Purpose   : EVENTS &amp; EVENT HANDLING</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
</CodeModule>
</File>
<File>
<Name>UtilProject</Name>
<FileName></FileName>
<PathFileName></PathFileName>
<Type>ClassModule</Type>
<Properties>
<Property>
<Name>Name</Name>
<Value>UtilProject</Value>
</Property>
<Property>
<Name>Instancing</Name>
<Value>1</Value>
</Property>
</Properties>
<CodeModule>
<CountOfDeclarationLines>108</CountOfDeclarationLines>
<CountOfLines>917</CountOfLines>
<Interfaces>
</Interfaces>
<Events>
</Events>
<Procedures>
<Procedure>
<Name>getApplication</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>3</CountOfDeclarationLines>
<CountOfLines>87</CountOfLines>
<CommentLines>
<CommentLine>End Sub</CommentLine>
<CommentLine>Public Sub testProjCreate()</CommentLine>
<CommentLine>Dim mpApp As Object &apos;Object</CommentLine>
<CommentLine>Dim prj As Project &apos;Object</CommentLine>
<CommentLine>&apos;Dim p As Object</CommentLine>
<CommentLine>Dim t As Task &apos;Object</CommentLine>
<CommentLine></CommentLine>
<CommentLine>    Set mpApp = CreateObject(&quot;Object&quot;)</CommentLine>
<CommentLine>    Set prj = mpApp.projects.Add</CommentLine>
<CommentLine></CommentLine>
<CommentLine>    If prj Is Nothing Then Exit Sub</CommentLine>
<CommentLine></CommentLine>
<CommentLine>    mpApp.visible = False</CommentLine>
<CommentLine>    mpApp.DisplayAlerts = False</CommentLine>
<CommentLine>    mpApp.ScreenUpdating = False</CommentLine>
<CommentLine></CommentLine>
<CommentLine>    prj.Name = &quot;Test Crate&quot;</CommentLine>
<CommentLine></CommentLine>
<CommentLine>    With prj.Tasks.Add(&quot;t1&quot;)</CommentLine>
<CommentLine>        .ActualStart = Format(&quot;24.09.1984&quot;, &quot;dd.mm.yyyy&quot;)</CommentLine>
<CommentLine>    End With</CommentLine>
<CommentLine></CommentLine>
<CommentLine>    With prj.Tasks.Add(&quot;t2&quot;)</CommentLine>
<CommentLine>        .ActualStart = Now</CommentLine>
<CommentLine>        .ActualFinish = Now + 20</CommentLine>
<CommentLine>    End With</CommentLine>
<CommentLine></CommentLine>
<CommentLine>    With prj.Tasks.Add(&quot;t3&quot;)</CommentLine>
<CommentLine>        .ActualStart = Format(&quot;30.09.2013&quot;, &quot;dd.mm.yyyy&quot;)</CommentLine>
<CommentLine>        .ActualFinish = .ActualStart + 1</CommentLine>
<CommentLine>        &apos;.LinkPredecessors prj.Tasks.item(&quot;t2&quot;), pjFinishToStart</CommentLine>
<CommentLine>        .TaskDependencies.Add prj.Tasks.item(&quot;t2&quot;), pjFinishToStart</CommentLine>
<CommentLine>    End With</CommentLine>
<CommentLine></CommentLine>
<CommentLine></CommentLine>
<CommentLine>    prj.SaveAs &quot;C:\Users\ivano00b\Local Software Projects\Excel\Creon, Ralf\LoadPlan Scheduling\tmp.mpp&quot;</CommentLine>
<CommentLine></CommentLine>
<CommentLine>    mpApp.FileCloseAllEx (pjSave)</CommentLine>
<CommentLine></CommentLine>
<CommentLine>    mpApp.DisplayAlerts = True</CommentLine>
<CommentLine>    mpApp.ScreenUpdating = True</CommentLine>
<CommentLine>    mpApp.Quit</CommentLine>
<CommentLine></CommentLine>
<CommentLine>    Set prj = Nothing</CommentLine>
<CommentLine>    Set mpApp = Nothing</CommentLine>
<CommentLine></CommentLine>
<CommentLine>    Debug.Print &quot;Done!&quot;</CommentLine>
<CommentLine></CommentLine>
<CommentLine>End Sub</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : getApplication</CommentLine>
<CommentLine> Descr.    :</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
<Declaration>Public Function getApplication( Optional ByVal Visible As Boolean = False ) As Object</Declaration>
<Parameters>
<Parameter>
<Name>Visible</Name>
<Type>Boolean</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>False</DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Object</ReturnType>
</Procedure>
<Procedure>
<Name>getNewApplication</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>3</CountOfDeclarationLines>
<CountOfLines>19</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function getNewApplication( Optional ByVal Visible As Boolean = False ) As Object</Declaration>
<Parameters>
<Parameter>
<Name>Visible</Name>
<Type>Boolean</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>False</DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Object</ReturnType>
</Procedure>
<Procedure>
<Name>getNewProject</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>4</CountOfDeclarationLines>
<CountOfLines>29</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function getNewProject( Optional ByRef app As Object, Optional ByVal Visible As Boolean = False ) As Object</Declaration>
<Parameters>
<Parameter>
<Name>app</Name>
<Type>Object</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Visible</Name>
<Type>Boolean</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>False</DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Object</ReturnType>
</Procedure>
<Procedure>
<Name>getProjectByName</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>4</CountOfDeclarationLines>
<CountOfLines>31</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function getProjectByName( ByVal name As String, ByRef app As Object ) As Object</Declaration>
<Parameters>
<Parameter>
<Name>name</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>app</Name>
<Type>Object</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Object</ReturnType>
</Procedure>
<Procedure>
<Name>closeProject</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>5</CountOfDeclarationLines>
<CountOfLines>35</CountOfLines>
<CommentLines>
<CommentLine>TODO app object has to be discarded somehow if newone is created</CommentLine>
</CommentLines>
<Declaration>Public Sub closeProject( ByVal prj As Object, Optional ByRef app As Object, Optional ByVal Save As ProjectSaveOption = ProjectSaveOption.pjDoNotSave )</Declaration>
<Parameters>
<Parameter>
<Name>prj</Name>
<Type>Object</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>app</Name>
<Type>Object</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Save</Name>
<Type>ProjectSaveOption</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>ProjectSaveOption.pjDoNotSave</DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>closeProjectByName</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>5</CountOfDeclarationLines>
<CountOfLines>9</CountOfLines>
<CommentLines>
<CommentLine>&apos;Gives var not defined error</CommentLine>
</CommentLines>
<Declaration>Public Sub closeProjectByName( ByVal name As String, ByRef app As Object, Optional ByVal Save As ProjectSaveOption = ProjectSaveOption.pjDoNotSave )</Declaration>
<Parameters>
<Parameter>
<Name>name</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>app</Name>
<Type>Object</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Save</Name>
<Type>ProjectSaveOption</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>ProjectSaveOption.pjDoNotSave</DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>getTablesContainingFields</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>4</CountOfDeclarationLines>
<CountOfLines>54</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : getTablesContainingFields</CommentLine>
<CommentLine> Descr.    : looks up the field names and titles of each tasktable in project and</CommentLine>
<CommentLine>   returns all tasktables that contains all the provided fields in matchValues array</CommentLine>
<CommentLine>   matchValues has the datastructure of (Array-&gt;Array)</CommentLine>
<CommentLine>   Each sub array contains the versions of a field&apos;s name</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
<Declaration>Public Function getTablesContainingFields( ByRef prj As Object, ByRef matchValues As Variant ) As Collection</Declaration>
<Parameters>
<Parameter>
<Name>prj</Name>
<Type>Object</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>matchValues</Name>
<Type>Variant</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Collection</ReturnType>
</Procedure>
<Procedure>
<Name>getAllTableFieldsIdentifiers</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>3</CountOfDeclarationLines>
<CountOfLines>32</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : getAllTableFieldsIdentifiers</CommentLine>
<CommentLine> Descr.    :</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
<Declaration>Public Function getAllTableFieldsIdentifiers( ByRef tb As Object ) As Variant</Declaration>
<Parameters>
<Parameter>
<Name>tb</Name>
<Type>Object</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Variant</ReturnType>
</Procedure>
<Procedure>
<Name>getFieldIdentifiers</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>3</CountOfDeclarationLines>
<CountOfLines>49</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : getFieldIdentifiers</CommentLine>
<CommentLine> Descr.    :</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
<Declaration>Public Function getFieldIdentifiers( ByRef f As Object ) As Variant</Declaration>
<Parameters>
<Parameter>
<Name>f</Name>
<Type>Object</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Variant</ReturnType>
</Procedure>
<Procedure>
<Name>getFieldName</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>3</CountOfDeclarationLines>
<CountOfLines>27</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function getFieldName( ByRef f As Object ) As String</Declaration>
<Parameters>
<Parameter>
<Name>f</Name>
<Type>Object</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>String</ReturnType>
</Procedure>
<Procedure>
<Name>getCustomFieldName</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>3</CountOfDeclarationLines>
<CountOfLines>31</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function getCustomFieldName( ByRef f As Object ) As String</Declaration>
<Parameters>
<Parameter>
<Name>f</Name>
<Type>Object</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>String</ReturnType>
</Procedure>
<Procedure>
<Name>getFieldWithIdentifier</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>4</CountOfDeclarationLines>
<CountOfLines>39</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : getFieldWithIdentifier</CommentLine>
<CommentLine> Descr.    : searches for a machting identifier with a provided value</CommentLine>
<CommentLine>   search will be performed on index, title, field name, custom given name</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
<Declaration>Public Function getFieldWithIdentifier( ByRef tb As Object, ByVal searchValue As Variant ) As Object</Declaration>
<Parameters>
<Parameter>
<Name>tb</Name>
<Type>Object</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>searchValue</Name>
<Type>Variant</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Object</ReturnType>
</Procedure>
<Procedure>
<Name>getTableByName</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>5</CountOfDeclarationLines>
<CountOfLines>30</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function getTableByName( ByRef prj As Object, ByVal tableName As String, Optional ByVal CompareMethod As VBA.VbCompareMethod = vbTextCompare ) As Object</Declaration>
<Parameters>
<Parameter>
<Name>prj</Name>
<Type>Object</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>tableName</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>CompareMethod</Name>
<Type>VBA.VbCompareMethod</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>vbTextCompare</DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Object</ReturnType>
</Procedure>
<Procedure>
<Name>getTableMatchingCriteria</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>5</CountOfDeclarationLines>
<CountOfLines>51</CountOfLines>
<CommentLines>
<CommentLine></CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : getTableMatchingCriteria</CommentLine>
<CommentLine> Descr.    : returns the first matching table containing all required fields and/or matching</CommentLine>
<CommentLine>   prefered table name</CommentLine>
<CommentLine>   requiredFields has the datastructure of (Array-&gt;Array)</CommentLine>
<CommentLine>   Each sub array contains the versions of a field&apos;s name</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
<Declaration>Public Function getTableMatchingCriteria( ByRef prj As Object, Optional ByVal prefferedTableName As String = vbNullString, Optional ByVal requiredFields As Variant = Null ) As Object</Declaration>
<Parameters>
<Parameter>
<Name>prj</Name>
<Type>Object</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>prefferedTableName</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>vbNullString</DefaultValue>
</Parameter>
<Parameter>
<Name>requiredFields</Name>
<Type>Variant</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>Null</DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Object</ReturnType>
</Procedure>
<Procedure>
<Name>getTaskTables</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>3</CountOfDeclarationLines>
<CountOfLines>34</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : getTaskTables</CommentLine>
<CommentLine> Descr.    :</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
<Declaration>Public Function getTaskTables( ByRef prj As Object ) As Collection</Declaration>
<Parameters>
<Parameter>
<Name>prj</Name>
<Type>Object</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Collection</ReturnType>
</Procedure>
<Procedure>
<Name>getFieldsFromTable</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>4</CountOfDeclarationLines>
<CountOfLines>63</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : getFieldsFromTable</CommentLine>
<CommentLine> Descr.    :</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
<Declaration>Public Function getFieldsFromTable( ByRef tb As Object, Optional ByVal fieldNames As Variant = Null ) As Collection</Declaration>
<Parameters>
<Parameter>
<Name>tb</Name>
<Type>Object</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>fieldNames</Name>
<Type>Variant</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>Null</DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Collection</ReturnType>
</Procedure>
<Procedure>
<Name>AreFieldIdsInTable</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>4</CountOfDeclarationLines>
<CountOfLines>8</CountOfLines>
<CommentLines>
<CommentLine>TODO</CommentLine>
</CommentLines>
<Declaration>Public Function AreFieldIdsInTable( ByRef tbl As Object, ByVal fieldIds As Variant )</Declaration>
<Parameters>
<Parameter>
<Name>tbl</Name>
<Type>Object</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>fieldIds</Name>
<Type>Variant</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>AreFieldNamesInTable</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>4</CountOfDeclarationLines>
<CountOfLines>8</CountOfLines>
<CommentLines>
<CommentLine>TODO</CommentLine>
</CommentLines>
<Declaration>Public Function AreFieldNamesInTable( ByRef tbl As Object, ByVal fieldIds As Variant )</Declaration>
<Parameters>
<Parameter>
<Name>tbl</Name>
<Type>Object</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>fieldIds</Name>
<Type>Variant</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>copyData</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>45</CountOfLines>
<CommentLines>
<CommentLine>pjApp.FileOpen &quot;Clocks.mpp&quot;</CommentLine>
<CommentLine>    pjApp.ActiveProject.Tasks.Add &quot;Hang clocks&quot;</CommentLine>
<CommentLine>    pjApp.FileSaveAs &quot;Clocks.mpp&quot;</CommentLine>
<CommentLine>    pjApp.FileClose</CommentLine>
<CommentLine>    pjApp.Quit</CommentLine>
</CommentLines>
<Declaration>Public Sub copyData(src As Object, dst As Object)</Declaration>
<Parameters>
<Parameter>
<Name>src</Name>
<Type>Object</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>dst</Name>
<Type>Object</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
</Procedures>
<CommentLines>
</CommentLines>
</CodeModule>
</File>
<File>
<Name>UtilStrings</Name>
<FileName></FileName>
<PathFileName></PathFileName>
<Type>ClassModule</Type>
<Properties>
<Property>
<Name>Name</Name>
<Value>UtilStrings</Value>
</Property>
<Property>
<Name>Instancing</Name>
<Value>1</Value>
</Property>
</Properties>
<CodeModule>
<CountOfDeclarationLines>28</CountOfDeclarationLines>
<CountOfLines>803</CountOfLines>
<Interfaces>
</Interfaces>
<Events>
</Events>
<Procedures>
<Procedure>
<Name>GetBytes</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>3</CountOfDeclarationLines>
<CountOfLines>14</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure   : GetBytes</CommentLine>
<CommentLine> Description : returns input string into a byte array</CommentLine>
<CommentLine>   Set a reference to mscorlib 4.0 64-bit</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
<Declaration>Public Function GetBytes( ByVal text As String ) As Byte()</Declaration>
<Parameters>
<Parameter>
<Name>text</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Byte()</ReturnType>
</Procedure>
<Procedure>
<Name>getNumberOfOccurances</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>5</CountOfDeclarationLines>
<CountOfLines>16</CountOfLines>
<CommentLines>
<CommentLine>Returns the number of subsring occurances in a provided string</CommentLine>
</CommentLines>
<Declaration>Public Function getNumberOfOccurances( ByVal text, ByVal searchString, Optional CompareMethod As VbCompareMethod = VbCompareMethod.vbBinaryCompare ) As Long</Declaration>
<Parameters>
<Parameter>
<Name>text</Name>
<Type></Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>searchString</Name>
<Type></Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>CompareMethod</Name>
<Type>VbCompareMethod</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>VbCompareMethod.vbBinaryCompare</DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Long</ReturnType>
</Procedure>
<Procedure>
<Name>GetDateFromString</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function GetDateFromString(ByVal value As String) As String</Declaration>
<Parameters>
<Parameter>
<Name>value</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>String</ReturnType>
</Procedure>
<Procedure>
<Name>RemoveDateFromString</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function RemoveDateFromString(ByVal value As String) As String</Declaration>
<Parameters>
<Parameter>
<Name>value</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>String</ReturnType>
</Procedure>
<Procedure>
<Name>GetIndexOf</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>5</CountOfDeclarationLines>
<CountOfLines>14</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : GetIndexOf</CommentLine>
<CommentLine> Descr.    : Returns a zero-based index of the first occurrence of the specified</CommentLine>
<CommentLine>             string in a provided substring</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine></CommentLine>
</CommentLines>
<Declaration>Public Function GetIndexOf( ByVal stringExpression As String, ByVal soughtString As String, Optional CompareMethod As VbCompareMethod = VbCompareMethod.vbBinaryCompare ) As Long</Declaration>
<Parameters>
<Parameter>
<Name>stringExpression</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>soughtString</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>CompareMethod</Name>
<Type>VbCompareMethod</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>VbCompareMethod.vbBinaryCompare</DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Long</ReturnType>
</Procedure>
<Procedure>
<Name>GetLastIndexOf</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>5</CountOfDeclarationLines>
<CountOfLines>31</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : GetLastIndexOf</CommentLine>
<CommentLine> Descr.    : Returns a zero-based index of the last occurrence of the specified</CommentLine>
<CommentLine>             string in a provided substring</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine></CommentLine>
</CommentLines>
<Declaration>Public Function GetLastIndexOf( ByVal value As String, ByVal searchString As String, Optional CompareMethod As VbCompareMethod = VbCompareMethod.vbBinaryCompare ) As Long</Declaration>
<Parameters>
<Parameter>
<Name>value</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>searchString</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>CompareMethod</Name>
<Type>VbCompareMethod</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>VbCompareMethod.vbBinaryCompare</DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Long</ReturnType>
</Procedure>
<Procedure>
<Name>GetFirstIndexOfCharType</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>30</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : GetFirstIndexOfCharType</CommentLine>
<CommentLine> Descr.    : Returns a zero-based index of the first occurrence of the specified</CommentLine>
<CommentLine>             type of character (enum CharacterType)</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine></CommentLine>
</CommentLines>
<Declaration>Public Function GetFirstIndexOfCharType(ByVal value As String, ByVal charType As CharacterType) As Long</Declaration>
<Parameters>
<Parameter>
<Name>value</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>charType</Name>
<Type>CharacterType</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Long</ReturnType>
</Procedure>
<Procedure>
<Name>GetLastIndexOfCharType</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>54</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : GetLastIndexOfCharType</CommentLine>
<CommentLine> Descr.    : Returns a zero-based index of the last occurrence of the specified</CommentLine>
<CommentLine>             type of character (enum CharacterType)</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine>TODO finish impl</CommentLine>
</CommentLines>
<Declaration>Public Function GetLastIndexOfCharType(ByVal value As String, ByVal charType As CharacterType) As Long</Declaration>
<Parameters>
<Parameter>
<Name>value</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>charType</Name>
<Type>CharacterType</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Long</ReturnType>
</Procedure>
<Procedure>
<Name>GetLeftOfIndex</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>12</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : GetLeftOfIndex</CommentLine>
<CommentLine> Descr.    : returns a sub-string left of the specified string index</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine></CommentLine>
</CommentLines>
<Declaration>Public Function GetLeftOfIndex(ByVal value As String, ByVal Index As Long) As String</Declaration>
<Parameters>
<Parameter>
<Name>value</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Index</Name>
<Type>Long</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>String</ReturnType>
</Procedure>
<Procedure>
<Name>GetRightOfIndex</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>12</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : GetRightOfIndex</CommentLine>
<CommentLine> Descr.    : returns a sub-string right of the specified string index</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine></CommentLine>
</CommentLines>
<Declaration>Public Function GetRightOfIndex(ByVal value As String, ByVal Index As Long) As String</Declaration>
<Parameters>
<Parameter>
<Name>value</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Index</Name>
<Type>Long</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>String</ReturnType>
</Procedure>
<Procedure>
<Name>IsLetter</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>19</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : isLetter</CommentLine>
<CommentLine> Descr.    : boolean function will return true if the string is only letters</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine>TODO use regex to mach letters</CommentLine>
</CommentLines>
<Declaration>Public Function IsLetter(ByVal value As String) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>value</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>IsNumber</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>10</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function IsNumber(ByVal value As String) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>value</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>RemoveExcessSeperators</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>8</CountOfDeclarationLines>
<CountOfLines>57</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : RemoveExcessSeperators</CommentLine>
<CommentLine> Descr.    : Removes excess seprators from left and right side of the first string param</CommentLine>
<CommentLine>   Also a double seperator string is replaced by a zero string</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
<Declaration>Public Function RemoveExcessSeperators( ByVal text As Variant, ByVal seperator As String, Optional ByVal duplicates As Boolean = True, Optional ByVal leftSide As Boolean = True, Optional ByVal rightSide As Boolean = True, Optional ByVal trimText As Boolean = False ) As String</Declaration>
<Parameters>
<Parameter>
<Name>text</Name>
<Type>Variant</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>seperator</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>duplicates</Name>
<Type>Boolean</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>True</DefaultValue>
</Parameter>
<Parameter>
<Name>leftSide</Name>
<Type>Boolean</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>True</DefaultValue>
</Parameter>
<Parameter>
<Name>rightSide</Name>
<Type>Boolean</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>True</DefaultValue>
</Parameter>
<Parameter>
<Name>trimText</Name>
<Type>Boolean</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>False</DefaultValue>
</Parameter>
</Parameters>
<ReturnType>String</ReturnType>
</Procedure>
<Procedure>
<Name>StripChar</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>8</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : StripChar</CommentLine>
<CommentLine> Descr.    : Removes string from another string if found</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
<Declaration>Public Function StripChar(ByVal text As String, ByVal char As String) As String</Declaration>
<Parameters>
<Parameter>
<Name>text</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>char</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>String</ReturnType>
</Procedure>
<Procedure>
<Name>StripChars</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>17</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : StripChars</CommentLine>
<CommentLine> Descr.    : Removes any list of strings from another string if found</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
<Declaration>Public Function StripChars(ByVal text As String, ParamArray chars()) As String</Declaration>
<Parameters>
<Parameter>
<Name>text</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>chars()</Name>
<Type></Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>True</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>String</ReturnType>
</Procedure>
<Procedure>
<Name>GetIndexOfOccurance</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>6</CountOfDeclarationLines>
<CountOfLines>33</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : GetIndexOfOccurance</CommentLine>
<CommentLine> Descr.    : Returns the index of the searched string.</CommentLine>
<CommentLine>   The occurance of the search string may be provided in order to find the index of</CommentLine>
<CommentLine>   a particular occurance of that string. If the occurance parameter is larger than the</CommentLine>
<CommentLine>   occurances of the search string then 0 will be returned</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
<Declaration>Public Function GetIndexOfOccurance( ByVal value As String, ByVal searchString As String, Optional ByVal occurance As Long = 1, Optional ByVal CompareMethod As VbCompareMethod = VbCompareMethod.vbBinaryCompare ) As Long</Declaration>
<Parameters>
<Parameter>
<Name>value</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>searchString</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>occurance</Name>
<Type>Long</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>1</DefaultValue>
</Parameter>
<Parameter>
<Name>CompareMethod</Name>
<Type>VbCompareMethod</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>VbCompareMethod.vbBinaryCompare</DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Long</ReturnType>
</Procedure>
<Procedure>
<Name>ConvertDateFormatBasedOnRegionalSettings</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>3</CountOfDeclarationLines>
<CountOfLines>22</CountOfLines>
<CommentLines>
<CommentLine>TODO reserach locale number formats</CommentLine>
<CommentLine>need to move function and need to make sure it does what it says</CommentLine>
<CommentLine>Function used in producing a local independent date format</CommentLine>
<CommentLine>to be used in Excel sheet cell number formatting -&gt; custom</CommentLine>
<CommentLine>    [$-409] - English, Untitled States</CommentLine>
<CommentLine>    [$-1009] -English, Canada</CommentLine>
<CommentLine>    [$-407] -German, Germany</CommentLine>
<CommentLine>    [$-807] -German, Switzerland</CommentLine>
<CommentLine>    [$-804] -Bengali, India</CommentLine>
<CommentLine>    [$-804] -Chinese, China</CommentLine>
<CommentLine>    [$-404] -Chinese, Taiwan</CommentLine>
</CommentLines>
<Declaration>Public Function ConvertDateFormatBasedOnRegionalSettings( ByVal dateFormat As String ) As String</Declaration>
<Parameters>
<Parameter>
<Name>dateFormat</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>String</ReturnType>
</Procedure>
<Procedure>
<Name>SplitOnDelimiter</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>4</CountOfDeclarationLines>
<CountOfLines>7</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function SplitOnDelimiter( ByVal value As String, ByVal Delimiter As String ) As Variant</Declaration>
<Parameters>
<Parameter>
<Name>value</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Delimiter</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Variant</ReturnType>
</Procedure>
<Procedure>
<Name>Bracketize</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>4</CountOfDeclarationLines>
<CountOfLines>11</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function Bracketize( ByVal text As String, Optional ByVal exclusive As Boolean = True ) As String</Declaration>
<Parameters>
<Parameter>
<Name>text</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>exclusive</Name>
<Type>Boolean</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>True</DefaultValue>
</Parameter>
</Parameters>
<ReturnType>String</ReturnType>
</Procedure>
<Procedure>
<Name>bracketizeSquare</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>4</CountOfDeclarationLines>
<CountOfLines>11</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function bracketizeSquare( ByVal text As String, Optional ByVal exclusive As Boolean = True ) As String</Declaration>
<Parameters>
<Parameter>
<Name>text</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>exclusive</Name>
<Type>Boolean</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>True</DefaultValue>
</Parameter>
</Parameters>
<ReturnType>String</ReturnType>
</Procedure>
<Procedure>
<Name>bracketizeSquare_MatchInText</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>4</CountOfDeclarationLines>
<CountOfLines>7</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function bracketizeSquare_MatchInText( ByVal text As String, ByVal searchString As String ) As String</Declaration>
<Parameters>
<Parameter>
<Name>text</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>searchString</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>String</ReturnType>
</Procedure>
<Procedure>
<Name>encloseWithChars_MatchInText</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>6</CountOfDeclarationLines>
<CountOfLines>34</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : encloseWithChars_MatchInText</CommentLine>
<CommentLine> Purpose   : encloses all instances of the searchString parameter in exclusive manner</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
<Declaration>Public Function encloseWithChars_MatchInText( ByVal text As String, ByVal searchString As String, Optional openingChar As String = &quot;(&quot;, Optional closingChar As String = &quot;)&quot; ) As String</Declaration>
<Parameters>
<Parameter>
<Name>text</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>searchString</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>openingChar</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>&quot;(&quot;</DefaultValue>
</Parameter>
<Parameter>
<Name>closingChar</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>&quot;)&quot;</DefaultValue>
</Parameter>
</Parameters>
<ReturnType>String</ReturnType>
</Procedure>
<Procedure>
<Name>encloseWithChars</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>5</CountOfDeclarationLines>
<CountOfLines>15</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function encloseWithChars( ByVal text As String, ByVal leftChar As String, Optional ByVal rightChar As String = vbNullString ) As String</Declaration>
<Parameters>
<Parameter>
<Name>text</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>leftChar</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>rightChar</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>vbNullString</DefaultValue>
</Parameter>
</Parameters>
<ReturnType>String</ReturnType>
</Procedure>
<Procedure>
<Name>encloseWithCharsExclusive</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>5</CountOfDeclarationLines>
<CountOfLines>22</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function encloseWithCharsExclusive( ByVal text As String, ByVal leftChar As String, Optional ByVal rightChar As String = vbNullString ) As String</Declaration>
<Parameters>
<Parameter>
<Name>text</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>leftChar</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>rightChar</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>vbNullString</DefaultValue>
</Parameter>
</Parameters>
<ReturnType>String</ReturnType>
</Procedure>
<Procedure>
<Name>getRandomLetter_RandomCase</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>8</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function getRandomLetter_RandomCase() As String</Declaration>
<Parameters>
</Parameters>
<ReturnType>String</ReturnType>
</Procedure>
<Procedure>
<Name>getRandomLetter_UpperCase</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>6</CountOfLines>
<CommentLines>
<CommentLine>random char formula for range of numbers</CommentLine>
<CommentLine>Int ((upperbound - lowerbound + 1) * Rnd + lowerbound)</CommentLine>
</CommentLines>
<Declaration>Public Function getRandomLetter_UpperCase() As String</Declaration>
<Parameters>
</Parameters>
<ReturnType>String</ReturnType>
</Procedure>
<Procedure>
<Name>getRandomLetter_LowerCase</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function getRandomLetter_LowerCase() As String</Declaration>
<Parameters>
</Parameters>
<ReturnType>String</ReturnType>
</Procedure>
<Procedure>
<Name>getRandomString_Alphabetic</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>3</CountOfDeclarationLines>
<CountOfLines>12</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function getRandomString_Alphabetic( ByVal length As Integer ) As String</Declaration>
<Parameters>
<Parameter>
<Name>length</Name>
<Type>Integer</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>String</ReturnType>
</Procedure>
<Procedure>
<Name>getRandomString_AlphaNumeric</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>3</CountOfDeclarationLines>
<CountOfLines>12</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function getRandomString_AlphaNumeric( ByVal length As Integer ) As String</Declaration>
<Parameters>
<Parameter>
<Name>length</Name>
<Type>Integer</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>String</ReturnType>
</Procedure>
<Procedure>
<Name>getRandomChar_AlphaNumeric</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>8</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function getRandomChar_AlphaNumeric() As String</Declaration>
<Parameters>
</Parameters>
<ReturnType>String</ReturnType>
</Procedure>
<Procedure>
<Name>getRandomNumber</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>5</CountOfDeclarationLines>
<CountOfLines>14</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function getRandomNumber( Optional lowerBound As Long = 0, Optional upperBound As Long = 9, Optional cycles As Long = 1 ) As String</Declaration>
<Parameters>
<Parameter>
<Name>lowerBound</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>0</DefaultValue>
</Parameter>
<Parameter>
<Name>upperBound</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>9</DefaultValue>
</Parameter>
<Parameter>
<Name>cycles</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>1</DefaultValue>
</Parameter>
</Parameters>
<ReturnType>String</ReturnType>
</Procedure>
<Procedure>
<Name>getSplitDSV</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>5</CountOfDeclarationLines>
<CountOfLines>30</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function getSplitDSV( ByVal content As String, ByVal colDelimiter As String, Optional ByVal rowDelimiter As String = vbCrLf ) As Variant</Declaration>
<Parameters>
<Parameter>
<Name>content</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>colDelimiter</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>rowDelimiter</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>vbCrLf</DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Variant</ReturnType>
</Procedure>
<Procedure>
<Name>getSplitByRowsDSV</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>4</CountOfDeclarationLines>
<CountOfLines>21</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function getSplitByRowsDSV( ByVal content As String, Optional ByVal Delimiter As String = vbCrLf ) As Variant</Declaration>
<Parameters>
<Parameter>
<Name>content</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Delimiter</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>vbCrLf</DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Variant</ReturnType>
</Procedure>
<Procedure>
<Name>getSplitByColumnsDSVOnCondition</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>6</CountOfDeclarationLines>
<CountOfLines>34</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function getSplitByColumnsDSVOnCondition( ByVal content As String, ByVal colDelimiter As String, ByVal condition As Variant, Optional ByVal rowDelimiter As String = vbCrLf ) As Variant</Declaration>
<Parameters>
<Parameter>
<Name>content</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>colDelimiter</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>condition</Name>
<Type>Variant</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>rowDelimiter</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>vbCrLf</DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Variant</ReturnType>
</Procedure>
<Procedure>
<Name>getMatchPositionsInDSV</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>6</CountOfDeclarationLines>
<CountOfLines>21</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function getMatchPositionsInDSV( ByVal content As String, ByVal Delimiter As String, ByVal matchValues As Variant, Optional ByVal rowDelimiter As String = vbCrLf ) As Variant</Declaration>
<Parameters>
<Parameter>
<Name>content</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Delimiter</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>matchValues</Name>
<Type>Variant</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>rowDelimiter</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>vbCrLf</DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Variant</ReturnType>
</Procedure>
<Procedure>
<Name>findMatchPositionInDSV</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>6</CountOfDeclarationLines>
<CountOfLines>23</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function findMatchPositionInDSV( ByVal content As String, ByVal Delimiter As String, ByVal matchValue As Variant, Optional ByVal rowDelimiter As String = vbCrLf ) As Long</Declaration>
<Parameters>
<Parameter>
<Name>content</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Delimiter</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>matchValue</Name>
<Type>Variant</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>rowDelimiter</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>vbCrLf</DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Long</ReturnType>
</Procedure>
<Procedure>
<Name>UTF8_Decode</Name>
<Scope></Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>23</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Function UTF8_Decode(ByVal sStr As String)</Declaration>
<Parameters>
<Parameter>
<Name>sStr</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>getSpecialCharacters</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>6</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function getSpecialCharacters() As Variant</Declaration>
<Parameters>
</Parameters>
<ReturnType>Variant</ReturnType>
</Procedure>
<Procedure>
<Name>concat</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>9</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function concat(ByVal stringsArray As Variant) As String</Declaration>
<Parameters>
<Parameter>
<Name>stringsArray</Name>
<Type>Variant</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>String</ReturnType>
</Procedure>
<Procedure>
<Name>getStringWidthFromFontSize</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>5</CountOfDeclarationLines>
<CountOfLines>14</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : getStringWidthFromFontSize</CommentLine>
<CommentLine> Author    : Ivanov, Bozhan</CommentLine>
<CommentLine> Purpose   : returns a relative string width in Twips Per Inch</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
<Declaration>Public Function getStringWidthFromFontSize( ByVal fontSize As Integer, ByVal stringLength As Long, Optional ByVal adjDelta As Single = 0.75 ) As Variant</Declaration>
<Parameters>
<Parameter>
<Name>fontSize</Name>
<Type>Integer</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>stringLength</Name>
<Type>Long</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>adjDelta</Name>
<Type>Single</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>0.75</DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Variant</ReturnType>
</Procedure>
<Procedure>
<Name>SplitTrim</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>6</CountOfDeclarationLines>
<CountOfLines>15</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function SplitTrim( ByVal Expression As String, Optional ByVal Delimiter As Variant, Optional ByVal limit As Long = -1, Optional ByVal Compare As VbCompareMethod = vbBinaryCompare ) As Variant</Declaration>
<Parameters>
<Parameter>
<Name>Expression</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Delimiter</Name>
<Type>Variant</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>limit</Name>
<Type>Long</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>-1</DefaultValue>
</Parameter>
<Parameter>
<Name>Compare</Name>
<Type>VbCompareMethod</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>vbBinaryCompare</DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Variant</ReturnType>
</Procedure>
<Procedure>
<Name>CompareValues</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>5</CountOfDeclarationLines>
<CountOfLines>34</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : CompareValues</CommentLine>
<CommentLine> Author    : Ivanov, Bozhan</CommentLine>
<CommentLine> Purpose   : returns the values 0,-1,1 according to output of the strcomp() function</CommentLine>
<CommentLine>   Compares two elements V1 and V2</CommentLine>
<CommentLine>   if both numeric or string with numeric,</CommentLine>
<CommentLine>   they are converted to double and compared</CommentLine>
<CommentLine>   If either one is String and does not contain numeric,</CommentLine>
<CommentLine>   they are converted to string and compared with strcomp()</CommentLine>
<CommentLine>   Case-sensitivity is controlled via the optional parameter compareMode</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
<Declaration>Public Function CompareValues( v1 As Variant, v2 As Variant, Optional CompareMethod As VbCompareMethod = VbCompareMethod.vbTextCompare ) As Variant</Declaration>
<Parameters>
<Parameter>
<Name>v1</Name>
<Type>Variant</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>v2</Name>
<Type>Variant</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>CompareMethod</Name>
<Type>VbCompareMethod</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>VbCompareMethod.vbTextCompare</DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Variant</ReturnType>
</Procedure>
<Procedure>
<Name>IsSimpleDataType</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>16</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function IsSimpleDataType(v As Variant) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>v</Name>
<Type>Variant</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
</Procedures>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Module    : modString</CommentLine>
<CommentLine> Author    : Ivanov, Bozhan</CommentLine>
<CommentLine> Descr.    : All string, char and text manipulation methods are defined here</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine></CommentLine>
</CommentLines>
</CodeModule>
</File>
<File>
<Name>UtilRegistry</Name>
<FileName></FileName>
<PathFileName></PathFileName>
<Type>ClassModule</Type>
<Properties>
<Property>
<Name>Name</Name>
<Value>UtilRegistry</Value>
</Property>
<Property>
<Name>Instancing</Name>
<Value>1</Value>
</Property>
</Properties>
<CodeModule>
<CountOfDeclarationLines>24</CountOfDeclarationLines>
<CountOfLines>148</CountOfLines>
<Interfaces>
</Interfaces>
<Events>
</Events>
<Procedures>
<Procedure>
<Name>shell</Name>
<Scope>Private</Scope>
<Type>PropertyGet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>5</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Property Get shell() As Object</Declaration>
<Parameters>
</Parameters>
<ReturnType>Object</ReturnType>
</Procedure>
<Procedure>
<Name>Class_Terminate</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub Class_Terminate()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>IsKeyAvailable</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>3</CountOfDeclarationLines>
<CountOfLines>16</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : IsKeyAvailable</CommentLine>
<CommentLine> Purpose   : Checks if a regitry key exists and is accesible and returns true if so</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
<Declaration>Public Function IsKeyAvailable( ByVal KeyPath As String ) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>KeyPath</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>IsValueAvailable</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>4</CountOfDeclarationLines>
<CountOfLines>16</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : IsValueAvailable</CommentLine>
<CommentLine> Purpose   : Checks if a regitry value exists and is accesible and returns true if so</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
<Declaration>Public Function IsValueAvailable( ByVal KeyName As String, ByVal ValueName As String ) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>KeyName</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>ValueName</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>ReadKey</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>3</CountOfDeclarationLines>
<CountOfLines>16</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : ReadKey</CommentLine>
<CommentLine> Purpose   : Returns regestry value if available, else returns empty string</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
<Declaration>Public Function ReadKey( ByVal KeyPath As String ) As Variant</Declaration>
<Parameters>
<Parameter>
<Name>KeyPath</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Variant</ReturnType>
</Procedure>
<Procedure>
<Name>ReadValue</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>4</CountOfDeclarationLines>
<CountOfLines>16</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : ReadValue</CommentLine>
<CommentLine> Purpose   : Returns regestry value if available, else returns empty string</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
<Declaration>Public Function ReadValue( ByVal KeyName As String, ByVal ValueName As String ) As Variant</Declaration>
<Parameters>
<Parameter>
<Name>KeyName</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>ValueName</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Variant</ReturnType>
</Procedure>
<Procedure>
<Name>writeValue</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>6</CountOfDeclarationLines>
<CountOfLines>49</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : writeValue</CommentLine>
<CommentLine> Purpose   : Writes a registry value</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
<Declaration>Public Function writeValue( ByVal KeyName As String, ByVal ValueName As String, ByVal value As String, ByVal ValueType As RegestryValueType ) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>KeyName</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>ValueName</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>value</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>ValueType</Name>
<Type>RegestryValueType</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
</Procedures>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Module      : UtilRegistry</CommentLine>
<CommentLine> Author      : Ivanov, Bozhan</CommentLine>
<CommentLine> Description : Windows registry management functions</CommentLine>
<CommentLine>  Return Types for ReadRef:</CommentLine>
<CommentLine>  REG_SZ - string</CommentLine>
<CommentLine>  REG_DWORD - integer</CommentLine>
<CommentLine>  REG_BINARY - VBArray of integers</CommentLine>
<CommentLine>  REG_EXPAND_SZ - string</CommentLine>
<CommentLine>  REG_MULTI_SZ - VBArray of strings</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
</CodeModule>
</File>
<File>
<Name>UtilDateTime</Name>
<FileName></FileName>
<PathFileName></PathFileName>
<Type>ClassModule</Type>
<Properties>
<Property>
<Name>Name</Name>
<Value>UtilDateTime</Value>
</Property>
<Property>
<Name>Instancing</Name>
<Value>1</Value>
</Property>
</Properties>
<CodeModule>
<CountOfDeclarationLines>7</CountOfDeclarationLines>
<CountOfLines>34</CountOfLines>
<Interfaces>
</Interfaces>
<Events>
</Events>
<Procedures>
<Procedure>
<Name>GetDateStamp</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>3</CountOfDeclarationLines>
<CountOfLines>6</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function GetDateStamp( Optional dateFormat As String = &quot;yyyy-mm-dd&quot; ) As String</Declaration>
<Parameters>
<Parameter>
<Name>dateFormat</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>&quot;yyyy-mm-dd&quot;</DefaultValue>
</Parameter>
</Parameters>
<ReturnType>String</ReturnType>
</Procedure>
<Procedure>
<Name>GetTimeStamp</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>3</CountOfDeclarationLines>
<CountOfLines>6</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function GetTimeStamp( Optional timeFormat As String = &quot;hhmmss&quot; ) As String</Declaration>
<Parameters>
<Parameter>
<Name>timeFormat</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>&quot;hhmmss&quot;</DefaultValue>
</Parameter>
</Parameters>
<ReturnType>String</ReturnType>
</Procedure>
<Procedure>
<Name>GetDateTimeStamp</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>5</CountOfDeclarationLines>
<CountOfLines>11</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function GetDateTimeStamp( Optional dateFormat As String = &quot;yyyy-mm-dd&quot;, Optional timeFormat As String = &quot;hhmmss&quot;, Optional ByVal seperator As String = &quot;_&quot; ) As String</Declaration>
<Parameters>
<Parameter>
<Name>dateFormat</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>&quot;yyyy-mm-dd&quot;</DefaultValue>
</Parameter>
<Parameter>
<Name>timeFormat</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>&quot;hhmmss&quot;</DefaultValue>
</Parameter>
<Parameter>
<Name>seperator</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>&quot;_&quot;</DefaultValue>
</Parameter>
</Parameters>
<ReturnType>String</ReturnType>
</Procedure>
</Procedures>
<CommentLines>
</CommentLines>
</CodeModule>
</File>
<File>
<Name>Utility</Name>
<FileName></FileName>
<PathFileName></PathFileName>
<Type>ClassModule</Type>
<Properties>
<Property>
<Name>Name</Name>
<Value>Utility</Value>
</Property>
<Property>
<Name>Instancing</Name>
<Value>1</Value>
</Property>
</Properties>
<CodeModule>
<CountOfDeclarationLines>21</CountOfDeclarationLines>
<CountOfLines>145</CountOfLines>
<Interfaces>
</Interfaces>
<Events>
</Events>
<Procedures>
<Procedure>
<Name>Class_Initialize</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>19</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub Class_Initialize()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>Class_Terminate</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>19</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub Class_Terminate()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>Hash</Name>
<Scope></Scope>
<Type>PropertyGet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>5</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Property Get Hash() As UtilHash</Declaration>
<Parameters>
</Parameters>
<ReturnType>UtilHash</ReturnType>
</Procedure>
<Procedure>
<Name>SmartCard</Name>
<Scope></Scope>
<Type>PropertyGet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>5</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Property Get SmartCard() As UtilSmartCard</Declaration>
<Parameters>
</Parameters>
<ReturnType>UtilSmartCard</ReturnType>
</Procedure>
<Procedure>
<Name>Crypt</Name>
<Scope></Scope>
<Type>PropertyGet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>5</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Property Get Crypt() As UtilCrypt</Declaration>
<Parameters>
</Parameters>
<ReturnType>UtilCrypt</ReturnType>
</Procedure>
<Procedure>
<Name>Timer</Name>
<Scope></Scope>
<Type>PropertyGet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Property Get Timer() As UtilTimer</Declaration>
<Parameters>
</Parameters>
<ReturnType>UtilTimer</ReturnType>
</Procedure>
<Procedure>
<Name>Windows</Name>
<Scope></Scope>
<Type>PropertyGet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Property Get Windows() As UtilWindows</Declaration>
<Parameters>
</Parameters>
<ReturnType>UtilWindows</ReturnType>
</Procedure>
<Procedure>
<Name>Arrays</Name>
<Scope></Scope>
<Type>PropertyGet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Property Get Arrays() As UtilArrays</Declaration>
<Parameters>
</Parameters>
<ReturnType>UtilArrays</ReturnType>
</Procedure>
<Procedure>
<Name>Color</Name>
<Scope></Scope>
<Type>PropertyGet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Property Get Color() As UtilColor</Declaration>
<Parameters>
</Parameters>
<ReturnType>UtilColor</ReturnType>
</Procedure>
<Procedure>
<Name>DateTime</Name>
<Scope></Scope>
<Type>PropertyGet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Property Get DateTime() As UtilDateTime</Declaration>
<Parameters>
</Parameters>
<ReturnType>UtilDateTime</ReturnType>
</Procedure>
<Procedure>
<Name>Excel</Name>
<Scope></Scope>
<Type>PropertyGet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Property Get Excel() As UtilExcel</Declaration>
<Parameters>
</Parameters>
<ReturnType>UtilExcel</ReturnType>
</Procedure>
<Procedure>
<Name>File</Name>
<Scope></Scope>
<Type>PropertyGet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Property Get File() As UtilFile</Declaration>
<Parameters>
</Parameters>
<ReturnType>UtilFile</ReturnType>
</Procedure>
<Procedure>
<Name>Outlook</Name>
<Scope></Scope>
<Type>PropertyGet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Property Get Outlook() As UtilOutlook</Declaration>
<Parameters>
</Parameters>
<ReturnType>UtilOutlook</ReturnType>
</Procedure>
<Procedure>
<Name>Project</Name>
<Scope></Scope>
<Type>PropertyGet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Property Get Project() As UtilProject</Declaration>
<Parameters>
</Parameters>
<ReturnType>UtilProject</ReturnType>
</Procedure>
<Procedure>
<Name>Registry</Name>
<Scope></Scope>
<Type>PropertyGet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Property Get Registry() As UtilRegistry</Declaration>
<Parameters>
</Parameters>
<ReturnType>UtilRegistry</ReturnType>
</Procedure>
<Procedure>
<Name>Strings</Name>
<Scope></Scope>
<Type>PropertyGet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Property Get Strings() As UtilStrings</Declaration>
<Parameters>
</Parameters>
<ReturnType>UtilStrings</ReturnType>
</Procedure>
<Procedure>
<Name>Units</Name>
<Scope></Scope>
<Type>PropertyGet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Property Get Units() As UtilUnits</Declaration>
<Parameters>
</Parameters>
<ReturnType>UtilUnits</ReturnType>
</Procedure>
<Procedure>
<Name>Form</Name>
<Scope></Scope>
<Type>PropertyGet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Property Get Form() As UtilForm</Declaration>
<Parameters>
</Parameters>
<ReturnType>UtilForm</ReturnType>
</Procedure>
<Procedure>
<Name>Modules</Name>
<Scope></Scope>
<Type>PropertyGet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Property Get Modules() As UtilModules</Declaration>
<Parameters>
</Parameters>
<ReturnType>UtilModules</ReturnType>
</Procedure>
<Procedure>
<Name>RegEx</Name>
<Scope></Scope>
<Type>PropertyGet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Property Get RegEx() As UtilRegEx</Declaration>
<Parameters>
</Parameters>
<ReturnType>UtilRegEx</ReturnType>
</Procedure>
<Procedure>
<Name>RegExPatterns</Name>
<Scope></Scope>
<Type>PropertyGet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Property Get RegExPatterns() As UtilRegExPatterns</Declaration>
<Parameters>
</Parameters>
<ReturnType>UtilRegExPatterns</ReturnType>
</Procedure>
<Procedure>
<Name>Refresh</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub Refresh()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
</Procedures>
<CommentLines>
</CommentLines>
</CodeModule>
</File>
<File>
<Name>UtilModules</Name>
<FileName></FileName>
<PathFileName></PathFileName>
<Type>ClassModule</Type>
<Properties>
<Property>
<Name>Name</Name>
<Value>UtilModules</Value>
</Property>
<Property>
<Name>Instancing</Name>
<Value>1</Value>
</Property>
</Properties>
<CodeModule>
<CountOfDeclarationLines>14</CountOfDeclarationLines>
<CountOfLines>160</CountOfLines>
<Interfaces>
</Interfaces>
<Events>
</Events>
<Procedures>
<Procedure>
<Name>AllowedModuleExtensions</Name>
<Scope></Scope>
<Type>PropertyGet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Property Get AllowedModuleExtensions() As Variant</Declaration>
<Parameters>
</Parameters>
<ReturnType>Variant</ReturnType>
</Procedure>
<Procedure>
<Name>ExportModules</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>5</CountOfDeclarationLines>
<CountOfLines>55</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure   : ExportModules</CommentLine>
<CommentLine> Description : Exports all current project modules (cls, frm, bas) as files</CommentLine>
<CommentLine>   to the desired folder.</CommentLine>
<CommentLine>   If the folder does not exist it will be cerated.</CommentLine>
<CommentLine>   By default the modules will be exported to folder path &apos;ThisWorkbook.FullName &amp; &quot;_Files&quot;&apos;</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
<Declaration>Public Sub ExportModules( ByRef wb As Workbook, Optional ByVal dirPath As String = &quot;&quot;, Optional ByVal overwrite As Boolean = True )</Declaration>
<Parameters>
<Parameter>
<Name>wb</Name>
<Type>Workbook</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>dirPath</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>&quot;&quot;</DefaultValue>
</Parameter>
<Parameter>
<Name>overwrite</Name>
<Type>Boolean</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>True</DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>ImportModules</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>4</CountOfDeclarationLines>
<CountOfLines>34</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure   : ImportModules</CommentLine>
<CommentLine> Description : Imports all modules (cls, bas) found in a given folder</CommentLine>
<CommentLine>   (non recursive search)</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
<Declaration>Public Sub ImportModules( ByRef wb As Workbook, Optional ByVal dirPath As String = &quot;&quot; )</Declaration>
<Parameters>
<Parameter>
<Name>wb</Name>
<Type>Workbook</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>dirPath</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>&quot;&quot;</DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>GetDefaultProjectFilesFolderPath</Name>
<Scope></Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Function GetDefaultProjectFilesFolderPath(ByRef wb As Workbook) As String</Declaration>
<Parameters>
<Parameter>
<Name>wb</Name>
<Type>Workbook</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>String</ReturnType>
</Procedure>
<Procedure>
<Name>DeleteComponentWithName</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>4</CountOfDeclarationLines>
<CountOfLines>9</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub DeleteComponentWithName( ByRef wb As Workbook, ByVal name As String )</Declaration>
<Parameters>
<Parameter>
<Name>wb</Name>
<Type>Workbook</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>name</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>ExistsComponentWithName</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>4</CountOfDeclarationLines>
<CountOfLines>7</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function ExistsComponentWithName( ByRef wb As Workbook, ByVal name As String ) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>wb</Name>
<Type>Workbook</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>name</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>GetComponentWithName</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>4</CountOfDeclarationLines>
<CountOfLines>14</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function GetComponentWithName( ByRef wb As Workbook, ByVal name As String ) As Object</Declaration>
<Parameters>
<Parameter>
<Name>wb</Name>
<Type>Workbook</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>name</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Object</ReturnType>
</Procedure>
<Procedure>
<Name>DeleteComponents</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>3</CountOfDeclarationLines>
<CountOfLines>15</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub DeleteComponents( ByRef wb As Workbook )</Declaration>
<Parameters>
<Parameter>
<Name>wb</Name>
<Type>Workbook</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
</Procedures>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Module      : UtilModules</CommentLine>
<CommentLine> Author      : Ivanov, Bozhan</CommentLine>
<CommentLine> Description : Modules, Classes and Forms maangement functions</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
</CodeModule>
</File>
<File>
<Name>UtilRegExPatterns</Name>
<FileName></FileName>
<PathFileName></PathFileName>
<Type>ClassModule</Type>
<Properties>
<Property>
<Name>Name</Name>
<Value>UtilRegExPatterns</Value>
</Property>
<Property>
<Name>Instancing</Name>
<Value>1</Value>
</Property>
</Properties>
<CodeModule>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>81</CountOfLines>
<Interfaces>
</Interfaces>
<Events>
</Events>
<Procedures>
<Procedure>
<Name>DatePattern</Name>
<Scope></Scope>
<Type>PropertyGet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>17</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Property Get DatePattern() As String</Declaration>
<Parameters>
</Parameters>
<ReturnType>String</ReturnType>
</Procedure>
<Procedure>
<Name>NotDatePattern</Name>
<Scope></Scope>
<Type>PropertyGet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>17</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Property Get NotDatePattern() As String</Declaration>
<Parameters>
</Parameters>
<ReturnType>String</ReturnType>
</Procedure>
<Procedure>
<Name>ValueInQuotesPattern</Name>
<Scope></Scope>
<Type>PropertyGet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>6</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Property Get ValueInQuotesPattern() As String</Declaration>
<Parameters>
</Parameters>
<ReturnType>String</ReturnType>
</Procedure>
<Procedure>
<Name>PCMNumberPattern</Name>
<Scope></Scope>
<Type>PropertyGet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>14</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : PCMNumberPattern</CommentLine>
<CommentLine> Descr.    : Provides the patter for a PCm number consisting of</CommentLine>
<CommentLine>   [1 Digit]-[2 Digits]-[6 Digits] or</CommentLine>
<CommentLine>   [1 Digit]-[2 Digits]-[6 Digits]-[2 Digits]-[3 Digits]</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
<Declaration>Property Get PCMNumberPattern() As String</Declaration>
<Parameters>
</Parameters>
<ReturnType>String</ReturnType>
</Procedure>
<Procedure>
<Name>NotPCMNumberPattern</Name>
<Scope></Scope>
<Type>PropertyGet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>13</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : NotPCMNumberPattern</CommentLine>
<CommentLine> Descr.    : Provides the inverse regex for PCM Number</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
<Declaration>Property Get NotPCMNumberPattern() As String</Declaration>
<Parameters>
</Parameters>
<ReturnType>String</ReturnType>
</Procedure>
<Procedure>
<Name>LettersPattern</Name>
<Scope></Scope>
<Type>PropertyGet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Property Get LettersPattern() As String</Declaration>
<Parameters>
</Parameters>
<ReturnType>String</ReturnType>
</Procedure>
<Procedure>
<Name>NumbersPattern</Name>
<Scope></Scope>
<Type>PropertyGet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Property Get NumbersPattern() As String</Declaration>
<Parameters>
</Parameters>
<ReturnType>String</ReturnType>
</Procedure>
<Procedure>
<Name>VariableNamesPattern</Name>
<Scope></Scope>
<Type>PropertyGet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Property Get VariableNamesPattern() As String</Declaration>
<Parameters>
</Parameters>
<ReturnType>String</ReturnType>
</Procedure>
</Procedures>
<CommentLines>
</CommentLines>
</CodeModule>
</File>
<File>
<Name>ClassGenerator</Name>
<FileName></FileName>
<PathFileName></PathFileName>
<Type>ClassModule</Type>
<Properties>
<Property>
<Name>Name</Name>
<Value>ClassGenerator</Value>
</Property>
<Property>
<Name>Instancing</Name>
<Value>1</Value>
</Property>
</Properties>
<CodeModule>
<CountOfDeclarationLines>10</CountOfDeclarationLines>
<CountOfLines>412</CountOfLines>
<Interfaces>
</Interfaces>
<Events>
</Events>
<Procedures>
<Procedure>
<Name>GenerateSettingsClassFile</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>4</CountOfDeclarationLines>
<CountOfLines>33</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : generateSettingsClassFile</CommentLine>
<CommentLine> Purpose   : generates settings class module based on the settings defined in a settings</CommentLine>
<CommentLine>   worksheet and a settings listtable object</CommentLine>
<CommentLine>   Returns the path of the class file on successful creation</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
<Declaration>Public Function GenerateSettingsClassFile( ByRef wb As Workbook, ByVal ClassName As String ) As String</Declaration>
<Parameters>
<Parameter>
<Name>wb</Name>
<Type>Workbook</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>ClassName</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>String</ReturnType>
</Procedure>
<Procedure>
<Name>GenerateUtilityClassFile</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>6</CountOfDeclarationLines>
<CountOfLines>37</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : generateUtilityClassFile</CommentLine>
<CommentLine> Purpose   : generates a Utility class module based on the Utility classes in the curent</CommentLine>
<CommentLine>   project. Utility classes are defined by the utils name prefix</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
<Declaration>Public Function GenerateUtilityClassFile( ByRef wb As Workbook, ByVal ClassName As String, Optional ByVal prefix As String = &quot;util&quot;, Optional ByVal exclude As String = &quot;&quot; ) As String</Declaration>
<Parameters>
<Parameter>
<Name>wb</Name>
<Type>Workbook</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>ClassName</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>prefix</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>&quot;util&quot;</DefaultValue>
</Parameter>
<Parameter>
<Name>exclude</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>&quot;&quot;</DefaultValue>
</Parameter>
</Parameters>
<ReturnType>String</ReturnType>
</Procedure>
<Procedure>
<Name>GetNewClassFilePath</Name>
<Scope>Private</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>4</CountOfDeclarationLines>
<CountOfLines>27</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : getNewClassFilePath</CommentLine>
<CommentLine> Author    : Ivanov, Bozhan</CommentLine>
<CommentLine> Purpose   : returns a new class file path based on workbook location</CommentLine>
<CommentLine>   and class name provided</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
<Declaration>Private Function GetNewClassFilePath( ByRef wb As Workbook, ByVal ClassName As String ) As String</Declaration>
<Parameters>
<Parameter>
<Name>wb</Name>
<Type>Workbook</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>ClassName</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>String</ReturnType>
</Procedure>
<Procedure>
<Name>GetNewStream</Name>
<Scope>Private</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>3</CountOfDeclarationLines>
<CountOfLines>11</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : getNewStream</CommentLine>
<CommentLine> Author    : Ivanov, Bozhan</CommentLine>
<CommentLine> Purpose   : Returns a new stream object based on the provided path for the new class</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
<Declaration>Private Function GetNewStream( ByVal FilePath As String ) As TextStream</Declaration>
<Parameters>
<Parameter>
<Name>FilePath</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>TextStream</ReturnType>
</Procedure>
<Procedure>
<Name>WriteToStream</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>4</CountOfDeclarationLines>
<CountOfLines>20</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : writeToStream</CommentLine>
<CommentLine> Author    : Ivanov, Bozhan</CommentLine>
<CommentLine> Purpose   : writes attribute values, lines are defined as array entries</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
<Declaration>Private Sub WriteToStream( ByRef stream As TextStream, ByVal lines As Variant )</Declaration>
<Parameters>
<Parameter>
<Name>stream</Name>
<Type>TextStream</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>lines</Name>
<Type>Variant</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>GetSettingsClassContent</Name>
<Scope>Private</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>4</CountOfDeclarationLines>
<CountOfLines>123</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : getSettingsClassContent</CommentLine>
<CommentLine> Author    : Ivanov, Bozhan</CommentLine>
<CommentLine> Purpose   : Returns an array of lines of content specific for Settings Class</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
<Declaration>Private Function GetSettingsClassContent( ByRef wb As Workbook, ByVal ClassName As String ) As Variant</Declaration>
<Parameters>
<Parameter>
<Name>wb</Name>
<Type>Workbook</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>ClassName</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Variant</ReturnType>
</Procedure>
<Procedure>
<Name>GetEnumStructureForSettingRowId</Name>
<Scope>Private</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>6</CountOfDeclarationLines>
<CountOfLines>35</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : GetEnumStructureForSettingRowId</CommentLine>
<CommentLine> Author    : Ivanov, Bozhan</CommentLine>
<CommentLine> Purpose   : Generates Enum structure for the setting table defined in workbook</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
<Declaration>Private Function GetEnumStructureForSettingRowId( ByRef wb As Workbook, ByVal settingsListName As String, ByVal idColName As String, ByVal descriptionColName As String ) As Variant</Declaration>
<Parameters>
<Parameter>
<Name>wb</Name>
<Type>Workbook</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>settingsListName</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>idColName</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>descriptionColName</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Variant</ReturnType>
</Procedure>
<Procedure>
<Name>GenerateVariableNameFromCellContent</Name>
<Scope>Private</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>3</CountOfDeclarationLines>
<CountOfLines>19</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Function GenerateVariableNameFromCellContent( ByRef rng As Range ) As String</Declaration>
<Parameters>
<Parameter>
<Name>rng</Name>
<Type>Range</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>String</ReturnType>
</Procedure>
<Procedure>
<Name>GetUtilityClassContent</Name>
<Scope>Private</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>6</CountOfDeclarationLines>
<CountOfLines>67</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : GetUtilityClassContent</CommentLine>
<CommentLine> Author    : Ivanov, Bozhan</CommentLine>
<CommentLine> Purpose   : Returns an array of lines of content specific for Utility Class</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
<Declaration>Private Function GetUtilityClassContent( ByRef wb As Workbook, Optional ClassName As String = &quot;Utility&quot;, Optional ByVal prefix As String = &quot;util&quot;, Optional ByVal exclude As String = &quot;Utility&quot; ) As Variant</Declaration>
<Parameters>
<Parameter>
<Name>wb</Name>
<Type>Workbook</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>ClassName</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>&quot;Utility&quot;</DefaultValue>
</Parameter>
<Parameter>
<Name>prefix</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>&quot;util&quot;</DefaultValue>
</Parameter>
<Parameter>
<Name>exclude</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>&quot;Utility&quot;</DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Variant</ReturnType>
</Procedure>
<Procedure>
<Name>GetUtilityClassesNames</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>5</CountOfDeclarationLines>
<CountOfLines>29</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : GetUtilityClassesNames</CommentLine>
<CommentLine> Author    : Ivanov, Bozhan</CommentLine>
<CommentLine> Purpose   : returns the names of classes that match prefix and are not part of excluded</CommentLine>
<CommentLine>   Excluded can be multiple values in CSV form</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
<Declaration>Public Function GetUtilityClassesNames( ByRef wb As Workbook, Optional ByVal prefix As String = &quot;util&quot;, Optional exclude As String = &quot;Utility&quot; ) As Variant</Declaration>
<Parameters>
<Parameter>
<Name>wb</Name>
<Type>Workbook</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>prefix</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>&quot;util&quot;</DefaultValue>
</Parameter>
<Parameter>
<Name>exclude</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>&quot;Utility&quot;</DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Variant</ReturnType>
</Procedure>
</Procedures>
<CommentLines>
</CommentLines>
</CodeModule>
</File>
<File>
<Name>ArrayList</Name>
<FileName></FileName>
<PathFileName></PathFileName>
<Type>ClassModule</Type>
<Properties>
<Property>
<Name>Name</Name>
<Value>ArrayList</Value>
</Property>
<Property>
<Name>Instancing</Name>
<Value>1</Value>
</Property>
</Properties>
<CodeModule>
<CountOfDeclarationLines>10</CountOfDeclarationLines>
<CountOfLines>241</CountOfLines>
<Interfaces>
</Interfaces>
<Events>
</Events>
<Procedures>
<Procedure>
<Name>Class_Initialize</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub Class_Initialize()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>Values</Name>
<Scope></Scope>
<Type>PropertyGet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Property Get Values() As Variant</Declaration>
<Parameters>
</Parameters>
<ReturnType>Variant</ReturnType>
</Procedure>
<Procedure>
<Name>Values</Name>
<Scope></Scope>
<Type>PropertyLet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Property Let Values(ByRef inputArray As Variant)</Declaration>
<Parameters>
<Parameter>
<Name>inputArray</Name>
<Type>Variant</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>value</Name>
<Scope></Scope>
<Type>PropertyGet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>24</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Property Get value(ByVal key As Long) As Variant</Declaration>
<Parameters>
<Parameter>
<Name>key</Name>
<Type>Long</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Variant</ReturnType>
</Procedure>
<Procedure>
<Name>value</Name>
<Scope></Scope>
<Type>PropertyLet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>23</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Property Let value(ByVal key As Long, ByVal value As Variant)</Declaration>
<Parameters>
<Parameter>
<Name>key</Name>
<Type>Long</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>value</Name>
<Type>Variant</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>ub</Name>
<Scope></Scope>
<Type>PropertyGet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>8</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Property Get ub() As Long</Declaration>
<Parameters>
</Parameters>
<ReturnType>Long</ReturnType>
</Procedure>
<Procedure>
<Name>lb</Name>
<Scope></Scope>
<Type>PropertyGet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>8</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Property Get lb() As Long</Declaration>
<Parameters>
</Parameters>
<ReturnType>Long</ReturnType>
</Procedure>
<Procedure>
<Name>IsAllocated</Name>
<Scope></Scope>
<Type>PropertyGet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Property Get IsAllocated() As Boolean</Declaration>
<Parameters>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>Dimensions</Name>
<Scope></Scope>
<Type>PropertyGet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Property Get Dimensions() As Integer</Declaration>
<Parameters>
</Parameters>
<ReturnType>Integer</ReturnType>
</Procedure>
<Procedure>
<Name>IsDynamic</Name>
<Scope></Scope>
<Type>PropertyGet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Property Get IsDynamic() As Boolean</Declaration>
<Parameters>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>IsEmpty</Name>
<Scope></Scope>
<Type>PropertyGet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Property Get IsEmpty() As Boolean</Declaration>
<Parameters>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>min</Name>
<Scope></Scope>
<Type>PropertyGet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>19</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Property Get min() As Variant</Declaration>
<Parameters>
</Parameters>
<ReturnType>Variant</ReturnType>
</Procedure>
<Procedure>
<Name>max</Name>
<Scope></Scope>
<Type>PropertyGet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>19</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Property Get max() As Variant</Declaration>
<Parameters>
</Parameters>
<ReturnType>Variant</ReturnType>
</Procedure>
<Procedure>
<Name>VarsType</Name>
<Scope></Scope>
<Type>PropertyGet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Property Get VarsType() As VbVarType</Declaration>
<Parameters>
</Parameters>
<ReturnType>VbVarType</ReturnType>
</Procedure>
<Procedure>
<Name>GetIndexOf</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function GetIndexOf(ByVal value As Variant) As Long</Declaration>
<Parameters>
<Parameter>
<Name>value</Name>
<Type>Variant</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Long</ReturnType>
</Procedure>
<Procedure>
<Name>Contains</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>5</CountOfDeclarationLines>
<CountOfLines>8</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function Contains( ByVal value As Variant, Optional ByVal CompareMethod As VBA.VbCompareMethod = vbTextCompare, Optional ByVal LookAt As XlLookAt = XlLookAt.xlWhole ) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>value</Name>
<Type>Variant</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>CompareMethod</Name>
<Type>VBA.VbCompareMethod</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>vbTextCompare</DefaultValue>
</Parameter>
<Parameter>
<Name>LookAt</Name>
<Type>XlLookAt</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>XlLookAt.xlWhole</DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>Append</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>28</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : Append</CommentLine>
<CommentLine> Descr.    : Accepts simple vartypes, objects, collections and arrays and appends it to Me.a</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> TODO explore dimentions expansion</CommentLine>
<CommentLine> http://www.cpearson.com/excel/ArraysAndRanges.aspx</CommentLine>
</CommentLines>
<Declaration>Public Sub Append(ByVal varName As Variant)</Declaration>
<Parameters>
<Parameter>
<Name>varName</Name>
<Type>Variant</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>appendValue</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>14</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub appendValue(ByRef value As Variant)</Declaration>
<Parameters>
<Parameter>
<Name>value</Name>
<Type>Variant</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>appendCollection</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>7</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub appendCollection(ByRef col As Variant)</Declaration>
<Parameters>
<Parameter>
<Name>col</Name>
<Type>Variant</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>ToString</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function ToString() As String</Declaration>
<Parameters>
</Parameters>
<ReturnType>String</ReturnType>
</Procedure>
<Procedure>
<Name>Reverse</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub Reverse()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>Intersect</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>14</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub Intersect(ByRef arr As Variant)</Declaration>
<Parameters>
<Parameter>
<Name>arr</Name>
<Type>Variant</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>SortInPlace</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub SortInPlace(Optional ByVal Descending As Boolean = False)</Declaration>
<Parameters>
<Parameter>
<Name>Descending</Name>
<Type>Boolean</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>False</DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>Clear</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub Clear()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>Remove</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function Remove(ByVal Index As Long) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>Index</Name>
<Type>Long</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
</Procedures>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Module    : ArrayList</CommentLine>
<CommentLine> Author    : Ivanov, Bozhan</CommentLine>
<CommentLine> Purpose   : Extends the functionality of a single dimention array</CommentLine>
<CommentLine> Note      : Since the extend is class extra array dimentions can be added by appending</CommentLine>
<CommentLine>             an object of the ArrayList class as an element of another object of ArrayList</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine>TODO Implement the RemoveDuplicate and getDuplicate functions from utilarrays</CommentLine>
</CommentLines>
</CodeModule>
</File>
<File>
<Name>frmListChoice</Name>
<FileName></FileName>
<PathFileName></PathFileName>
<Type>MSForm</Type>
<Properties>
<Property>
<Value></Value>
</Property>
</Properties>
<CodeModule>
<CountOfDeclarationLines>0</CountOfDeclarationLines>
<CountOfLines>10</CountOfLines>
<Interfaces>
</Interfaces>
<Events>
</Events>
<Procedures>
<Procedure>
<Name>cmdCancel_Click</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub cmdCancel_Click()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>cmdOk_Click</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub cmdOk_Click()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
</Procedures>
<CommentLines>
</CommentLines>
</CodeModule>
<Controls>
<Control>
<Name>lblText</Name>
<ProgId>MSForms.Label</ProgId>
<ClassName>Label</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value></Value>
</Property>
</Properties>
</Control>
<Control>
<Name>lstSelections</Name>
<ProgId>MSForms.ListBox</ProgId>
<ClassName>ListBox</ClassName>
</Control>
<Control>
<Name>cmdOK</Name>
<ProgId>MSForms.CommandButton</ProgId>
<ClassName>CommandButton</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>OK</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>cmdCancel</Name>
<ProgId>MSForms.CommandButton</ProgId>
<ClassName>CommandButton</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Cancel</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>lblHint</Name>
<ProgId>MSForms.Label</ProgId>
<ClassName>Label</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Hint: You can select multiple sheets by using Ctrl or Shift</Value>
</Property>
</Properties>
</Control>
</Controls>
</File>
<File>
<Name>frmBase</Name>
<FileName></FileName>
<PathFileName></PathFileName>
<Type>MSForm</Type>
<Properties>
<Property>
<Value></Value>
</Property>
</Properties>
<CodeModule>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>1</CountOfLines>
<Interfaces>
</Interfaces>
<Events>
</Events>
<Procedures>
</Procedures>
<CommentLines>
</CommentLines>
</CodeModule>
<Controls>
</Controls>
</File>
<File>
<Name>Settings</Name>
<FileName></FileName>
<PathFileName></PathFileName>
<Type>ClassModule</Type>
<Properties>
<Property>
<Name>Name</Name>
<Value>Settings</Value>
</Property>
<Property>
<Name>Instancing</Name>
<Value>1</Value>
</Property>
</Properties>
<CodeModule>
<CountOfDeclarationLines>35</CountOfDeclarationLines>
<CountOfLines>123</CountOfLines>
<Interfaces>
</Interfaces>
<Events>
</Events>
<Procedures>
<Procedure>
<Name>Class_Initialize</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>5</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub Class_Initialize()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>Class_Terminate</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>7</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub Class_Terminate()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>Workbook</Name>
<Scope>Public</Scope>
<Type>PropertyGet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>6</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Property Get Workbook() As Workbook</Declaration>
<Parameters>
</Parameters>
<ReturnType>Workbook</ReturnType>
</Procedure>
<Procedure>
<Name>Workbook</Name>
<Scope>Public</Scope>
<Type>PropertyLet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>5</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Property Let Workbook(ByRef wbk As Workbook)</Declaration>
<Parameters>
<Parameter>
<Name>wbk</Name>
<Type>Workbook</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>ListObject</Name>
<Scope>Public</Scope>
<Type>PropertyGet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>8</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Property Get ListObject() As ListObject</Declaration>
<Parameters>
</Parameters>
<ReturnType>ListObject</ReturnType>
</Procedure>
<Procedure>
<Name>ListObject</Name>
<Scope>Public</Scope>
<Type>PropertyLet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>5</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Property Let ListObject(ByRef lobj As ListObject)</Declaration>
<Parameters>
<Parameter>
<Name>lobj</Name>
<Type>ListObject</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>Worksheet</Name>
<Scope>Public</Scope>
<Type>PropertyGet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>8</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Property Get Worksheet() As Worksheet</Declaration>
<Parameters>
</Parameters>
<ReturnType>Worksheet</ReturnType>
</Procedure>
<Procedure>
<Name>Worksheet</Name>
<Scope>Public</Scope>
<Type>PropertyLet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>5</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Property Let Worksheet(ByRef wsh As Worksheet)</Declaration>
<Parameters>
<Parameter>
<Name>wsh</Name>
<Type>Worksheet</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>Setting</Name>
<Scope>Public</Scope>
<Type>PropertyGet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>6</CountOfLines>
<CommentLines>
<CommentLine>checkNamesExistance &apos;not really necessary unless we expect someone to change names of settings before execution</CommentLine>
</CommentLines>
<Declaration>Public Property Get Setting(ByVal id As SettingRowId) As Variant</Declaration>
<Parameters>
<Parameter>
<Name>id</Name>
<Type>SettingRowId</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Variant</ReturnType>
</Procedure>
<Procedure>
<Name>getIdRow</Name>
<Scope>Private</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>20</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Function getIdRow(ByVal id As SettingRowId) As Long</Declaration>
<Parameters>
<Parameter>
<Name>id</Name>
<Type>SettingRowId</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Long</ReturnType>
</Procedure>
<Procedure>
<Name>checkNamesExistance</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>12</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub checkNamesExistance()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
</Procedures>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Module    : Settings</CommentLine>
<CommentLine> Author    : Bozhan Ivanov -</CommentLine>
<CommentLine> Purpose   : Automatically generated class for Tool Template Excel by Bozhan Ivanov</CommentLine>
<CommentLine> Comment   : Default error handling should be avoided here because it references the</CommentLine>
<CommentLine>   settings class.</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
</CodeModule>
</File>
<File>
<Name>Sheet4</Name>
<FileName></FileName>
<PathFileName></PathFileName>
<Type>VBADocument</Type>
<Properties>
<Property>
<Name>Creator</Name>
<Value>1480803660</Value>
</Property>
<Property>
<Name>CodeName</Name>
<Value>Sheet4</Value>
</Property>
<Property>
<Name>_CodeName</Name>
<Value>Sheet4</Value>
</Property>
<Property>
<Name>Index</Name>
<Value>4</Value>
</Property>
<Property>
<Name>Name</Name>
<Value>Import Settings</Value>
</Property>
<Property>
<Name>Next</Name>
<Value></Value>
</Property>
<Property>
<Name>OnDoubleClick</Name>
<Value></Value>
</Property>
<Property>
<Name>OnSheetActivate</Name>
<Value></Value>
</Property>
<Property>
<Name>OnSheetDeactivate</Name>
<Value></Value>
</Property>
<Property>
<Name>ProtectContents</Name>
<Value>False</Value>
</Property>
<Property>
<Name>ProtectDrawingObjects</Name>
<Value>False</Value>
</Property>
<Property>
<Name>ProtectionMode</Name>
<Value>False</Value>
</Property>
<Property>
<Name>ProtectScenarios</Name>
<Value>False</Value>
</Property>
<Property>
<Name>Visible</Name>
<Value>-1</Value>
</Property>
<Property>
<Name>TransitionExpEval</Name>
<Value>False</Value>
</Property>
<Property>
<Name>AutoFilterMode</Name>
<Value>False</Value>
</Property>
<Property>
<Name>EnableCalculation</Name>
<Value>True</Value>
</Property>
<Property>
<Name>CircularReference</Name>
<Value></Value>
</Property>
<Property>
<Name>ConsolidationFunction</Name>
<Value>-4157</Value>
</Property>
<Property>
<Name>ConsolidationOptions</Name>
<Value></Value>
</Property>
<Property>
<Name>ConsolidationSources</Name>
<Value></Value>
</Property>
<Property>
<Name>DisplayAutomaticPageBreaks</Name>
<Value>False</Value>
</Property>
<Property>
<Name>EnableAutoFilter</Name>
<Value>False</Value>
</Property>
<Property>
<Name>EnableSelection</Name>
<Value>0</Value>
</Property>
<Property>
<Name>EnableOutlining</Name>
<Value>False</Value>
</Property>
<Property>
<Name>EnablePivotTable</Name>
<Value>False</Value>
</Property>
<Property>
<Name>FilterMode</Name>
<Value>False</Value>
</Property>
<Property>
<Name>OnCalculate</Name>
<Value></Value>
</Property>
<Property>
<Name>OnData</Name>
<Value></Value>
</Property>
<Property>
<Name>OnEntry</Name>
<Value></Value>
</Property>
<Property>
<Name>Range</Name>
<Value></Value>
</Property>
<Property>
<Name>ScrollArea</Name>
<Value></Value>
</Property>
<Property>
<Name>StandardHeight</Name>
<Value>15</Value>
</Property>
<Property>
<Name>StandardWidth</Name>
<Value>8,43</Value>
</Property>
<Property>
<Name>TransitionFormEntry</Name>
<Value>False</Value>
</Property>
<Property>
<Name>Type</Name>
<Value>-4167</Value>
</Property>
<Property>
<Name>DisplayPageBreaks</Name>
<Value>False</Value>
</Property>
<Property>
<Name>_DisplayRightToLeft</Name>
<Value>False</Value>
</Property>
<Property>
<Name>AutoFilter</Name>
<Value></Value>
</Property>
<Property>
<Name>DisplayRightToLeft</Name>
<Value>False</Value>
</Property>
<Property>
<Name>EnableFormatConditionsCalculation</Name>
<Value>True</Value>
</Property>
<Property>
<Name>PrintedCommentPages</Name>
<Value>1</Value>
</Property>
</Properties>
<CodeModule>
<CountOfDeclarationLines>0</CountOfDeclarationLines>
<CountOfLines>0</CountOfLines>
<Interfaces>
</Interfaces>
<Events>
</Events>
<Procedures>
</Procedures>
<CommentLines>
</CommentLines>
</CodeModule>
</File>
<File>
<Name>UtilWord</Name>
<FileName></FileName>
<PathFileName></PathFileName>
<Type>ClassModule</Type>
<Properties>
<Property>
<Name>Name</Name>
<Value>UtilWord</Value>
</Property>
<Property>
<Name>Instancing</Name>
<Value>1</Value>
</Property>
</Properties>
<CodeModule>
<CountOfDeclarationLines>6</CountOfDeclarationLines>
<CountOfLines>35</CountOfLines>
<Interfaces>
</Interfaces>
<Events>
</Events>
<Procedures>
<Procedure>
<Name>CreateWordDocument</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>29</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : GetHiddenColumnsIndeces</CommentLine>
<CommentLine> Descr.    : Uses a saved word document tempalte as an OLE obejct in a worksheet</CommentLine>
<CommentLine>   to generate and fill in a word document</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
<Declaration>Public Function CreateWordDocument(ByVal strID As String, ByVal strRev As String, ByVal strTempPath As String) As String</Declaration>
<Parameters>
<Parameter>
<Name>strID</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>strRev</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>strTempPath</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>String</ReturnType>
</Procedure>
</Procedures>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Module    : UtilWord</CommentLine>
<CommentLine> Author    : Ivanov, Bozhan</CommentLine>
<CommentLine> Purpose   : Provides ms word utilities to extend functionality and management and</CommentLine>
<CommentLine>   generation of MS Word documents</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
</CodeModule>
</File>
<File>
<Name>UtilFont</Name>
<FileName></FileName>
<PathFileName></PathFileName>
<Type>ClassModule</Type>
<Properties>
<Property>
<Name>Name</Name>
<Value>UtilFont</Value>
</Property>
<Property>
<Name>Instancing</Name>
<Value>1</Value>
</Property>
</Properties>
<CodeModule>
<CountOfDeclarationLines>6</CountOfDeclarationLines>
<CountOfLines>151</CountOfLines>
<Interfaces>
</Interfaces>
<Events>
</Events>
<Procedures>
<Procedure>
<Name>GetTextPoints</Name>
<Scope></Scope>
<Type>Function</Type>
<CountOfDeclarationLines>3</CountOfDeclarationLines>
<CountOfLines>45</CountOfLines>
<CommentLines>
<CommentLine>GetTextPoints returns points width of text.</CommentLine>
<CommentLine>When setting a control width, add two additional</CommentLine>
<CommentLine>space widths to these values to avoid end clipping.</CommentLine>
<CommentLine>Needs a user form called CountPoints. Form</CommentLine>
<CommentLine>is loaded and unloaded but never shown.</CommentLine>
<CommentLine>Monospace test: could be used here to identify monospaced fonts</CommentLine>
<CommentLine>If pair is same width then monospaced</CommentLine>
<CommentLine>IIIIIIIIII</CommentLine>
<CommentLine>HHHHHHHHHH</CommentLine>
<CommentLine>Kerning test pair used by printers: Wont work here since there is no kerning in userform controls.</CommentLine>
<CommentLine>If pair are different width then there is kerning.</CommentLine>
<CommentLine>AAAAATTTTT</CommentLine>
<CommentLine>ATATATATAT</CommentLine>
</CommentLines>
<Declaration>Function GetTextPoints(sIn As String, sFontName As String, nFontSize As Single, bFontBold As Boolean, bFontItalic As Boolean) As Long</Declaration>
<Parameters>
<Parameter>
<Name>sIn</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>sFontName</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>nFontSize</Name>
<Type>Single</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>bFontBold</Name>
<Type>Boolean</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>bFontItalic</Name>
<Type>Boolean</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Long</ReturnType>
</Procedure>
<Procedure>
<Name>ListAllExcelFonts</Name>
<Scope></Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>72</CountOfLines>
<CommentLines>
<CommentLine>Lists Excel fonts as monospaced or proportional</CommentLine>
<CommentLine>with a sample of text and its width in points</CommentLine>
<CommentLine>calls GetTextPoints to measure test strings</CommentLine>
<CommentLine>needs use of Sheet1 - clears all existing</CommentLine>
</CommentLines>
<Declaration>Sub ListAllExcelFonts()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>testit</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>14</CountOfLines>
<CommentLines>
<CommentLine> Find whether or not a font exists</CommentLine>
</CommentLines>
<Declaration>Private Sub testit()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>FontExists</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>13</CountOfLines>
<CommentLines>
<CommentLine> Returns true in function name</CommentLine>
<CommentLine> if parameter font name exists</CommentLine>
</CommentLines>
<Declaration>Public Function FontExists(FontName As String) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>FontName</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
</Procedures>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Module      : UtilFont</CommentLine>
<CommentLine> Author      : Ivanov, Bozhan</CommentLine>
<CommentLine> Description :</CommentLine>
<CommentLine> Source      : https://en.wikibooks.org/wiki/Visual_Basic_for_Applications/Font_Utilities</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
</CodeModule>
</File>
<File>
<Name>UtilSmartCard</Name>
<FileName></FileName>
<PathFileName></PathFileName>
<Type>ClassModule</Type>
<Properties>
<Property>
<Name>Name</Name>
<Value>UtilSmartCard</Value>
</Property>
<Property>
<Name>Instancing</Name>
<Value>1</Value>
</Property>
</Properties>
<CodeModule>
<CountOfDeclarationLines>211</CountOfDeclarationLines>
<CountOfLines>350</CountOfLines>
<Interfaces>
</Interfaces>
<Events>
</Events>
<Procedures>
<Procedure>
<Name>test</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>79</CountOfLines>
<CommentLines>
<CommentLine>https://stackoverflow.com/questions/31592198/basic-smart-card-testing-in-windows</CommentLine>
</CommentLines>
<Declaration>Public Sub test()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
</Procedures>
<CommentLines>
<CommentLine>**************************************************************************</CommentLine>
<CommentLine> winscard.dll Visual Basic Function Prototypes</CommentLine>
<CommentLine>**************************************************************************</CommentLine>
<CommentLine>http://msdn.microsoft.com/en-us/library/aa379466(VS.85).aspx</CommentLine>
</CommentLines>
</CodeModule>
</File>
<File>
<Name>UtilHash</Name>
<FileName></FileName>
<PathFileName></PathFileName>
<Type>ClassModule</Type>
<Properties>
<Property>
<Name>Name</Name>
<Value>UtilHash</Value>
</Property>
<Property>
<Name>Instancing</Name>
<Value>1</Value>
</Property>
</Properties>
<CodeModule>
<CountOfDeclarationLines>13</CountOfDeclarationLines>
<CountOfLines>242</CountOfLines>
<Interfaces>
</Interfaces>
<Events>
</Events>
<Procedures>
<Procedure>
<Name>GetHash</Name>
<Scope>Private</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>5</CountOfDeclarationLines>
<CountOfLines>48</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure   : GetHash</CommentLine>
<CommentLine> Description : Generic Hash function that takes in provider and any number of inputs</CommentLine>
<CommentLine>   If input us of simple data type it is converted to string and hashed</CommentLine>
<CommentLine>   if input is a byte array it will just be processed</CommentLine>
<CommentLine>   if input does not match any conditions an empty string hash is returned</CommentLine>
<CommentLine> References  :</CommentLine>
<CommentLine>   mscorlib.dll - Microsoft.NET 4.0 64-bit,</CommentLine>
<CommentLine>   msxml6.dll - Microsoft XML, v6.0</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
<Declaration>Private Function GetHash( vIn As Variant, Provider As String, Optional ConvertToB64 As Boolean = False ) As String</Declaration>
<Parameters>
<Parameter>
<Name>vIn</Name>
<Type>Variant</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Provider</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>ConvertToB64</Name>
<Type>Boolean</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>False</DefaultValue>
</Parameter>
</Parameters>
<ReturnType>String</ReturnType>
</Procedure>
<Procedure>
<Name>ConvToBase64String</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>3</CountOfDeclarationLines>
<CountOfLines>12</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function ConvToBase64String( vIn() As Byte ) As String</Declaration>
<Parameters>
<Parameter>
<Name>vIn()</Name>
<Type>Byte</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>String</ReturnType>
</Procedure>
<Procedure>
<Name>ConvToHexString</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>3</CountOfDeclarationLines>
<CountOfLines>12</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function ConvToHexString( vIn() As Byte ) As String</Declaration>
<Parameters>
<Parameter>
<Name>vIn()</Name>
<Type>Byte</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>String</ReturnType>
</Procedure>
<Procedure>
<Name>MD5</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>4</CountOfDeclarationLines>
<CountOfLines>17</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure   : MD5</CommentLine>
<CommentLine> Description : Returns MD5 hashed string from the input string</CommentLine>
<CommentLine>   Test with empty string input:</CommentLine>
<CommentLine>   Hex: d41d8cd98f00b204e9800998ecf8427e</CommentLine>
<CommentLine>   Base-64: 1B2M2Y8AsgTpgAmY7PhCfg==</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
<Declaration>Public Function MD5( ByVal sIn As String, Optional ConvertToB64 As Boolean = False ) As String</Declaration>
<Parameters>
<Parameter>
<Name>sIn</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>ConvertToB64</Name>
<Type>Boolean</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>False</DefaultValue>
</Parameter>
</Parameters>
<ReturnType>String</ReturnType>
</Procedure>
<Procedure>
<Name>SHA1</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>4</CountOfDeclarationLines>
<CountOfLines>17</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure   : SHA1</CommentLine>
<CommentLine> Description : Returns SHA1 hashed string from the input string</CommentLine>
<CommentLine>    Test with empty string input:</CommentLine>
<CommentLine>    40 Hex:   da39a3ee5e6...etc</CommentLine>
<CommentLine>    28 Base-64:   2jmj7l5rSw0yVb...etc</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
<Declaration>Public Function SHA1( ByVal sIn As String, Optional ConvertToB64 As Boolean = False ) As String</Declaration>
<Parameters>
<Parameter>
<Name>sIn</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>ConvertToB64</Name>
<Type>Boolean</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>False</DefaultValue>
</Parameter>
</Parameters>
<ReturnType>String</ReturnType>
</Procedure>
<Procedure>
<Name>SHA256</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>4</CountOfDeclarationLines>
<CountOfLines>17</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure   : SHA256</CommentLine>
<CommentLine> Description : Returns SHA256 hashed string from the input string</CommentLine>
<CommentLine>    Test with empty string input:</CommentLine>
<CommentLine>    64 Hex:   e3b0c44298f...etc</CommentLine>
<CommentLine>    44 Base-64:   47DEQpj8HBSa+/...etc</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
<Declaration>Public Function SHA256( ByVal sIn As String, Optional ConvertToB64 As Boolean = False ) As String</Declaration>
<Parameters>
<Parameter>
<Name>sIn</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>ConvertToB64</Name>
<Type>Boolean</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>False</DefaultValue>
</Parameter>
</Parameters>
<ReturnType>String</ReturnType>
</Procedure>
<Procedure>
<Name>SHA384</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>4</CountOfDeclarationLines>
<CountOfLines>17</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure   : SHA384</CommentLine>
<CommentLine> Description : Returns SHA384 hashed string from the input string</CommentLine>
<CommentLine>   Test with empty string input:</CommentLine>
<CommentLine>   96 Hex:   38b060a751ac...etc</CommentLine>
<CommentLine>   64 Base-64:   OLBgp1GsljhM2T...etc</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
<Declaration>Public Function SHA384( ByVal sIn As String, Optional ConvertToB64 As Boolean = False ) As String</Declaration>
<Parameters>
<Parameter>
<Name>sIn</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>ConvertToB64</Name>
<Type>Boolean</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>False</DefaultValue>
</Parameter>
</Parameters>
<ReturnType>String</ReturnType>
</Procedure>
<Procedure>
<Name>SHA512</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>4</CountOfDeclarationLines>
<CountOfLines>17</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure   : SHA512</CommentLine>
<CommentLine> Description : Returns a SHA512 hashed string from the input string</CommentLine>
<CommentLine>   Test with empty string input:</CommentLine>
<CommentLine>   128 Hex:   cf83e1357eefb8bd...etc</CommentLine>
<CommentLine>   88 Base-64:   z4PhNX7vuL3xVChQ...etc</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
<Declaration>Public Function SHA512( ByVal sIn As String, Optional ConvertToB64 As Boolean = False ) As String</Declaration>
<Parameters>
<Parameter>
<Name>sIn</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>ConvertToB64</Name>
<Type>Boolean</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>False</DefaultValue>
</Parameter>
</Parameters>
<ReturnType>String</ReturnType>
</Procedure>
<Procedure>
<Name>FileToMD5</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>4</CountOfDeclarationLines>
<CountOfLines>14</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure   : FileToMD5</CommentLine>
<CommentLine> Description : Returns a MD5 hashed string from file content</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
<Declaration>Public Function FileToMD5( FilePath As String, Optional ConvertToB64 As Boolean = False ) As String</Declaration>
<Parameters>
<Parameter>
<Name>FilePath</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>ConvertToB64</Name>
<Type>Boolean</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>False</DefaultValue>
</Parameter>
</Parameters>
<ReturnType>String</ReturnType>
</Procedure>
<Procedure>
<Name>FileToSHA1</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>4</CountOfDeclarationLines>
<CountOfLines>14</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure   : FileToSHA1</CommentLine>
<CommentLine> Description : Returns a SHA1 hashed string from file content</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
<Declaration>Public Function FileToSHA1( FilePath As String, Optional ConvertToB64 As Boolean = False ) As String</Declaration>
<Parameters>
<Parameter>
<Name>FilePath</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>ConvertToB64</Name>
<Type>Boolean</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>False</DefaultValue>
</Parameter>
</Parameters>
<ReturnType>String</ReturnType>
</Procedure>
<Procedure>
<Name>FileToSHA256</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>4</CountOfDeclarationLines>
<CountOfLines>14</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure   : FileToSHA256</CommentLine>
<CommentLine> Description : Returns a SHA256 hashed string from file content</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
<Declaration>Public Function FileToSHA256( FilePath As String, Optional ConvertToB64 As Boolean = False ) As String</Declaration>
<Parameters>
<Parameter>
<Name>FilePath</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>ConvertToB64</Name>
<Type>Boolean</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>False</DefaultValue>
</Parameter>
</Parameters>
<ReturnType>String</ReturnType>
</Procedure>
<Procedure>
<Name>FileToSHA384</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>4</CountOfDeclarationLines>
<CountOfLines>14</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure   : FileToSHA384</CommentLine>
<CommentLine> Description : Returns a SHA384 hashed string from file content</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
<Declaration>Public Function FileToSHA384( FilePath As String, Optional ConvertToB64 As Boolean = False ) As String</Declaration>
<Parameters>
<Parameter>
<Name>FilePath</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>ConvertToB64</Name>
<Type>Boolean</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>False</DefaultValue>
</Parameter>
</Parameters>
<ReturnType>String</ReturnType>
</Procedure>
<Procedure>
<Name>FileToSHA512</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>4</CountOfDeclarationLines>
<CountOfLines>14</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure   : FileToSHA512</CommentLine>
<CommentLine> Description : Returns a SHA512 hashed string from file content</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
<Declaration>Public Function FileToSHA512( FilePath As String, Optional ConvertToB64 As Boolean = False ) As String</Declaration>
<Parameters>
<Parameter>
<Name>FilePath</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>ConvertToB64</Name>
<Type>Boolean</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>False</DefaultValue>
</Parameter>
</Parameters>
<ReturnType>String</ReturnType>
</Procedure>
</Procedures>
<CommentLines>
</CommentLines>
</CodeModule>
</File>
<File>
<Name>UtilCrypt</Name>
<FileName></FileName>
<PathFileName></PathFileName>
<Type>ClassModule</Type>
<Properties>
<Property>
<Name>Name</Name>
<Value>UtilCrypt</Value>
</Property>
<Property>
<Name>Instancing</Name>
<Value>1</Value>
</Property>
</Properties>
<CodeModule>
<CountOfDeclarationLines>273</CountOfDeclarationLines>
<CountOfLines>1474</CountOfLines>
<Interfaces>
</Interfaces>
<Events>
</Events>
<Procedures>
<Procedure>
<Name>EncryptionCSPConnect</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>19</CountOfLines>
<CommentLines>
<CommentLine>================================================================================================================</CommentLine>
</CommentLines>
<Declaration>Public Function EncryptionCSPConnect() As Boolean</Declaration>
<Parameters>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>EncryptionCSPDisconnect</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>9</CountOfLines>
<CommentLines>
<CommentLine>Release provider handle.</CommentLine>
<CommentLine>Function Adapted</CommentLine>
</CommentLines>
<Declaration>Public Sub EncryptionCSPDisconnect()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>EncryptData</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>38</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function EncryptData(ByVal data As String, ByVal Password As String) As String</Declaration>
<Parameters>
<Parameter>
<Name>data</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Password</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>String</ReturnType>
</Procedure>
<Procedure>
<Name>DecryptData</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>16</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function DecryptData(ByVal data As String, ByVal Password As String) As String</Declaration>
<Parameters>
<Parameter>
<Name>data</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Password</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>String</ReturnType>
</Procedure>
<Procedure>
<Name>GetCSPDetails</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>24</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function GetCSPDetails() As String</Declaration>
<Parameters>
</Parameters>
<ReturnType>String</ReturnType>
</Procedure>
<Procedure>
<Name>EncryptDecrypt</Name>
<Scope>Private</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>89</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Function EncryptDecrypt(ByVal data As String, ByVal Password As String, ByVal encrypt As Boolean) As String</Declaration>
<Parameters>
<Parameter>
<Name>data</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Password</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>encrypt</Name>
<Type>Boolean</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>String</ReturnType>
</Procedure>
<Procedure>
<Name>ByteToStr</Name>
<Scope>Private</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>7</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Function ByteToStr(ByRef ByteArray() As Byte, ByVal lLength As Long) As String</Declaration>
<Parameters>
<Parameter>
<Name>ByteArray()</Name>
<Type>Byte</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>lLength</Name>
<Type>Long</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>String</ReturnType>
</Procedure>
<Procedure>
<Name>EncryptNumber</Name>
<Scope>Private</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>11</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Function EncryptNumber(ByVal lNumber As Long) As String</Declaration>
<Parameters>
<Parameter>
<Name>lNumber</Name>
<Type>Long</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>String</ReturnType>
</Procedure>
<Procedure>
<Name>DecryptNumber</Name>
<Scope>Private</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>8</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Function DecryptNumber(ByVal sNumber As String) As Long</Declaration>
<Parameters>
<Parameter>
<Name>sNumber</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Long</ReturnType>
</Procedure>
<Procedure>
<Name>InitUser</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>6</CountOfDeclarationLines>
<CountOfLines>111</CountOfLines>
<CommentLines>
<CommentLine>Merge With</CommentLine>
<CommentLine>==================================================================================================================</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : InitUser</CommentLine>
<CommentLine> Purpose   :</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
<Declaration>Public Function InitUser( Optional ByVal ProviderName As String = DEFAULT_PROVIDER_NAME, Optional ByVal ProviderType As Long = DEFAULT_PROVIDER, Optional ByVal hashAlg As Long = EnmHashAlgo.CALG_SHA512, Optional ByVal CryptAlg As Long = EnmCryptAlgo.CALG_AES_256 ) As Long</Declaration>
<Parameters>
<Parameter>
<Name>ProviderName</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>DEFAULT_PROVIDER_NAME</DefaultValue>
</Parameter>
<Parameter>
<Name>ProviderType</Name>
<Type>Long</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>DEFAULT_PROVIDER</DefaultValue>
</Parameter>
<Parameter>
<Name>hashAlg</Name>
<Type>Long</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>EnmHashAlgo.CALG_SHA512</DefaultValue>
</Parameter>
<Parameter>
<Name>CryptAlg</Name>
<Type>Long</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>EnmCryptAlgo.CALG_AES_256</DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Long</ReturnType>
</Procedure>
<Procedure>
<Name>Sign</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>58</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : Sign</CommentLine>
<CommentLine> Purpose   : Creates a signature for Inbuffer and places in Signature property</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
<Declaration>Public Sub Sign()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>Validate</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>79</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : Validate</CommentLine>
<CommentLine> Purpose   : Validates InBuffer with Signature and assigns Status with result</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
<Declaration>Public Sub Validate()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>encrypt</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>76</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : Encrypt</CommentLine>
<CommentLine> Purpose   : Encrypt InBuffer into OutBuffer</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
<Declaration>Public Sub encrypt()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>Decrypt</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>76</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : Decrypt</CommentLine>
<CommentLine> Purpose   : Decrypt InBuffer into OutBuffer</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
<Declaration>Public Sub Decrypt()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>RSAEncryptDecrypt</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>37</CountOfLines>
<CommentLines>
<CommentLine>Encrypt Decrypt with .NET</CommentLine>
<CommentLine>============================================================================================================</CommentLine>
</CommentLines>
<Declaration>Public Function RSAEncryptDecrypt(ByVal value As String)</Declaration>
<Parameters>
<Parameter>
<Name>value</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>RsaExportKey</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>2</CountOfDeclarationLines>
<CountOfLines>65</CountOfLines>
<CommentLines>
<CommentLine>FROM EX Crypt</CommentLine>
</CommentLines>
<Declaration>Public Function RsaExportKey(KeyType As EnmRsaKeyTypes, KeyPart As EnmRsaKeyParts, Optional Password As String = vbNullString, Optional Algid As EnmCryptAlgo = CALG_DES) As Byte()</Declaration>
<Parameters>
<Parameter>
<Name>KeyType</Name>
<Type>EnmRsaKeyTypes</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>KeyPart</Name>
<Type>EnmRsaKeyParts</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Password</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>vbNullString</DefaultValue>
</Parameter>
<Parameter>
<Name>Algid</Name>
<Type>EnmCryptAlgo</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>CALG_DES</DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Byte()</ReturnType>
</Procedure>
<Procedure>
<Name>DH_Key_Exchange</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>235</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub DH_Key_Exchange(Optional ByVal KeyLength As Integer = 1024)</Declaration>
<Parameters>
<Parameter>
<Name>KeyLength</Name>
<Type>Integer</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>1024</DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
</Procedures>
<CommentLines>
</CommentLines>
</CodeModule>
</File>
<File>
<Name>UtilOutlook</Name>
<FileName></FileName>
<PathFileName></PathFileName>
<Type>ClassModule</Type>
<Properties>
<Property>
<Name>Name</Name>
<Value>UtilOutlook</Value>
</Property>
<Property>
<Name>Instancing</Name>
<Value>1</Value>
</Property>
</Properties>
<CodeModule>
<CountOfDeclarationLines>46</CountOfDeclarationLines>
<CountOfLines>263</CountOfLines>
<Interfaces>
</Interfaces>
<Events>
</Events>
<Procedures>
<Procedure>
<Name>IsOutlookInstalled</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>2</CountOfDeclarationLines>
<CountOfLines>7</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function IsOutlookInstalled( ) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name></Name>
<Type></Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>GetOutlookApp</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>2</CountOfDeclarationLines>
<CountOfLines>13</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function GetOutlookApp( ) As Object</Declaration>
<Parameters>
<Parameter>
<Name></Name>
<Type></Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Object</ReturnType>
</Procedure>
<Procedure>
<Name>createOutlookAppointment</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>8</CountOfDeclarationLines>
<CountOfLines>61</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : createOutlookAppointment</CommentLine>
<CommentLine> Purpose   :</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine></CommentLine>
</CommentLines>
<Declaration>Public Sub createOutlookAppointment( ByVal requiredAttendies As Variant, Optional ByVal optionalAttendies As Variant, Optional ByVal resourceAttendies As Variant, Optional ByVal Subject As String = &quot;&quot;, Optional ByVal location As String = &quot;&quot;, Optional ByVal duration As Integer = 0 )</Declaration>
<Parameters>
<Parameter>
<Name>requiredAttendies</Name>
<Type>Variant</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>optionalAttendies</Name>
<Type>Variant</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>resourceAttendies</Name>
<Type>Variant</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Subject</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>&quot;&quot;</DefaultValue>
</Parameter>
<Parameter>
<Name>location</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>&quot;&quot;</DefaultValue>
</Parameter>
<Parameter>
<Name>duration</Name>
<Type>Integer</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>0</DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>assignParticipantsToAppointment</Name>
<Scope>Private</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>5</CountOfDeclarationLines>
<CountOfLines>16</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Function assignParticipantsToAppointment( ByRef appointment As Object, ByRef attendies As Variant, ByRef recipType As OlMeetingRecipientType ) As Collection</Declaration>
<Parameters>
<Parameter>
<Name>appointment</Name>
<Type>Object</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>attendies</Name>
<Type>Variant</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>recipType</Name>
<Type>OlMeetingRecipientType</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Collection</ReturnType>
</Procedure>
<Procedure>
<Name>createEmail</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>10</CountOfDeclarationLines>
<CountOfLines>77</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : createEmail</CommentLine>
<CommentLine> Purpose   :</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine></CommentLine>
</CommentLines>
<Declaration>Public Sub createEmail( ByVal requiredRecipients As Variant, Optional ByVal ccRecipients As Variant, Optional ByVal bccRecipients As Variant, Optional ByVal Subject As String = &quot;&quot;, Optional ByVal body As String = &quot;&quot;, Optional ByVal importance As OlImportance = OlImportance.olImportanceNormal, Optional ByVal attachemntPath As String = &quot;&quot;, Optional ByVal sendDirectly As Boolean = False )</Declaration>
<Parameters>
<Parameter>
<Name>requiredRecipients</Name>
<Type>Variant</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>ccRecipients</Name>
<Type>Variant</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>bccRecipients</Name>
<Type>Variant</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Subject</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>&quot;&quot;</DefaultValue>
</Parameter>
<Parameter>
<Name>body</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>&quot;&quot;</DefaultValue>
</Parameter>
<Parameter>
<Name>importance</Name>
<Type>OlImportance</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>OlImportance.olImportanceNormal</DefaultValue>
</Parameter>
<Parameter>
<Name>attachemntPath</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>&quot;&quot;</DefaultValue>
</Parameter>
<Parameter>
<Name>sendDirectly</Name>
<Type>Boolean</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>False</DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>assignParticipantsToEmail</Name>
<Scope>Private</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>5</CountOfDeclarationLines>
<CountOfLines>16</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Function assignParticipantsToEmail( ByRef email As Object, ByRef recipients As Variant, ByRef recipType As OlMailRecipientType ) As Collection</Declaration>
<Parameters>
<Parameter>
<Name>email</Name>
<Type>Object</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>recipients</Name>
<Type>Variant</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>recipType</Name>
<Type>OlMailRecipientType</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Collection</ReturnType>
</Procedure>
<Procedure>
<Name>resolveUser</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>27</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : resolveUser</CommentLine>
<CommentLine> Purpose   :</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine></CommentLine>
</CommentLines>
<Declaration>Public Function resolveUser(ByVal searchText As String) As Object</Declaration>
<Parameters>
<Parameter>
<Name>searchText</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Object</ReturnType>
</Procedure>
</Procedures>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Module    : OutlookUtil</CommentLine>
<CommentLine> Author    : Ivanov, Bozhan</CommentLine>
<CommentLine> Purpose   :</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine></CommentLine>
</CommentLines>
</CodeModule>
</File>
<File>
<Name>UtilArrays</Name>
<FileName></FileName>
<PathFileName></PathFileName>
<Type>ClassModule</Type>
<Properties>
<Property>
<Name>Name</Name>
<Value>UtilArrays</Value>
</Property>
<Property>
<Name>Instancing</Name>
<Value>1</Value>
</Property>
</Properties>
<CodeModule>
<CountOfDeclarationLines>15</CountOfDeclarationLines>
<CountOfLines>4717</CountOfLines>
<Interfaces>
</Interfaces>
<Events>
</Events>
<Procedures>
<Procedure>
<Name>RemoveDuplicates</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>3</CountOfDeclarationLines>
<CountOfLines>36</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : RemoveDuplicates</CommentLine>
<CommentLine> Author    : Ivanov, Bozhan</CommentLine>
<CommentLine> Purpose   : returns a sorted array with removed duplicates</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
<Declaration>Public Function RemoveDuplicates( ByVal a As Variant ) As Variant</Declaration>
<Parameters>
<Parameter>
<Name>a</Name>
<Type>Variant</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Variant</ReturnType>
</Procedure>
<Procedure>
<Name>GetDuplicates</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>4</CountOfDeclarationLines>
<CountOfLines>46</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : GetDuplicates</CommentLine>
<CommentLine> Author    : Ivanov, Bozhan</CommentLine>
<CommentLine> Purpose   : returns an array of (unique) dupliate values in an array</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
<Declaration>Public Function GetDuplicates( ByVal a As Variant, Optional ByVal unique As Boolean = True ) As Variant</Declaration>
<Parameters>
<Parameter>
<Name>a</Name>
<Type>Variant</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>unique</Name>
<Type>Boolean</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>True</DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Variant</ReturnType>
</Procedure>
<Procedure>
<Name>GetDimensions</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>3</CountOfDeclarationLines>
<CountOfLines>30</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : GetDimensions</CommentLine>
<CommentLine> Descr.    : Returns the number of dimensions of an array.</CommentLine>
<CommentLine>             An unallocated dynamic array has 0 dimensions.</CommentLine>
<CommentLine>             This condition can also be tested with IsEmpty</CommentLine>
<CommentLine>             Loop, increasing the dimension index Ndx, until an error occurs.</CommentLine>
<CommentLine>             An error will occur when Ndx exceeds the number of dimension in the array.</CommentLine>
<CommentLine>             Return Ndx - 1.</CommentLine>
<CommentLine>             Returns -1 dimenstions when non array was input</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine></CommentLine>
</CommentLines>
<Declaration>Public Function GetDimensions( ByRef arr As Variant ) As Long</Declaration>
<Parameters>
<Parameter>
<Name>arr</Name>
<Type>Variant</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Long</ReturnType>
</Procedure>
<Procedure>
<Name>CheckDimentions</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>3</CountOfDeclarationLines>
<CountOfLines>9</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub CheckDimentions( ByVal dimentions As Long )</Declaration>
<Parameters>
<Parameter>
<Name>dimentions</Name>
<Type>Long</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>IsDynamic</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>3</CountOfDeclarationLines>
<CountOfLines>41</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : IsDynamic</CommentLine>
<CommentLine> Descr.    : Returns TRUE or FALSE indicating whether Arr is dynamic or not.</CommentLine>
<CommentLine>             Note that if you attempt to ReDim a static array in the same procedure</CommentLine>
<CommentLine>             in which it is declared, you&apos;ll get a compiler error.</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine></CommentLine>
</CommentLines>
<Declaration>Public Function IsDynamic( ByRef arr As Variant ) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>arr</Name>
<Type>Variant</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>IsEmpty</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>3</CountOfDeclarationLines>
<CountOfLines>50</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : IsEmpty</CommentLine>
<CommentLine> Descr.    : This function tests whether the array is empty (unallocated). Returns TRUE or FALSE.</CommentLine>
<CommentLine>             The VBA IsArray function indicates whether a variable is an array, but it does not</CommentLine>
<CommentLine>             distinguish between allocated and unallocated arrays. It will return TRUE for both</CommentLine>
<CommentLine>             allocated and unallocated arrays. This function tests whether the array has actually</CommentLine>
<CommentLine>             been allocated.</CommentLine>
<CommentLine>             This function is really the ReverseInPlace of IsAllocated.</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine></CommentLine>
</CommentLines>
<Declaration>Public Function IsEmpty( ByRef arr As Variant ) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>arr</Name>
<Type>Variant</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>IsAllocated</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>3</CountOfDeclarationLines>
<CountOfLines>36</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : IsAllocated</CommentLine>
<CommentLine> Descr.    : Returns TRUE if the array is allocated (either a static array or a dynamic array that has been</CommentLine>
<CommentLine>             sized with Redim) or FALSE if the array is not allocated (a dynamic that has not yet</CommentLine>
<CommentLine>             been sized with Redim, or a dynamic array that has been Erased). Static arrays are always</CommentLine>
<CommentLine>             allocated.</CommentLine>
<CommentLine>             The VBA IsArray function indicates whether a variable is an array, but it does not</CommentLine>
<CommentLine>             distinguish between allocated and unallocated arrays. It will return TRUE for both</CommentLine>
<CommentLine>             allocated and unallocated arrays. This function tests whether the array has actually</CommentLine>
<CommentLine>             been allocated.</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine></CommentLine>
</CommentLines>
<Declaration>Public Function IsAllocated( ByRef arr As Variant ) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>arr</Name>
<Type>Variant</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>GetDataType</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>3</CountOfDeclarationLines>
<CountOfLines>56</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : GetDataType</CommentLine>
<CommentLine> Descr.    : Compares the varTypes of all array elements and if consistent the</CommentLine>
<CommentLine>   corresponding vartype is returened if not then vbVariant is returned</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
<Declaration>Public Function GetDataType( ByRef arr As Variant ) As VbVarType</Declaration>
<Parameters>
<Parameter>
<Name>arr</Name>
<Type>Variant</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>VbVarType</ReturnType>
</Procedure>
<Procedure>
<Name>IsOfDataType</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>4</CountOfDeclarationLines>
<CountOfLines>50</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : IsOfDataType</CommentLine>
<CommentLine> Purpose   : comapres all elemets&apos;s datatypes with the provided one</CommentLine>
<CommentLine>   Returns True if all elements are of the provided data type</CommentLine>
<CommentLine>   False otherwise.</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine></CommentLine>
</CommentLines>
<Declaration>Public Function IsOfDataType( ByRef arr As Variant, ByVal vType As VbVarType ) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>arr</Name>
<Type>Variant</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>vType</Name>
<Type>VbVarType</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>GetDataTypesOfElements</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>3</CountOfDeclarationLines>
<CountOfLines>39</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : GetDataTypesOfElements</CommentLine>
<CommentLine> Descr.    : Returns the datatypes for each element in the array</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
<Declaration>Public Function GetDataTypesOfElements( ByRef arr As Variant ) As Variant</Declaration>
<Parameters>
<Parameter>
<Name>arr</Name>
<Type>Variant</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Variant</ReturnType>
</Procedure>
<Procedure>
<Name>GetDataTypeNamesOfElements</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>3</CountOfDeclarationLines>
<CountOfLines>40</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : GetDataTypeNamesOfElements</CommentLine>
<CommentLine> Descr.    : Returns the datatype names for each element in the array</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
<Declaration>Public Function GetDataTypeNamesOfElements( ByRef arr As Variant ) As Variant</Declaration>
<Parameters>
<Parameter>
<Name>arr</Name>
<Type>Variant</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Variant</ReturnType>
</Procedure>
<Procedure>
<Name>IncreaseUpperBound</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>5</CountOfDeclarationLines>
<CountOfLines>52</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : IncreaseUpperBound</CommentLine>
<CommentLine> Descr.    : allocate a given number of keys in provided dynamic array</CommentLine>
<CommentLine>   if the array is not allocated it will be dynamically allocated (0 to 0) or (0 to 0, 0 to 0)</CommentLine>
<CommentLine>   depending on the dimention worked on.</CommentLine>
<CommentLine>   bound provides the new upper bound value for the provided dimention of the array.</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine></CommentLine>
</CommentLines>
<Declaration>Public Sub IncreaseUpperBound( ByRef arr As Variant, Optional bound As Long = 1, Optional dimention As Long = 1 )</Declaration>
<Parameters>
<Parameter>
<Name>arr</Name>
<Type>Variant</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>bound</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>1</DefaultValue>
</Parameter>
<Parameter>
<Name>dimention</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>1</DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>IsOfSimpleDataTypes</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>3</CountOfDeclarationLines>
<CountOfLines>29</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : IsOfSimpleDataTypes</CommentLine>
<CommentLine> Descr.    : tests all elements of an array for their data type simplicity</CommentLine>
<CommentLine>   returns true if all elements of the array are of a simepl data type</CommentLine>
<CommentLine>   returns false otherwise</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
<Declaration>Public Function IsOfSimpleDataTypes( ByRef arr As Variant ) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>arr</Name>
<Type>Variant</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>IsSimpleDataType</Name>
<Scope>Private</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>26</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : IsSimpleDataType</CommentLine>
<CommentLine> Descr.    : This function returns FALSE if V is any one of the following variable types:</CommentLine>
<CommentLine>   vbArray</CommentLine>
<CommentLine>   vbDataObject</CommentLine>
<CommentLine>   vbObject</CommentLine>
<CommentLine>   vbUserDefinedType</CommentLine>
<CommentLine>   or if it is an array of any type.</CommentLine>
<CommentLine>   TRUE is returened otherwise.</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
<Declaration>Private Function IsSimpleDataType(v As Variant) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>v</Name>
<Type>Variant</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>GetNumElements</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>4</CountOfDeclarationLines>
<CountOfLines>32</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : GetNumElements</CommentLine>
<CommentLine> Purpose   : Returns the number of elements in the specified dimension (default 1)</CommentLine>
<CommentLine>   of the provided array</CommentLine>
<CommentLine>   returns 0 when:</CommentLine>
<CommentLine>     Arr is not an array</CommentLine>
<CommentLine>     Arr is an unallocated array</CommentLine>
<CommentLine>     dimension is greater than the number of dimension of Arr</CommentLine>
<CommentLine>     dimension is less than 1.</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine></CommentLine>
</CommentLines>
<Declaration>Public Function GetNumElements( arr As Variant, Optional dimension = 1 ) As Long</Declaration>
<Parameters>
<Parameter>
<Name>arr</Name>
<Type>Variant</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>dimension</Name>
<Type></Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>1</DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Long</ReturnType>
</Procedure>
<Procedure>
<Name>GetIntersection</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>4</CountOfDeclarationLines>
<CountOfLines>46</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : GetIntersection</CommentLine>
<CommentLine> Descr.    : returns the intersection of 2 arrays</CommentLine>
<CommentLine>   Works only with array of simple data types, which are 1D</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
<Declaration>Public Function GetIntersection( ByVal a As Variant, ByVal b As Variant ) As Variant</Declaration>
<Parameters>
<Parameter>
<Name>a</Name>
<Type>Variant</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>b</Name>
<Type>Variant</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Variant</ReturnType>
</Procedure>
<Procedure>
<Name>GetDifference</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>4</CountOfDeclarationLines>
<CountOfLines>35</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure   : GetDifference</CommentLine>
<CommentLine> Description : The abosulte relative complement of A with respect to a set B,</CommentLine>
<CommentLine>   also termed the difference of sets A and B, written B \ A, is the set of elements in</CommentLine>
<CommentLine>   B but not in A, e.g. {1,2,3} \ {2,3,4} = {1}</CommentLine>
<CommentLine>   Multiple occurrences of identical elements have no effect on the cardinality of a set or its contents.</CommentLine>
<CommentLine>   Duplicate values are considers as the same term</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
<Declaration>Public Function GetDifference( ByVal a As Variant, ByVal b As Variant ) As Variant</Declaration>
<Parameters>
<Parameter>
<Name>a</Name>
<Type>Variant</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>b</Name>
<Type>Variant</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Variant</ReturnType>
</Procedure>
<Procedure>
<Name>GetDifferenceSymmetric</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>4</CountOfDeclarationLines>
<CountOfLines>40</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure   : GetDifferenceSymmetric</CommentLine>
<CommentLine> Description : returns the symetric difference of 2 arrays (A \ B) Union (B \ A)</CommentLine>
<CommentLine>   Works only with array of simple data types</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
<Declaration>Public Function GetDifferenceSymmetric( ByVal a As Variant, ByVal b As Variant ) As Variant</Declaration>
<Parameters>
<Parameter>
<Name>a</Name>
<Type>Variant</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>b</Name>
<Type>Variant</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Variant</ReturnType>
</Procedure>
<Procedure>
<Name>ConcatenateArrays</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>2</CountOfDeclarationLines>
<CountOfLines>180</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure   : ConcatenateArrays</CommentLine>
<CommentLine> Author      : Pearson Software Consulting Services</CommentLine>
<CommentLine> Description :</CommentLine>
<CommentLine> ConcatenateArrays</CommentLine>
<CommentLine> This function appends ArrayToAppend to the end of ResultArray, increasing the size of ResultArray</CommentLine>
<CommentLine> as needed. ResultArray must be a dynamic array, but it need not be allocated. ArrayToAppend</CommentLine>
<CommentLine> may be either static or dynamic, and if dynamic it may be unallocted. If ArrayToAppend is</CommentLine>
<CommentLine> unallocated, ResultArray is left unchanged.</CommentLine>
<CommentLine></CommentLine>
<CommentLine> The data types of ResultArray and ArrayToAppend must be either the same data type or</CommentLine>
<CommentLine> compatible numeric types. A compatible numeric type is a type that will not cause a loss of</CommentLine>
<CommentLine> precision or cause an overflow. For example, ReturnArray may be Longs, and ArrayToAppend amy</CommentLine>
<CommentLine> by Longs or Integers, but not Single or Doubles because information might be lost when</CommentLine>
<CommentLine> converting from Double to Long (the decimal portion would be lost). To skip the compatability</CommentLine>
<CommentLine> check and allow any variable type in ResultArray and ArrayToAppend, set the NoCompatabilityCheck</CommentLine>
<CommentLine> parameter to True. If you do this, be aware that you may loose precision and you may will</CommentLine>
<CommentLine> get an overflow error which will cause a result of 0 in that element of ResultArra.</CommentLine>
<CommentLine></CommentLine>
<CommentLine> Both ReaultArray and ArrayToAppend must be one-dimensional arrays.</CommentLine>
<CommentLine></CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
<Declaration>Public Function ConcatenateArrays(ResultArray As Variant, ArrayToAppend As Variant, Optional NoCompatabilityCheck As Boolean = False) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>ResultArray</Name>
<Type>Variant</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>ArrayToAppend</Name>
<Type>Variant</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>NoCompatabilityCheck</Name>
<Type>Boolean</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>False</DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>QSortInPlace</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>7</CountOfDeclarationLines>
<CountOfLines>174</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : QSortInPlace</CommentLine>
<CommentLine> Author    : Chip Pearson, www.cpearson.com, chip@cpearson.com</CommentLine>
<CommentLine> Modifier  : Ivanov, Bozhan</CommentLine>
<CommentLine> Descr.    : This function sorts the array InputArray in place.</CommentLine>
<CommentLine>   It works with either string or numeric data. A part of the array may be sorted</CommentLine>
<CommentLine>   by setting the optional LB and UB parameters to the first (LB) and last (UB) element</CommentLine>
<CommentLine>   indexes that need sorting.</CommentLine>
<CommentLine>   By default, the sort method is NOT case sensitive. Setting the CompareMode argument</CommentLine>
<CommentLine>   to vbBinaryCompare (=0) will make the sort method case sensitive.</CommentLine>
<CommentLine>   Returns TRUE if the array was successfully sorted and FALSE if error occured.</CommentLine>
<CommentLine>   Any occuring error will be dipslayed in a MsgBox.</CommentLine>
<CommentLine>   To suppress message boxes, set the NoAlerts parameter to TRUE.</CommentLine>
<CommentLine> Modifying Notes: If you modify this code and you call &quot;Exit Procedure&quot;,</CommentLine>
<CommentLine>   you MUST decrment the RecursionLevel variable. E.g.,</CommentLine>
<CommentLine>     If SomethingThatCausesAnExit Then</CommentLine>
<CommentLine>       RecursionLevel = RecursionLevel - 1</CommentLine>
<CommentLine>       Exit Function</CommentLine>
<CommentLine>     End If</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
<Declaration>Public Function QSortInPlace( ByRef inputArray As Variant, Optional ByVal lb As Long = -1&amp;, Optional ByVal ub As Long = -1&amp;, Optional ByVal Descending As Boolean = False, Optional ByVal CompareMode As VbCompareMethod = vbTextCompare ) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>inputArray</Name>
<Type>Variant</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>lb</Name>
<Type>Long</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>-1&amp;</DefaultValue>
</Parameter>
<Parameter>
<Name>ub</Name>
<Type>Long</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>-1&amp;</DefaultValue>
</Parameter>
<Parameter>
<Name>Descending</Name>
<Type>Boolean</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>False</DefaultValue>
</Parameter>
<Parameter>
<Name>CompareMode</Name>
<Type>VbCompareMethod</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>vbTextCompare</DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>QSortInPlaceOnRefValues</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>8</CountOfDeclarationLines>
<CountOfLines>170</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : QSortInPlaceOnRefValues</CommentLine>
<CommentLine> Created By: Ivanov, Bozhan  &lt;&gt;</CommentLine>
<CommentLine> Descr.    : Function based on the QSortInPlaceOnRefValues Function. In this Function the values</CommentLine>
<CommentLine>   comapred for the sorting are referenced in a collection. Meaning that the actual array</CommentLine>
<CommentLine>   values are used to reference a third value in the collection, which in turn is used as</CommentLine>
<CommentLine>   the sorting comapre value when calling the CompareValues function</CommentLine>
<CommentLine>   The collection is reffered to from the key string values where the corresponding</CommentLine>
<CommentLine>   values are compared as mid, low and high</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine></CommentLine>
</CommentLines>
<Declaration>Public Function QSortInPlaceOnRefValues( ByRef inputArray As Variant, ByRef RefValuesCollection As Collection, Optional ByVal lb As Long = -1&amp;, Optional ByVal ub As Long = -1&amp;, Optional ByVal Descending As Boolean = False, Optional ByVal CompareMode As VbCompareMethod = vbTextCompare ) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>inputArray</Name>
<Type>Variant</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>RefValuesCollection</Name>
<Type>Collection</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>lb</Name>
<Type>Long</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>-1&amp;</DefaultValue>
</Parameter>
<Parameter>
<Name>ub</Name>
<Type>Long</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>-1&amp;</DefaultValue>
</Parameter>
<Parameter>
<Name>Descending</Name>
<Type>Boolean</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>False</DefaultValue>
</Parameter>
<Parameter>
<Name>CompareMode</Name>
<Type>VbCompareMethod</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>vbTextCompare</DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>ReverseInPlace</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>5</CountOfDeclarationLines>
<CountOfLines>50</CountOfLines>
<CommentLines>
<CommentLine>TODO Create Flip Matrix for 2D (flip horizontaly, vertically, diag left, diag right)</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : ReverseInPlace</CommentLine>
<CommentLine> Descr.    : Reverses the order of elements in a.</CommentLine>
<CommentLine>   To ReverseInPlace the entire array, omit or set to less than 0 the LB and UB parameters.</CommentLine>
<CommentLine>   To ReverseInPlace only part of tbe array, set LB and/or</CommentLine>
<CommentLine>   UB to the LBound and UBound of the sub array to be reversed.</CommentLine>
<CommentLine>   Procedure works only in 1D</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
<Declaration>Public Sub ReverseInPlace( ByRef a As Variant, Optional lb As Long = -1, Optional ub As Long = -1 )</Declaration>
<Parameters>
<Parameter>
<Name>a</Name>
<Type>Variant</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>lb</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>-1</DefaultValue>
</Parameter>
<Parameter>
<Name>ub</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>-1</DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>GetReversed</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>4</CountOfDeclarationLines>
<CountOfLines>16</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : GetReversed</CommentLine>
<CommentLine> Descr.    : Returns a reversed order version of elements in a.</CommentLine>
<CommentLine>   To ReverseInPlace the entire array, omit or set to less than 0 the LB and UB parameters.</CommentLine>
<CommentLine>   To ReverseInPlace only part of tbe array, set LB and/or</CommentLine>
<CommentLine>   UB to the LBound and UBound of the sub array to be reversed.</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
<Declaration>Public Function GetReversed( ByVal a As Variant, Optional lb As Long = -1, Optional ub As Long = -1 ) As Variant</Declaration>
<Parameters>
<Parameter>
<Name>a</Name>
<Type>Variant</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>lb</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>-1</DefaultValue>
</Parameter>
<Parameter>
<Name>ub</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>-1</DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Variant</ReturnType>
</Procedure>
<Procedure>
<Name>AreDataTypesCompatible</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>4</CountOfDeclarationLines>
<CountOfLines>33</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : areDataTypesCompatible</CommentLine>
<CommentLine> Descr.    : This function determines if v2 is compatiable with v1. If the two</CommentLine>
<CommentLine>             data types are the same, they are compatible. If the value of v2 can</CommentLine>
<CommentLine>             be stored in v1 with no loss of precision or an overflow, they are compatible.</CommentLine>
<CommentLine>             For example, if v1 is a Long and v2 is an Integer, they are compatible</CommentLine>
<CommentLine>             because an integer can be stored in a Long with no loss of information. If v1</CommentLine>
<CommentLine>             is a Long and v2 is a Double, they are not compatible because information</CommentLine>
<CommentLine>             will be lost converting from a Double to a Long (the decimal portion will be lost).</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine></CommentLine>
</CommentLines>
<Declaration>Public Function AreDataTypesCompatible( v1 As Variant, v2 As Variant ) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>v1</Name>
<Type>Variant</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>v2</Name>
<Type>Variant</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>GetIndexOf</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>7</CountOfDeclarationLines>
<CountOfLines>19</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : GetIndexOf</CommentLine>
<CommentLine> Descr.    : returns the index of the element if found in array and -1 otherwise</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
<Declaration>Public Function GetIndexOf( ByRef a As Variant, ByVal value As Variant, Optional ByVal CompareMethod As VBA.VbCompareMethod = vbTextCompare, Optional ByVal LookAt As XlLookAt = XlLookAt.xlWhole, Optional ByVal searchMethod As SearchMethodEnum = SearchMethodEnum.default ) As Long</Declaration>
<Parameters>
<Parameter>
<Name>a</Name>
<Type>Variant</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>value</Name>
<Type>Variant</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>CompareMethod</Name>
<Type>VBA.VbCompareMethod</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>vbTextCompare</DefaultValue>
</Parameter>
<Parameter>
<Name>LookAt</Name>
<Type>XlLookAt</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>XlLookAt.xlWhole</DefaultValue>
</Parameter>
<Parameter>
<Name>searchMethod</Name>
<Type>SearchMethodEnum</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>SearchMethodEnum.default</DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Long</ReturnType>
</Procedure>
<Procedure>
<Name>GetIndexOf_DefaultSearch</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>6</CountOfDeclarationLines>
<CountOfLines>68</CountOfLines>
<CommentLines>
<CommentLine>TODO refactor into smaller functions Single responsibility principle</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : GetIndexOf_DefaultSearch</CommentLine>
<CommentLine> Descr.    : returns the index of the element if found in array and -1 otherwise</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
<Declaration>Public Function GetIndexOf_DefaultSearch( ByRef a As Variant, ByVal value As Variant, Optional ByVal CompareMethod As VBA.VbCompareMethod = vbTextCompare, Optional ByVal LookAt As XlLookAt = XlLookAt.xlWhole ) As Long</Declaration>
<Parameters>
<Parameter>
<Name>a</Name>
<Type>Variant</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>value</Name>
<Type>Variant</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>CompareMethod</Name>
<Type>VBA.VbCompareMethod</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>vbTextCompare</DefaultValue>
</Parameter>
<Parameter>
<Name>LookAt</Name>
<Type>XlLookAt</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>XlLookAt.xlWhole</DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Long</ReturnType>
</Procedure>
<Procedure>
<Name>GetIndexOf_BinarySearch</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>4</CountOfDeclarationLines>
<CountOfLines>62</CountOfLines>
<CommentLines>
<CommentLine>TODO adjust for a new parameter xlLookAt for xlpart and xlwhole</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : GetIndexOf_BinarySearch</CommentLine>
<CommentLine> Descr.    : applies a binary search to a sorted array</CommentLine>
<CommentLine>   If value is found returns the index, else returns -1</CommentLine>
<CommentLine>   Pre: sortedArray is a sortet array in asc order preferably.</CommentLine>
<CommentLine>   The array order will not be analyzed in this function</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
<Declaration>Public Function GetIndexOf_BinarySearch( ByRef sortedArray As Variant, ByVal value As Variant ) As Long</Declaration>
<Parameters>
<Parameter>
<Name>sortedArray</Name>
<Type>Variant</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>value</Name>
<Type>Variant</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Long</ReturnType>
</Procedure>
<Procedure>
<Name>Contains</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>6</CountOfDeclarationLines>
<CountOfLines>24</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : Contains</CommentLine>
<CommentLine> Descr.    : returns true if the value is contained in the array</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
<Declaration>Public Function Contains( ByRef a As Variant, ByVal val As Variant, Optional ByVal CompareMethod As VBA.VbCompareMethod = vbTextCompare, Optional ByVal LookAt As XlLookAt = XlLookAt.xlWhole ) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>a</Name>
<Type>Variant</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>val</Name>
<Type>Variant</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>CompareMethod</Name>
<Type>VBA.VbCompareMethod</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>vbTextCompare</DefaultValue>
</Parameter>
<Parameter>
<Name>LookAt</Name>
<Type>XlLookAt</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>XlLookAt.xlWhole</DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>ToString</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>3</CountOfDeclarationLines>
<CountOfLines>52</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : ToString</CommentLine>
<CommentLine> Descr.    : converts array to a CSV string, object will be displayed as thier types</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine></CommentLine>
</CommentLines>
<Declaration>Public Function ToString( ByRef arr As Variant ) As String</Declaration>
<Parameters>
<Parameter>
<Name>arr</Name>
<Type>Variant</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>String</ReturnType>
</Procedure>
<Procedure>
<Name>GetSplitOnIndex</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>4</CountOfDeclarationLines>
<CountOfLines>57</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : GetSplitOnIndex</CommentLine>
<CommentLine> Descr.    : Splits an array into 2 arrays contained in an array (0 To 1)</CommentLine>
<CommentLine>   The return(0) contains all elements up to and including the provided index,</CommentLine>
<CommentLine>   the return(1) part contains the rest of the array elements</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
<Declaration>Public Function GetSplitOnIndex( ByRef a As Variant, ByVal Index As Long ) As Variant</Declaration>
<Parameters>
<Parameter>
<Name>a</Name>
<Type>Variant</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Index</Name>
<Type>Long</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Variant</ReturnType>
</Procedure>
<Procedure>
<Name>CompareValues</Name>
<Scope>Private</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>5</CountOfDeclarationLines>
<CountOfLines>36</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : CompareValues</CommentLine>
<CommentLine> Descr.    : Compares two elements V1 and V2</CommentLine>
<CommentLine>   if both numeric or string with numeric,</CommentLine>
<CommentLine>   they are converted to double and compared</CommentLine>
<CommentLine>   If either one is String and does not contain numeric,</CommentLine>
<CommentLine>   they are converted to string and compared with strcomp()</CommentLine>
<CommentLine>   Case-sensitivity is controlled via the optional parameter compareMode</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
<Declaration>Private Function CompareValues( v1 As Variant, v2 As Variant, Optional CompareMode As VbCompareMethod = vbTextCompare ) As Variant</Declaration>
<Parameters>
<Parameter>
<Name>v1</Name>
<Type>Variant</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>v2</Name>
<Type>Variant</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>CompareMode</Name>
<Type>VbCompareMethod</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>vbTextCompare</DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Variant</ReturnType>
</Procedure>
<Procedure>
<Name>CompareArrays</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>5</CountOfDeclarationLines>
<CountOfLines>82</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;</CommentLine>
<CommentLine> CompareArrays</CommentLine>
<CommentLine> compares two arrays, Array1 and Array2, element by element, and returns the results of</CommentLine>
<CommentLine> the comparisons as a new array. Each element of the result array will have values -1, 0, or +1.</CommentLine>
<CommentLine> -1: the element in Array1 was less than the corresponding element in Array2</CommentLine>
<CommentLine>  0: the elements are equal</CommentLine>
<CommentLine> +1: the element in Array1 is greater than Array2</CommentLine>
<CommentLine> Array1 and Array2 must be allocated single-dimensional arrays</CommentLine>
<CommentLine></CommentLine>
<CommentLine> An error will occur if Array1 or Array2 contains an Object or User Defined Type.</CommentLine>
<CommentLine></CommentLine>
<CommentLine> When comparing elements, the procedure does the following:</CommentLine>
<CommentLine> If both elements are numeric data types, they are compared arithmetically.</CommentLine>
<CommentLine> If one element is a numeric data type and the other is a string and that string is numeric,</CommentLine>
<CommentLine> then both elements are converted to Doubles and compared arithmetically.</CommentLine>
<CommentLine> If the string is not numeric, both elements are converted to strings and compared using StrComp,</CommentLine>
<CommentLine> with the compare mode set by CompareMode.</CommentLine>
<CommentLine> If both elements are numeric strings, they are converted to Doubles and compared arithmetically.</CommentLine>
<CommentLine> If either element is not a numeric string, the elements are converted and compared with StrComp.</CommentLine>
<CommentLine>&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function CompareArrays( ByRef Array1 As Variant, ByRef Array2 As Variant, Optional ByVal CompareMode As VbCompareMethod = vbTextCompare ) As Variant</Declaration>
<Parameters>
<Parameter>
<Name>Array1</Name>
<Type>Variant</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Array2</Name>
<Type>Variant</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>CompareMode</Name>
<Type>VbCompareMethod</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>vbTextCompare</DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Variant</ReturnType>
</Procedure>
<Procedure>
<Name>AreArraysEqual</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>5</CountOfDeclarationLines>
<CountOfLines>29</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : AreArraysEqual</CommentLine>
<CommentLine> Purpose   : returns true if all elements of array1 and array2 compared 1 by 1 are the equal</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine></CommentLine>
</CommentLines>
<Declaration>Public Function AreArraysEqual( ByRef Array1 As Variant, ByRef Array2 As Variant, Optional ByVal CompareMode As VbCompareMethod = vbTextCompare ) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>Array1</Name>
<Type>Variant</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Array2</Name>
<Type>Variant</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>CompareMode</Name>
<Type>VbCompareMethod</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>vbTextCompare</DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>ContainsObjects</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>3</CountOfDeclarationLines>
<CountOfLines>22</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : ContainsObjects</CommentLine>
<CommentLine> Purpose   : searches for object or user defined elements in an array</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine></CommentLine>
</CommentLines>
<Declaration>Public Function ContainsObjects( ByRef arr As Variant ) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>arr</Name>
<Type>Variant</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>ContainsArrays</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>3</CountOfDeclarationLines>
<CountOfLines>24</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : ContainsArrays</CommentLine>
<CommentLine> Purpose   : searches for object or user defined elements in an array</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine></CommentLine>
</CommentLines>
<Declaration>Public Function ContainsArrays( ByRef arr As Variant ) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>arr</Name>
<Type>Variant</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>GetConcatenateArrays</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>4</CountOfDeclarationLines>
<CountOfLines>31</CountOfLines>
<CommentLines>
<CommentLine>TODO CONTINUE</CommentLine>
<CommentLine>&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;</CommentLine>
<CommentLine> ConcatenateArrays</CommentLine>
<CommentLine> This function appends ArrayToAppend to the end of ResultArray, increasing the size of ResultArray</CommentLine>
<CommentLine> as needed. ResultArray must be a dynamic array, but it need not be allocated. ArrayToAppend</CommentLine>
<CommentLine> may be either static or dynamic, and if dynamic it may be unallocted. If ArrayToAppend is</CommentLine>
<CommentLine> unallocated, ResultArray is left unchanged.</CommentLine>
<CommentLine></CommentLine>
<CommentLine> The data types of ResultArray and ArrayToAppend must be either the same data type or</CommentLine>
<CommentLine> compatible numeric types. A compatible numeric type is a type that will not cause a loss of</CommentLine>
<CommentLine> precision or cause an overflow. For example, ReturnArray may be Longs, and ArrayToAppend amy</CommentLine>
<CommentLine> by Longs or Integers, but not Single or Doubles because information might be lost when</CommentLine>
<CommentLine> converting from Double to Long (the decimal portion would be lost). To skip the compatability</CommentLine>
<CommentLine> check and allow any variable type in ResultArray and ArrayToAppend, set the NoCompatabilityCheck</CommentLine>
<CommentLine> parameter to True. If you do this, be aware that you may loose precision and you may will</CommentLine>
<CommentLine> get an overflow error which will cause a result of 0 in that element of ResultArra.</CommentLine>
<CommentLine></CommentLine>
<CommentLine> Both ReaultArray and ArrayToAppend must be one-dimensional arrays.</CommentLine>
<CommentLine></CommentLine>
<CommentLine>&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function GetConcatenateArrays( ByRef Array1 As Variant, ByRef Array2 As Variant ) As Variant</Declaration>
<Parameters>
<Parameter>
<Name>Array1</Name>
<Type>Variant</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Array2</Name>
<Type>Variant</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Variant</ReturnType>
</Procedure>
<Procedure>
<Name>CopyArray</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>2</CountOfDeclarationLines>
<CountOfLines>187</CountOfLines>
<CommentLines>
<CommentLine>----------------------------------------------------------------------------------------------------</CommentLine>
<CommentLine>cPearson &apos;s untouched precedures</CommentLine>
<CommentLine>####################################################################################################</CommentLine>
</CommentLines>
<Declaration>Public Function CopyArray(DestinationArray As Variant, SourceArray As Variant, Optional NoCompatabilityCheck As Boolean = False) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>DestinationArray</Name>
<Type>Variant</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>SourceArray</Name>
<Type>Variant</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>NoCompatabilityCheck</Name>
<Type>Boolean</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>False</DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>CopyArraySubSetToArray</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>2</CountOfDeclarationLines>
<CountOfLines>147</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;</CommentLine>
<CommentLine> CopyArraySubSetToArray</CommentLine>
<CommentLine> This function copies elements of InputArray to ResultArray. It takes the elements</CommentLine>
<CommentLine> from FirstElementToCopy to LastElementToCopy (inclusive) from InputArray and</CommentLine>
<CommentLine> copies them to ResultArray, starting at DestinationElement. Existing data in</CommentLine>
<CommentLine> ResultArray will be overwrittten. If ResultArray is a dynamic array, it will</CommentLine>
<CommentLine> be resized if needed. If ResultArray is a static array and it is not large</CommentLine>
<CommentLine> enough to copy all the elements, no elements are copied and the function</CommentLine>
<CommentLine> returns False.</CommentLine>
<CommentLine>&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function CopyArraySubSetToArray(inputArray As Variant, ResultArray As Variant, FirstElementToCopy As Long, LastElementToCopy As Long, DestinationElement As Long) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>inputArray</Name>
<Type>Variant</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>ResultArray</Name>
<Type>Variant</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>FirstElementToCopy</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>LastElementToCopy</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>DestinationElement</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>CopyNonNothingObjectsToArray</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>4</CountOfDeclarationLines>
<CountOfLines>181</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;</CommentLine>
<CommentLine> CopyNonNothingObjectsToArray</CommentLine>
<CommentLine> This function copies all objects that are not Nothing from SourceArray</CommentLine>
<CommentLine> to ResultArray. ResultArray MUST be a dynamic array of type Object or Variant.</CommentLine>
<CommentLine> E.g.,</CommentLine>
<CommentLine>       Dim ResultArray() As Object &apos; Or</CommentLine>
<CommentLine>       Dim ResultArray() as Variant</CommentLine>
<CommentLine></CommentLine>
<CommentLine> ResultArray will be Erased and then resized to hold the non-Nothing elements</CommentLine>
<CommentLine> from SourceArray. The LBound of ResultArray will be the same as the LBound</CommentLine>
<CommentLine> of SourceArray, regardless of what its LBound was prior to calling this</CommentLine>
<CommentLine> procedure.</CommentLine>
<CommentLine></CommentLine>
<CommentLine> This function returns True if the operation was successful or False if an</CommentLine>
<CommentLine> an error occurs. If an error occurs, a message box is displayed indicating</CommentLine>
<CommentLine> the error. To suppress the message boxes, set the NoAlerts parameter to</CommentLine>
<CommentLine> True.</CommentLine>
<CommentLine></CommentLine>
<CommentLine> This function uses the following procedures. They are declared as Private</CommentLine>
<CommentLine> procedures at the end of this module.</CommentLine>
<CommentLine>       IsDynamic</CommentLine>
<CommentLine>       IsEmpty</CommentLine>
<CommentLine>       GetDimensions</CommentLine>
<CommentLine></CommentLine>
<CommentLine>&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function CopyNonNothingObjectsToArray( ByRef SourceArray As Variant, ByRef ResultArray As Variant ) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>SourceArray</Name>
<Type>Variant</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>ResultArray</Name>
<Type>Variant</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>DeleteArrayElement</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>2</CountOfDeclarationLines>
<CountOfLines>104</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;</CommentLine>
<CommentLine> DeleteArrayElement</CommentLine>
<CommentLine> This function deletes an element from InputArray, and shifts elements that are to the</CommentLine>
<CommentLine> right of the deleted element to the left. If InputArray is a dynamic array, and the</CommentLine>
<CommentLine> ResizeDynamic parameter is True, the array will be resized one element smaller. Otherwise,</CommentLine>
<CommentLine> the right-most entry in the array is set to the default value appropriate to the data</CommentLine>
<CommentLine> type of the array (0, vbNullString, Empty, or Nothing). If the array is an array of Variant</CommentLine>
<CommentLine> types, the default data type is the data type of the last element in the array.</CommentLine>
<CommentLine> The function returns True if the elememt was successfully deleted, or False if an error</CommentLine>
<CommentLine> occurrred. This procedure works only on single-dimensional</CommentLine>
<CommentLine>&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function DeleteArrayElement(inputArray As Variant, ElementNumber As Long, Optional ResizeDynamic As Boolean = False) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>inputArray</Name>
<Type>Variant</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>ElementNumber</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>ResizeDynamic</Name>
<Type>Boolean</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>False</DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>FirstNonEmptyStringIndexInArray</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>44</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;</CommentLine>
<CommentLine> FirstNonEmptyStringIndexInArray</CommentLine>
<CommentLine> This returns the index into InputArray of the first non-empty string.</CommentLine>
<CommentLine> This is generally used when InputArray is the result of a sort operation,</CommentLine>
<CommentLine> which puts empty strings at the beginning of the array.</CommentLine>
<CommentLine> Returns -1 is an error occurred or if the entire array is empty strings.</CommentLine>
<CommentLine>&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function FirstNonEmptyStringIndexInArray(inputArray As Variant) As Long</Declaration>
<Parameters>
<Parameter>
<Name>inputArray</Name>
<Type>Variant</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Long</ReturnType>
</Procedure>
<Procedure>
<Name>InsertElementIntoArray</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>2</CountOfDeclarationLines>
<CountOfLines>103</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;</CommentLine>
<CommentLine> InsertElementIntoArray</CommentLine>
<CommentLine> This function inserts an element with a value of Value into InputArray at locatation Index.</CommentLine>
<CommentLine> InputArray must be a dynamic array. The Value is stored in location Index, and everything</CommentLine>
<CommentLine> to the right of Index is shifted to the right. The array is resized to make room for</CommentLine>
<CommentLine> the new element. The value of Index must be greater than or equal to the LBound of</CommentLine>
<CommentLine> InputArray and less than or equal to UBound+1. If Index is UBound+1, the Value is</CommentLine>
<CommentLine> placed at the end of the array.</CommentLine>
<CommentLine>&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function InsertElementIntoArray(inputArray As Variant, Index As Long, value As Variant) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>inputArray</Name>
<Type>Variant</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Index</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>value</Name>
<Type>Variant</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>IsNumericDataType</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>88</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;</CommentLine>
<CommentLine> IsNumericDataType</CommentLine>
<CommentLine></CommentLine>
<CommentLine> This function returns TRUE or FALSE indicating whether the data</CommentLine>
<CommentLine> type of a variable is a numeric data type. It will return TRUE</CommentLine>
<CommentLine> for all of the following data types:</CommentLine>
<CommentLine>       vbCurrency</CommentLine>
<CommentLine>       vbDecimal</CommentLine>
<CommentLine>       vbDouble</CommentLine>
<CommentLine>       vbInteger</CommentLine>
<CommentLine>       vbLong</CommentLine>
<CommentLine>       vbSingle</CommentLine>
<CommentLine></CommentLine>
<CommentLine> It will return FALSE for any other data type, including empty Variants and objects.</CommentLine>
<CommentLine> If TestVar is an allocated array, it will test data type of the array</CommentLine>
<CommentLine> and return TRUE or FALSE for that data type. If TestVar is an allocated</CommentLine>
<CommentLine> array, it tests the data type of the first element of the array. If</CommentLine>
<CommentLine> TestVar is an array of Variants, the function will indicate only whether</CommentLine>
<CommentLine> the first element of the array is numeric. Other elements of the array</CommentLine>
<CommentLine> may not be numeric data types. To test an entire array of variants</CommentLine>
<CommentLine> to ensure they are all numeric data types, use the IsVariantArrayNumeric</CommentLine>
<CommentLine> function.</CommentLine>
<CommentLine></CommentLine>
<CommentLine> It will return FALSE for any other data type. Use this procedure</CommentLine>
<CommentLine> instead of VBA&apos;s IsNumeric function because IsNumeric will return</CommentLine>
<CommentLine> TRUE if the variable is a string containing numeric data. This</CommentLine>
<CommentLine> will cause problems with code like</CommentLine>
<CommentLine>        Dim V1 As Variant</CommentLine>
<CommentLine>        Dim V2 As Variant</CommentLine>
<CommentLine>        V1 = &quot;1&quot;</CommentLine>
<CommentLine>        V2 = &quot;2&quot;</CommentLine>
<CommentLine>        If IsNumeric(V1) = True Then</CommentLine>
<CommentLine>            If IsNumeric(V2) = True Then</CommentLine>
<CommentLine>                Debug.Print V1 + V2</CommentLine>
<CommentLine>            End If</CommentLine>
<CommentLine>        End If</CommentLine>
<CommentLine></CommentLine>
<CommentLine> The output of the Debug.Print statement will be &quot;12&quot;, not 3,</CommentLine>
<CommentLine> because V1 and V2 are strings and the &apos;+&apos; operator acts like</CommentLine>
<CommentLine> the &apos;&amp;&apos; operator when used with strings. This can lead to</CommentLine>
<CommentLine> unexpected results.</CommentLine>
<CommentLine></CommentLine>
<CommentLine> IsNumeric should only be used to test strings for numeric content</CommentLine>
<CommentLine> when converting a string value to a numeric variable.</CommentLine>
<CommentLine>&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function IsNumericDataType(testVar As Variant) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>testVar</Name>
<Type>Variant</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>IsVariantArrayConsistent</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>102</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;</CommentLine>
<CommentLine> IsVariantArrayConsistent</CommentLine>
<CommentLine></CommentLine>
<CommentLine> This returns TRUE or FALSE indicating whether an array of variants</CommentLine>
<CommentLine> contains all the same data types. Returns FALSE under the following</CommentLine>
<CommentLine> circumstances:</CommentLine>
<CommentLine>       Arr is not an array</CommentLine>
<CommentLine>       Arr is an array but is unallocated</CommentLine>
<CommentLine>       Arr is a multidimensional array</CommentLine>
<CommentLine>       Arr is allocated but does not contain consistant data types.</CommentLine>
<CommentLine></CommentLine>
<CommentLine> If Arr is an array of objects, objects that are Nothing are ignored.</CommentLine>
<CommentLine> As long as all non-Nothing objects are the same object type, the</CommentLine>
<CommentLine> function returns True.</CommentLine>
<CommentLine></CommentLine>
<CommentLine> It returns TRUE if all the elements of the array have the same</CommentLine>
<CommentLine> data type. If Arr is an array of a specific data types, not variants,</CommentLine>
<CommentLine> (E.g., Dim V(1 To 3) As Long), the function will return True. If</CommentLine>
<CommentLine> an array of variants contains an uninitialized element (VarType =</CommentLine>
<CommentLine> vbEmpty) that element is skipped and not used in the comparison. The</CommentLine>
<CommentLine> reasoning behind this is that an empty variable will return the</CommentLine>
<CommentLine> data type of the variable to which it is assigned (e.g., it will</CommentLine>
<CommentLine> return vbNullString to a String and 0 to a Double).</CommentLine>
<CommentLine></CommentLine>
<CommentLine> The function does not support arrays of User Defined Types.</CommentLine>
<CommentLine></CommentLine>
<CommentLine>&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function IsVariantArrayConsistent(arr As Variant) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>arr</Name>
<Type>Variant</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>IsVariantArrayNumeric</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>93</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;</CommentLine>
<CommentLine> IsVariantArrayNumeric</CommentLine>
<CommentLine></CommentLine>
<CommentLine> This function return TRUE if all the elements of an array of</CommentLine>
<CommentLine> variants are numeric data types. They need not all be the same data</CommentLine>
<CommentLine> type. You can have a mix of Integer, Longs, Doubles, and Singles.</CommentLine>
<CommentLine> As long as they are all numeric data types, the function will</CommentLine>
<CommentLine> return TRUE. If a non-numeric data type is encountered, the</CommentLine>
<CommentLine> function will return FALSE. Also, it will return FALSE if</CommentLine>
<CommentLine> TestArray is not an array, or if TestArray has not been</CommentLine>
<CommentLine> allocated. TestArray may be a multi-dimensional array. This</CommentLine>
<CommentLine> procedure uses the IsNumericDataType function to determine whether</CommentLine>
<CommentLine> a variable is a numeric data type. If there is an uninitialized</CommentLine>
<CommentLine> variant (VarType = vbEmpty) in the array, it is skipped and not</CommentLine>
<CommentLine> used in the comparison (i.e., Empty is considered a valid numeric</CommentLine>
<CommentLine> data type since you can assign a number to it).</CommentLine>
<CommentLine>&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function IsVariantArrayNumeric(testarray As Variant) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>testarray</Name>
<Type>Variant</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>MoveEmptyStringsToEndOfArray</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>81</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;</CommentLine>
<CommentLine> This procedure takes the SORTED array InputArray, which, if sorted in</CommentLine>
<CommentLine> ascending order, will have all empty strings at the front of the array.</CommentLine>
<CommentLine> This procedure moves those strings to the end of the array, shifting</CommentLine>
<CommentLine> the non-empty strings forward in the array.</CommentLine>
<CommentLine> Note that InputArray MUST be sorted in ascending order.</CommentLine>
<CommentLine> Returns True if the array was correctly shifted (if necessary) and False</CommentLine>
<CommentLine> if an error occurred.</CommentLine>
<CommentLine> This function uses the following functions, which are included as Private</CommentLine>
<CommentLine> procedures at the end of this module.</CommentLine>
<CommentLine>       FirstNonEmptyStringIndexInArray</CommentLine>
<CommentLine>       GetDimensions</CommentLine>
<CommentLine>       IsAllocated</CommentLine>
<CommentLine>&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function MoveEmptyStringsToEndOfArray(inputArray As Variant) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>inputArray</Name>
<Type>Variant</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>ResetVariantArrayToDefaults</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>41</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;</CommentLine>
<CommentLine> ResetVariantArrayToDefaults</CommentLine>
<CommentLine> This resets all the elements of an array of Variants back to their appropriate</CommentLine>
<CommentLine> default values. The elements of the array may be of mixed types (e.g., some Longs,</CommentLine>
<CommentLine> some Objects, some Strings, etc). Each data type will be set to the appropriate</CommentLine>
<CommentLine> default value (0, vbNullString, Empty, or Nothing). It returns True if the</CommentLine>
<CommentLine> array was set to defautls, or False if an error occurred. InputArray must be</CommentLine>
<CommentLine> an allocated single-dimensional array. This function differs from the Erase</CommentLine>
<CommentLine> function in that it preserves the original data types, while Erase sets every</CommentLine>
<CommentLine> element to Empty.</CommentLine>
<CommentLine>&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function ResetVariantArrayToDefaults(inputArray As Variant) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>inputArray</Name>
<Type>Variant</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>ReverseArrayInPlace</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>3</CountOfDeclarationLines>
<CountOfLines>75</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;</CommentLine>
<CommentLine> ReverseArrayInPlace</CommentLine>
<CommentLine> This procedure reverses the order of an array in place -- this is, the array variable</CommentLine>
<CommentLine> in the calling procedure is reversed. This works only on single-dimensional arrays</CommentLine>
<CommentLine> of simple data types (String, Single, Double, Integer, Long). It will not work</CommentLine>
<CommentLine> on arrays of objects. Use ReverseArrayOfObjectsInPlace to reverse an array of objects.</CommentLine>
<CommentLine>&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function ReverseArrayInPlace( inputArray As Variant ) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>inputArray</Name>
<Type>Variant</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>ReverseArrayOfObjectsInPlace</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>3</CountOfDeclarationLines>
<CountOfLines>87</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;</CommentLine>
<CommentLine> ReverseArrayOfObjectsInPlace</CommentLine>
<CommentLine> This procedure reverses the order of an array in place -- this is, the array variable</CommentLine>
<CommentLine> in the calling procedure is reversed. This works only with arrays of objects. It does</CommentLine>
<CommentLine> not work on simple variables. Use ReverseArrayInPlace for simple variables. An error</CommentLine>
<CommentLine> will occur if an element of the array is not an object.</CommentLine>
<CommentLine>&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function ReverseArrayOfObjectsInPlace( inputArray As Variant ) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>inputArray</Name>
<Type>Variant</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>SetObjectArrayToNothing</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>65</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;</CommentLine>
<CommentLine> SetObjectArrrayToNothing</CommentLine>
<CommentLine> This sets all the elements of InputArray to Nothing. Use this function</CommentLine>
<CommentLine> rather than Erase because if InputArray is an array of Variants, Erase</CommentLine>
<CommentLine> will set each element to Empty, not Nothing, and the element will cease</CommentLine>
<CommentLine> to be an object.</CommentLine>
<CommentLine></CommentLine>
<CommentLine> The function returns True if successful, False otherwise.</CommentLine>
<CommentLine>&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function SetObjectArrayToNothing(inputArray As Variant) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>inputArray</Name>
<Type>Variant</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>TransposeArray</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>78</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;</CommentLine>
<CommentLine> TransposeArray</CommentLine>
<CommentLine> This transposes a two-dimensional array. It returns True if successful or</CommentLine>
<CommentLine> False if an error occurs. InputArr must be two-dimensions. OutputArr must be</CommentLine>
<CommentLine> a dynamic array. It will be Erased and resized, so any existing content will</CommentLine>
<CommentLine> be destroyed.</CommentLine>
<CommentLine>&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function TransposeArray(InputArr As Variant, OutputArr As Variant) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>InputArr</Name>
<Type>Variant</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>OutputArr</Name>
<Type>Variant</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>VectorsToArray</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>162</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;</CommentLine>
<CommentLine> VectorsToArray</CommentLine>
<CommentLine> This function takes 1 or more single-dimensional arrays and converts</CommentLine>
<CommentLine> them into a single multi-dimensional array. Each array in Vectors</CommentLine>
<CommentLine> comprises one row of the new array. The number of columns in the</CommentLine>
<CommentLine> new array is the maximum of the number of elements in each vector.</CommentLine>
<CommentLine> Arr MUST be a dynamic array of a data type compatible with ALL the</CommentLine>
<CommentLine> elements in each Vector. The code does NOT trap for an error</CommentLine>
<CommentLine> 13 - Type Mismatch.</CommentLine>
<CommentLine></CommentLine>
<CommentLine> If the Vectors are of differing sizes, Arr is sized to hold the</CommentLine>
<CommentLine> maximum number of elements in a Vector. The procedure Erases the</CommentLine>
<CommentLine> Arr array, so when it is reallocated with Redim, all elements will</CommentLine>
<CommentLine> be the reset to their default value (0 or vbNullString or Empty).</CommentLine>
<CommentLine> Unused elements in the new array will remain the default value for</CommentLine>
<CommentLine> that data type.</CommentLine>
<CommentLine></CommentLine>
<CommentLine> Each Vector in Vectors must be a single dimensional array, but</CommentLine>
<CommentLine> the Vectors may be of different sizes and LBounds.</CommentLine>
<CommentLine></CommentLine>
<CommentLine> Each element in each Vector must be a simple data type. The elements</CommentLine>
<CommentLine> may NOT be Object, Arrays, or User-Defined Types.</CommentLine>
<CommentLine></CommentLine>
<CommentLine> The rows and columns of the result array are 0-based, regardless of</CommentLine>
<CommentLine> the LBound of each vector and regardless of the Option Base statement.</CommentLine>
<CommentLine>&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function VectorsToArray(arr As Variant, ParamArray Vectors()) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>arr</Name>
<Type>Variant</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Vectors()</Name>
<Type></Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>True</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>IsArraySorted</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>2</CountOfDeclarationLines>
<CountOfLines>113</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;</CommentLine>
<CommentLine> IsArraySorted</CommentLine>
<CommentLine> This function determines whether a single-dimensional array is sorted. Because</CommentLine>
<CommentLine> sorting is an expensive operation, especially so on large array of Variants,</CommentLine>
<CommentLine> you may want to determine if an array is already in sorted order prior to</CommentLine>
<CommentLine> doing an actual sort.</CommentLine>
<CommentLine> This function returns True if an array is in sorted order (either ascending or</CommentLine>
<CommentLine> descending order, depending on the value of the Descending parameter -- default</CommentLine>
<CommentLine> is false = Ascending). The decision to do a string comparison (with StrComp) or</CommentLine>
<CommentLine> a numeric comparison (with &lt; or &gt;) is based on the data type of the first</CommentLine>
<CommentLine> element of the array.</CommentLine>
<CommentLine> If TestArray is not an array, is an unallocated dynamic array, or has more than</CommentLine>
<CommentLine> one dimension, or the VarType of TestArray is not compatible, the function</CommentLine>
<CommentLine> returns NULL.</CommentLine>
<CommentLine>&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function IsArraySorted(testarray As Variant, Optional Descending As Boolean = False) As Variant</Declaration>
<Parameters>
<Parameter>
<Name>testarray</Name>
<Type>Variant</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Descending</Name>
<Type>Boolean</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>False</DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Variant</ReturnType>
</Procedure>
<Procedure>
<Name>CombineTwoDArrays</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>2</CountOfDeclarationLines>
<CountOfLines>211</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;</CommentLine>
<CommentLine> TwoArraysToOneArray</CommentLine>
<CommentLine> This takes two 2-dimensional arrays, Arr1 and Arr2, and</CommentLine>
<CommentLine> returns an array combining the two. The number of Rows</CommentLine>
<CommentLine> in the result is NumRows(Arr1) + NumRows(Arr2). Arr1 and</CommentLine>
<CommentLine> Arr2 must have the same number of columns, and the result</CommentLine>
<CommentLine> array will have that many columns. All the LBounds must</CommentLine>
<CommentLine> be the same. E.g.,</CommentLine>
<CommentLine> The following arrays are legal:</CommentLine>
<CommentLine>        Dim Arr1(0 To 4, 0 To 10)</CommentLine>
<CommentLine>        Dim Arr2(0 To 3, 0 To 10)</CommentLine>
<CommentLine></CommentLine>
<CommentLine> The following arrays are illegal</CommentLine>
<CommentLine>        Dim Arr1(0 To 4, 1 To 10)</CommentLine>
<CommentLine>        Dim Arr2(0 To 3, 0 To 10)</CommentLine>
<CommentLine></CommentLine>
<CommentLine> The returned result array is Arr1 with additional rows</CommentLine>
<CommentLine> appended from Arr2. For example, the arrays</CommentLine>
<CommentLine>    a    b        and     e    f</CommentLine>
<CommentLine>    c    d                g    h</CommentLine>
<CommentLine> become</CommentLine>
<CommentLine>    a    b</CommentLine>
<CommentLine>    c    d</CommentLine>
<CommentLine>    e    f</CommentLine>
<CommentLine>    g    h</CommentLine>
<CommentLine></CommentLine>
<CommentLine>&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;</CommentLine>
<CommentLine>&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;</CommentLine>
<CommentLine> Upper and lower bounds of Arr1.</CommentLine>
<CommentLine>&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function CombineTwoDArrays(arr1 As Variant, arr2 As Variant) As Variant</Declaration>
<Parameters>
<Parameter>
<Name>arr1</Name>
<Type>Variant</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>arr2</Name>
<Type>Variant</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Variant</ReturnType>
</Procedure>
<Procedure>
<Name>ExpandArray</Name>
<Scope></Scope>
<Type>Function</Type>
<CountOfDeclarationLines>2</CountOfDeclarationLines>
<CountOfLines>138</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;</CommentLine>
<CommentLine> ExpandArray</CommentLine>
<CommentLine> This expands a two-dimensional array in either dimension. It returns the result</CommentLine>
<CommentLine> array if successful, or NULL if an error occurred. The original array is never</CommentLine>
<CommentLine> changed.</CommentLine>
<CommentLine> Paramters:</CommentLine>
<CommentLine> --------------------</CommentLine>
<CommentLine> Arr                   is the array to be expanded.</CommentLine>
<CommentLine></CommentLine>
<CommentLine> WhichDim              is either 1 for additional rows or 2 for</CommentLine>
<CommentLine>                       additional columns.</CommentLine>
<CommentLine></CommentLine>
<CommentLine> AdditionalElements    is the number of additional rows or columns</CommentLine>
<CommentLine>                       to create.</CommentLine>
<CommentLine></CommentLine>
<CommentLine> FillValue             is the value to which the new array elements should be</CommentLine>
<CommentLine>                       initialized.</CommentLine>
<CommentLine></CommentLine>
<CommentLine> You can nest calls to Expand array to expand both the number of rows and</CommentLine>
<CommentLine> columns. E.g.,</CommentLine>
<CommentLine></CommentLine>
<CommentLine> C = ExpandArray(ExpandArray(Arr:=A, WhichDim:=1, AdditionalElements:=3, FillValue:=&quot;R&quot;), _</CommentLine>
<CommentLine>    WhichDim:=2, AdditionalElements:=4, FillValue:=&quot;C&quot;)</CommentLine>
<CommentLine> This first adds three rows at the bottom of the array, and then adds four</CommentLine>
<CommentLine> columns on the right of the array.</CommentLine>
<CommentLine></CommentLine>
<CommentLine>&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Function ExpandArray(arr As Variant, WhichDim As Long, AdditionalElements As Long, FillValue As Variant) As Variant</Declaration>
<Parameters>
<Parameter>
<Name>arr</Name>
<Type>Variant</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>WhichDim</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>AdditionalElements</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>FillValue</Name>
<Type>Variant</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Variant</ReturnType>
</Procedure>
<Procedure>
<Name>SwapArrayRows</Name>
<Scope></Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>70</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;</CommentLine>
<CommentLine> SwapArrayRows</CommentLine>
<CommentLine> This function returns an array based on Arr with Row1 and Row2 swapped.</CommentLine>
<CommentLine> It returns the result array or NULL if an error occurred.</CommentLine>
<CommentLine>&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Function SwapArrayRows(arr As Variant, Row1 As Long, Row2 As Long) As Variant</Declaration>
<Parameters>
<Parameter>
<Name>arr</Name>
<Type>Variant</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Row1</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Row2</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Variant</ReturnType>
</Procedure>
<Procedure>
<Name>SwapArrayColumns</Name>
<Scope></Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>69</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;</CommentLine>
<CommentLine> SwapArrayColumns</CommentLine>
<CommentLine> This function returns an array based on Arr with Col1 and Col2 swapped.</CommentLine>
<CommentLine> It returns the result array or NULL if an error occurred.</CommentLine>
<CommentLine>&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Function SwapArrayColumns(arr As Variant, Col1 As Long, Col2 As Long) As Variant</Declaration>
<Parameters>
<Parameter>
<Name>arr</Name>
<Type>Variant</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Col1</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Col2</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Variant</ReturnType>
</Procedure>
<Procedure>
<Name>GetColumn</Name>
<Scope></Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>59</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;</CommentLine>
<CommentLine> GetColumn</CommentLine>
<CommentLine> This populates ResultArr with a one-dimensional array that is the</CommentLine>
<CommentLine> specified column of Arr. The existing contents of ResultArr are</CommentLine>
<CommentLine> destroyed. ResultArr must be a dynamic array.</CommentLine>
<CommentLine> Returns True or False indicating success.</CommentLine>
<CommentLine>&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Function GetColumn(arr As Variant, ResultArr As Variant, ColumnNumber As Long) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>arr</Name>
<Type>Variant</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>ResultArr</Name>
<Type>Variant</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>ColumnNumber</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>GetRow</Name>
<Scope></Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>59</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;</CommentLine>
<CommentLine> GetRow</CommentLine>
<CommentLine> This populates ResultArr with a one-dimensional array that is the</CommentLine>
<CommentLine> specified row of Arr. The existing contents of ResultArr are</CommentLine>
<CommentLine> destroyed. ResultArr must be a dynamic array.</CommentLine>
<CommentLine> Returns True or False indicating success.</CommentLine>
<CommentLine>&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Function GetRow(arr As Variant, ResultArr As Variant, RowNumber As Long) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>arr</Name>
<Type>Variant</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>ResultArr</Name>
<Type>Variant</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>RowNumber</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>IsCollectionItem</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>4</CountOfDeclarationLines>
<CountOfLines>29</CountOfLines>
<CommentLines>
<CommentLine>-------------------------------------------------------------------------------</CommentLine>
<CommentLine>TODO Needs to be moved to a new module UtilCollection in future with other col functions</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : IsCollectionItem</CommentLine>
<CommentLine> Author    : Ivanov, Bozhan</CommentLine>
<CommentLine> Purpose   : returns true if item is part of the collection</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
<Declaration>Public Function IsCollectionItem( ByRef col As Collection, ByVal key As Variant ) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>col</Name>
<Type>Collection</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>key</Name>
<Type>Variant</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>BubbleSort1DArray</Name>
<Scope></Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>57</CountOfLines>
<CommentLines>
<CommentLine>TODO Revise</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure   : BubbleSort1DArray</CommentLine>
<CommentLine> Description :</CommentLine>
<CommentLine> Source      : https://en.wikibooks.org/wiki/Visual_Basic_for_Applications/Bubble_Sort_One_Dimensional_Arrays</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
<Declaration>Function BubbleSort1DArray(vIn As Variant, bAscending As Boolean, Optional vRet As Variant) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>vIn</Name>
<Type>Variant</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>bAscending</Name>
<Type>Boolean</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>vRet</Name>
<Type>Variant</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>SortArr2D1Key</Name>
<Scope></Scope>
<Type>Function</Type>
<CountOfDeclarationLines>5</CountOfDeclarationLines>
<CountOfLines>104</CountOfLines>
<CommentLines>
<CommentLine>TODO revise</CommentLine>
<CommentLine>--------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : Sort2DArr</CommentLine>
<CommentLine> Source    : https://en.wikibooks.org/wiki/Visual_Basic_for_Applications/Bubble_Sort_on_One_Key</CommentLine>
<CommentLine> Purpose   : Bubblesorts a 2D array on 1 key, up or down, on any column or row.</CommentLine>
<CommentLine>             Options include in-place, with the source changed, or</CommentLine>
<CommentLine>             returned in vRet, with the source array intact.</CommentLine>
<CommentLine>             Optional parameters default to: ROW SORT in place, ASCENDING,</CommentLine>
<CommentLine>             using COLUMN ONE as the key.</CommentLine>
<CommentLine>--------------------------------------------------------------------------------</CommentLine>
</CommentLines>
<Declaration>Function SortArr2D1Key(ByRef vA As Variant, Optional ByVal bIsAscending As Boolean = True, Optional ByVal bIsRowSort As Boolean = True, Optional ByVal SortIndex As Long = -1, Optional ByRef vRet As Variant) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>vA</Name>
<Type>Variant</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>bIsAscending</Name>
<Type>Boolean</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>True</DefaultValue>
</Parameter>
<Parameter>
<Name>bIsRowSort</Name>
<Type>Boolean</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>True</DefaultValue>
</Parameter>
<Parameter>
<Name>SortIndex</Name>
<Type>Long</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>-1</DefaultValue>
</Parameter>
<Parameter>
<Name>vRet</Name>
<Type>Variant</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>SortArr2D3Keys</Name>
<Scope></Scope>
<Type>Function</Type>
<CountOfDeclarationLines>7</CountOfDeclarationLines>
<CountOfLines>280</CountOfLines>
<CommentLines>
<CommentLine>TODO Revise</CommentLine>
<CommentLine>--------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : Sort2DArr3Keys</CommentLine>
<CommentLine> Purpose   : Bubblesorts a 2D array using 3 keys, up or down, on any column or row.</CommentLine>
<CommentLine>             For example, sorting using up to three columns;</CommentLine>
<CommentLine>             Eg; first sorts surnames, then sorts among same surnames for first names,</CommentLine>
<CommentLine>             then among similar surnames with same first names for middle names.</CommentLine>
<CommentLine>             Options include in-place, with the source changed, or</CommentLine>
<CommentLine>             if supplied, returned in vR, with the source array intact.</CommentLine>
<CommentLine>             Optional parameters default to: ROW SORT, ASCENDING.</CommentLine>
<CommentLine>             Trailing key options that are not needed should be set to same as previous.</CommentLine>
<CommentLine> Source    : https://en.wikibooks.org/wiki/Visual_Basic_for_Applications/Bubble_Sort_on_Multiple_Keys</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
<Declaration>Function SortArr2D3Keys(vA As Variant, Optional Key1 As Long = -1, Optional Key2 As Long = -1, Optional Key3 As Long = -1, Optional ByVal bIsAscending As Boolean = True, Optional ByVal bIsRowSort As Boolean = True, Optional ByRef vR As Variant) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>vA</Name>
<Type>Variant</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Key1</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>-1</DefaultValue>
</Parameter>
<Parameter>
<Name>Key2</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>-1</DefaultValue>
</Parameter>
<Parameter>
<Name>Key3</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>-1</DefaultValue>
</Parameter>
<Parameter>
<Name>bIsAscending</Name>
<Type>Boolean</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>True</DefaultValue>
</Parameter>
<Parameter>
<Name>bIsRowSort</Name>
<Type>Boolean</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>True</DefaultValue>
</Parameter>
<Parameter>
<Name>vR</Name>
<Type>Variant</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
</Procedures>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Author    : Ivanov, Bozhan</CommentLine>
<CommentLine> Purpose   : Provides array Utility to extend functionality</CommentLine>
<CommentLine>   Handles only up to 2D arrays</CommentLine>
<CommentLine>   Some of these Procedures are modified versions of the procedures in modArraySupport</CommentLine>
<CommentLine>   By Chip Pearson, chip@cpearson.com, www.cpearson.com</CommentLine>
<CommentLine>   For details on these functions, see www.cpearson.com/excel/VBAArrays.htm</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
</CodeModule>
</File>
<File>
<Name>UtilUnits</Name>
<FileName></FileName>
<PathFileName></PathFileName>
<Type>ClassModule</Type>
<Properties>
<Property>
<Name>Name</Name>
<Value>UtilUnits</Value>
</Property>
<Property>
<Name>Instancing</Name>
<Value>1</Value>
</Property>
</Properties>
<CodeModule>
<CountOfDeclarationLines>23</CountOfDeclarationLines>
<CountOfLines>85</CountOfLines>
<Interfaces>
</Interfaces>
<Events>
</Events>
<Procedures>
<Procedure>
<Name>TwipsPerPoint</Name>
<Scope></Scope>
<Type>PropertyGet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Property Get TwipsPerPoint() As Single</Declaration>
<Parameters>
</Parameters>
<ReturnType>Single</ReturnType>
</Procedure>
<Procedure>
<Name>TwipsPerInch</Name>
<Scope></Scope>
<Type>PropertyGet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Property Get TwipsPerInch() As Single</Declaration>
<Parameters>
</Parameters>
<ReturnType>Single</ReturnType>
</Procedure>
<Procedure>
<Name>PixelsPerInch</Name>
<Scope></Scope>
<Type>PropertyGet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Property Get PixelsPerInch() As Single</Declaration>
<Parameters>
</Parameters>
<ReturnType>Single</ReturnType>
</Procedure>
<Procedure>
<Name>InchesPerCm</Name>
<Scope></Scope>
<Type>PropertyGet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Property Get InchesPerCm() As Single</Declaration>
<Parameters>
</Parameters>
<ReturnType>Single</ReturnType>
</Procedure>
<Procedure>
<Name>TwipsPerCm</Name>
<Scope></Scope>
<Type>PropertyGet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Property Get TwipsPerCm() As Single</Declaration>
<Parameters>
</Parameters>
<ReturnType>Single</ReturnType>
</Procedure>
<Procedure>
<Name>TwipsToInch</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function TwipsToInch(value As Single) As Single</Declaration>
<Parameters>
<Parameter>
<Name>value</Name>
<Type>Single</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Single</ReturnType>
</Procedure>
<Procedure>
<Name>InchToTwips</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function InchToTwips(value As Single) As Single</Declaration>
<Parameters>
<Parameter>
<Name>value</Name>
<Type>Single</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Single</ReturnType>
</Procedure>
<Procedure>
<Name>PixelsToInch</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function PixelsToInch(value As Single) As Single</Declaration>
<Parameters>
<Parameter>
<Name>value</Name>
<Type>Single</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Single</ReturnType>
</Procedure>
<Procedure>
<Name>InchToPixels</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function InchToPixels(value As Single) As Single</Declaration>
<Parameters>
<Parameter>
<Name>value</Name>
<Type>Single</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Single</ReturnType>
</Procedure>
<Procedure>
<Name>TwipsToCm</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function TwipsToCm(value As Single) As Single</Declaration>
<Parameters>
<Parameter>
<Name>value</Name>
<Type>Single</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Single</ReturnType>
</Procedure>
<Procedure>
<Name>CmToTwips</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function CmToTwips(value As Single) As Single</Declaration>
<Parameters>
<Parameter>
<Name>value</Name>
<Type>Single</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Single</ReturnType>
</Procedure>
<Procedure>
<Name>PixelsToCm</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function PixelsToCm(value As Single) As Single</Declaration>
<Parameters>
<Parameter>
<Name>value</Name>
<Type>Single</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Single</ReturnType>
</Procedure>
<Procedure>
<Name>CmToPixels</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>6</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function CmToPixels(value As Single) As Single</Declaration>
<Parameters>
<Parameter>
<Name>value</Name>
<Type>Single</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Single</ReturnType>
</Procedure>
<Procedure>
<Name>SingleToString</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function SingleToString(ByVal value As Single) As String</Declaration>
<Parameters>
<Parameter>
<Name>value</Name>
<Type>Single</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>String</ReturnType>
</Procedure>
<Procedure>
<Name>StringToSingle</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function StringToSingle(ByVal value As String) As Single</Declaration>
<Parameters>
<Parameter>
<Name>value</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Single</ReturnType>
</Procedure>
</Procedures>
<CommentLines>
</CommentLines>
</CodeModule>
</File>
</Files>
</Project>
</Projects>
</ProjectGroup>
